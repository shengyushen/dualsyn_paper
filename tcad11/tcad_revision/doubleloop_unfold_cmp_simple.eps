%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: doubleloop_unfold_cmp_simple.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: Administrator
%%CreationDate: 2011-4-7, 15:10:41
%%BoundingBox: -52 51 90 141
%%HiResBoundingBox: -51.5607 51.5607 89.0553 140.6160
%%CropBox: -51.5607 51.5607 89.0553 140.6160
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1136 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:CreatorTool="Acrobat PDFMaker 9.0 Visio 版"
   xmp:ModifyDate="2011-04-07T15:10:14+08:00"
   xmp:CreateDate="2011-04-07T15:10:12+08:00"
   xmp:MetadataDate="2011-04-07T15:10:14+08:00"
   pdf:Producer="Acrobat Distiller 9.0.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:7895a6b3-aba1-4b5c-b42e-574bfbea3e9d"
   xmpMM:InstanceID="uuid:98900e93-fd32-43f2-971f-bf9f41c5ae62"
   pdfx:Company="super">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>FtpDown</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -140.616 translate
pgsv
[0 1 -1 0 89.0553 0 ]ct
gsave
np
gsave
0 0 mo
0 140.616 li
89.0553 140.616 li
89.0553 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.719916 lw
1 lc
1 lj
10 ml
[2.15975 2.15975 ] 0 dsh
false sadj
19.5017 121.89 mo
19.5017 56.783 li
false sop
.75021 .679683 .670222 .90164 cmyk
@
16.2636 57.4327 mo
19.5016 54.1946 li
22.7397 57.4327 li
16.2636 57.4327 li
ef
[] 0 dsh
16.9238 102.063 mo
16.6932 102.074 16.4732 102.074 16.2426 102.074 cv
5.01949 102.021 4.14973 93.2818 4.7156 86.2293 cv
5.28147 79.1664 7.29347 73.8116 19.5016 73.7906 cv
@
16.6723 98.7728 mo
19.5016 102.378 li
15.8968 105.207 li
16.6723 98.7728 li
ef
11.3175 90.1904 mo
10.9926 90.1904 li
10.9926 85.9778 li
11.3175 85.9778 li
cp
10.9926 90.1904 mo
cp
12.5854 90.1904 mo
12.2711 90.1904 li
12.2711 85.9778 li
12.5854 85.9778 li
cp
f
[2.15975 2.15975 ] 0 dsh
58.5154 123.629 mo
58.5154 7.17479 li
@
55.2774 7.82449 mo
58.5154 4.58646 li
61.7535 7.82449 li
55.2774 7.82449 li
ef
1.19986 lw
[.00122256 3.59975 ] 0 dsh
51.6307 70.563 mo
51.6307 52.8744 li
@
.719916 lw
[] 0 dsh
55.9481 52.4656 mo
55.7175 52.4656 55.487 52.4656 55.2669 52.4656 cv
44.0333 52.4237 43.1635 43.6736 43.7294 36.6316 cv
44.3057 29.5687 46.3177 24.2139 58.5154 24.1929 cv
@
55.6861 49.1751 mo
58.5154 52.7695 li
54.9106 55.6093 li
55.6861 49.1751 li
ef
50.3312 40.5824 mo
50.0169 40.5824 li
50.0169 36.3698 li
50.3312 36.3698 li
cp
50.0169 40.5824 mo
cp
51.6097 40.5824 mo
51.2848 40.5824 li
51.2848 36.3698 li
51.6097 36.3698 li
cp
f
55.9481 102.063 mo
55.7175 102.074 55.487 102.074 55.2669 102.074 cv
44.0333 102.021 43.1635 93.2818 43.7294 86.2293 cv
44.3057 79.1664 46.3177 73.8116 58.5154 73.7906 cv
@
55.6861 98.7728 mo
58.5154 102.378 li
54.9106 105.207 li
55.6861 98.7728 li
ef
50.3312 90.1904 mo
50.0169 90.1904 li
50.0169 85.9778 li
50.3312 85.9778 li
cp
50.0169 90.1904 mo
cp
51.6097 90.1904 mo
51.2848 90.1904 li
51.2848 85.9778 li
51.6097 85.9778 li
cp
f
36.5198 113.077 mo
36.8027 113.444 36.9599 113.674 37.0123 113.768 cv
37.0752 113.905 37.1066 114.062 37.1066 114.219 cv
37.1066 114.46 37.0228 114.67 36.8551 114.827 cv
36.6874 114.984 36.4569 115.068 36.1844 115.068 cv
36.0063 115.068 35.8596 115.026 35.7338 114.953 cv
35.5557 114.848 35.388 114.659 35.2308 114.397 cv
35.0736 114.125 34.885 113.685 34.665 113.077 cv
34.5182 113.077 li
34.162 113.077 33.9209 113.129 33.7847 113.245 cv
33.6485 113.36 33.5856 113.527 33.5856 113.737 cv
33.5856 113.905 33.6275 114.03 33.7218 114.125 cv
33.8057 114.23 33.9105 114.282 34.0257 114.282 cv
34.2458 114.271 li
34.3715 114.271 34.4659 114.303 34.5287 114.366 cv
34.5916 114.418 34.623 114.502 34.623 114.607 cv
34.623 114.701 34.5916 114.774 34.5287 114.837 cv
34.4554 114.9 34.3611 114.932 34.2458 114.932 cv
34.0257 114.932 33.8161 114.816 33.6275 114.586 cv
33.4389 114.355 33.3446 114.041 33.3446 113.622 cv
33.3446 113.307 33.397 113.045 33.5122 112.836 cv
33.5856 112.689 33.7114 112.574 33.8895 112.5 cv
34.0048 112.459 34.2248 112.427 34.5706 112.427 cv
35.7862 112.427 li
36.132 112.427 36.3416 112.427 36.415 112.406 cv
36.4988 112.396 36.5407 112.375 36.5722 112.343 cv
36.5931 112.312 36.6141 112.28 36.6141 112.239 cv
36.6141 112.197 36.6036 112.165 36.5826 112.134 cv
36.5512 112.081 36.4569 111.977 36.2997 111.819 cv
36.5198 111.819 li
36.9075 112.113 37.1066 112.385 37.1066 112.658 cv
37.1066 112.783 37.0542 112.878 36.9704 112.962 cv
36.876 113.035 36.7293 113.077 36.5198 113.077 cv
cp
36.2578 113.077 mo
34.8955 113.077 li
35.0527 113.465 35.1679 113.727 35.2308 113.842 cv
35.3461 114.041 35.4614 114.188 35.5871 114.282 cv
35.7129 114.366 35.8491 114.408 35.9958 114.408 cv
36.1844 114.408 36.3416 114.355 36.4674 114.24 cv
36.5931 114.135 36.656 113.999 36.656 113.852 cv
36.656 113.653 36.5198 113.402 36.2578 113.077 cv
f
31.6365 111.62 mo
31.4793 111.62 li
31.6679 111.222 31.8985 110.897 32.1709 110.635 cv
32.5482 110.258 32.9988 109.975 33.5018 109.776 cv
34.0152 109.566 34.5497 109.462 35.1051 109.462 cv
35.912 109.462 36.6455 109.661 37.3162 110.059 cv
37.9763 110.457 38.4584 110.981 38.7413 111.62 cv
38.5946 111.62 li
38.4165 111.306 38.1754 111.033 37.8716 110.834 cv
37.5677 110.625 37.1695 110.468 36.6979 110.373 cv
36.2263 110.268 35.7338 110.216 35.2203 110.216 cv
34.6649 110.216 34.1619 110.258 33.7009 110.352 cv
33.3446 110.415 33.0616 110.499 32.8416 110.593 cv
32.6215 110.688 32.4119 110.824 32.2128 110.981 cv
32.0137 111.138 31.8251 111.358 31.6365 111.62 cv
f
31.7308 102.514 mo
32.9778 102.451 li
32.9778 102.598 li
32.7577 102.629 32.6006 102.671 32.5062 102.713 cv
32.3595 102.797 32.2443 102.902 32.1709 103.038 cv
32.108 103.174 32.0661 103.352 32.0661 103.572 cv
32.0661 104.316 li
36.1111 104.316 li
36.4359 104.316 36.6455 104.274 36.7189 104.212 cv
36.8341 104.107 36.8865 103.96 36.8865 103.75 cv
36.8865 103.572 li
37.0332 103.572 li
37.0332 105.815 li
36.8865 105.815 li
36.8865 105.626 li
36.8865 105.406 36.8236 105.238 36.6874 105.155 cv
36.6036 105.092 36.415 105.06 36.1111 105.06 cv
32.0661 105.06 li
32.0661 105.7 li
32.0661 105.951 32.0871 106.119 32.1185 106.223 cv
32.1709 106.36 32.2652 106.475 32.4119 106.58 cv
32.5482 106.674 32.7368 106.726 32.9778 106.747 cv
32.9778 106.894 li
31.7308 106.831 li
cp
31.4793 100.952 mo
34.0991 100.952 li
33.7742 100.659 33.5751 100.429 33.4808 100.261 cv
33.397 100.093 33.3446 99.9255 33.3446 99.7579 cv
33.3446 99.5483 33.4074 99.3806 33.5122 99.2339 cv
33.6275 99.0872 33.8057 98.9824 34.0467 98.9091 cv
34.2143 98.8567 34.5182 98.8357 34.9584 98.8357 cv
36.2263 98.8357 li
36.4464 98.8357 36.6036 98.8148 36.6874 98.7833 cv
36.7503 98.7519 36.8027 98.71 36.8341 98.6471 cv
36.876 98.5842 36.8865 98.4689 36.8865 98.3013 cv
37.0332 98.3013 li
37.0332 100.062 li
36.8865 100.062 li
36.8865 99.9779 li
36.8865 99.8103 36.8656 99.695 36.8132 99.6321 cv
36.7608 99.5693 36.6874 99.5169 36.5931 99.4959 cv
36.5512 99.4854 36.4254 99.4854 36.2263 99.4854 cv
34.9584 99.4854 li
34.5706 99.4854 34.3087 99.5064 34.1934 99.5378 cv
34.0676 99.5797 33.9733 99.6426 33.9104 99.7369 cv
33.8476 99.8207 33.8161 99.936 33.8161 100.051 cv
33.8161 100.188 33.8581 100.313 33.9209 100.46 cv
33.9943 100.596 34.1305 100.753 34.3296 100.952 cv
36.2263 100.952 li
36.4674 100.952 36.6245 100.942 36.6769 100.911 cv
36.7398 100.879 36.7922 100.827 36.8341 100.753 cv
36.876 100.68 36.8865 100.554 36.8865 100.376 cv
37.0332 100.376 li
37.0332 102.147 li
36.8865 102.147 li
36.8865 101.99 36.8656 101.864 36.8132 101.77 cv
36.7922 101.717 36.7398 101.676 36.6665 101.644 cv
36.5931 101.613 36.4464 101.602 36.2263 101.602 cv
32.9883 101.602 li
32.5796 101.602 32.3281 101.613 32.2338 101.634 cv
32.1395 101.644 32.0766 101.676 32.0452 101.717 cv
32.0032 101.759 31.9928 101.812 31.9928 101.885 cv
31.9928 101.938 32.0137 102.021 32.0556 102.147 cv
31.9194 102.2 li
31.4793 101.131 li
cp
34.8012 97.4001 mo
35.3356 97.4001 35.7548 97.2743 36.0482 97.0123 cv
36.3521 96.7504 36.5093 96.4465 36.5093 96.1007 cv
36.5093 95.8596 36.4359 95.6605 36.3102 95.4824 cv
36.1844 95.3147 35.9644 95.168 35.65 95.0527 cv
35.7233 94.927 li
36.0796 94.9794 36.4045 95.1366 36.6979 95.409 cv
36.9913 95.671 37.138 95.9959 37.138 96.3941 cv
37.138 96.8237 36.9704 97.1905 36.635 97.4944 cv
36.3102 97.7983 35.8596 97.9555 35.2937 97.9555 cv
34.6754 97.9555 34.2039 97.7983 33.8581 97.4839 cv
33.5122 97.1695 33.3446 96.7818 33.3446 96.2998 cv
33.3446 95.9016 33.4808 95.5767 33.7428 95.3147 cv
34.0048 95.0527 34.361 94.927 34.8012 94.927 cv
cp
34.5706 97.4001 mo
34.5706 95.7444 li
34.3506 95.7549 34.1829 95.7863 34.0886 95.8282 cv
33.9419 95.8911 33.8266 95.9854 33.7428 96.1216 cv
33.6589 96.2474 33.617 96.3836 33.617 96.5198 cv
33.617 96.7399 33.7113 96.9285 33.879 97.1067 cv
34.0467 97.2743 34.2772 97.3686 34.5706 97.4001 cv
cp
33.8057 92.7054 mo
33.3655 91.6051 li
33.3655 91.4584 li
34.2039 91.4584 li
33.8895 91.2698 33.6694 91.0916 33.5332 90.903 cv
33.4074 90.7144 33.3446 90.5153 33.3446 90.3162 cv
33.3446 89.9599 33.4913 89.656 33.7742 89.415 cv
34.1096 89.1216 34.5602 88.9749 35.1155 88.9749 cv
35.7338 88.9749 36.2368 89.153 36.6455 89.5093 cv
36.9808 89.8027 37.138 90.1695 37.138 90.6096 cv
37.138 90.7982 37.1171 90.9659 37.0542 91.1126 cv
37.0227 91.2069 36.9389 91.3327 36.8236 91.4584 cv
37.9135 91.4584 li
38.1545 91.4584 38.3117 91.4479 38.385 91.4165 cv
38.4479 91.3851 38.5003 91.3327 38.5422 91.2593 cv
38.5737 91.186 38.5946 91.0497 38.5946 90.8506 cv
38.7413 90.8506 li
38.7413 92.7264 li
38.5946 92.7264 li
38.5946 92.6321 li
38.6051 92.4854 38.5737 92.3701 38.5213 92.2653 cv
38.4898 92.2129 38.4374 92.171 38.3746 92.15 cv
38.3117 92.1186 38.1545 92.1081 37.8925 92.1081 cv
34.5078 92.1081 li
34.2772 92.1081 34.1305 92.1186 34.0676 92.1395 cv
34.0048 92.1605 33.9628 92.1919 33.9314 92.2339 cv
33.9 92.2863 33.879 92.3491 33.879 92.4225 cv
33.879 92.4854 33.9 92.5692 33.9314 92.6635 cv
cp
34.4344 91.4584 mo
35.7653 91.4584 li
36.0587 91.4584 36.2473 91.4479 36.3416 91.427 cv
36.4883 91.3851 36.6245 91.3012 36.7398 91.1545 cv
36.8551 91.0183 36.9075 90.8401 36.9075 90.6201 cv
36.9075 90.3581 36.8027 90.1485 36.6036 89.9913 cv
36.3416 89.7713 35.9644 89.6665 35.4823 89.6665 cv
34.9374 89.6665 34.5182 89.7922 34.2143 90.0332 cv
34.0152 90.2009 33.9104 90.3895 33.9104 90.6201 cv
33.9104 90.7458 33.9419 90.8716 34.0048 90.9973 cv
34.0572 91.0916 34.1934 91.2383 34.4344 91.4584 cv
cp
36.5197 86.4284 mo
36.8027 86.7952 36.9599 87.0257 37.0123 87.12 cv
37.0751 87.2563 37.1066 87.403 37.1066 87.5602 cv
37.1066 87.8117 37.0227 88.0213 36.8551 88.1784 cv
36.6874 88.3356 36.4569 88.4195 36.1844 88.4195 cv
36.0063 88.4195 35.8596 88.3775 35.7338 88.3042 cv
35.5557 88.1889 35.388 88.0108 35.2308 87.7383 cv
35.0736 87.4763 34.885 87.0362 34.6649 86.4284 cv
34.5182 86.4284 li
34.1619 86.4284 33.9209 86.4808 33.7847 86.5961 cv
33.6485 86.7114 33.5856 86.8686 33.5856 87.0886 cv
33.5856 87.2563 33.6275 87.382 33.7218 87.4763 cv
33.8057 87.5811 33.9104 87.623 34.0257 87.623 cv
34.2458 87.623 li
34.3715 87.623 34.4658 87.6545 34.5287 87.7069 cv
34.5916 87.7698 34.623 87.8536 34.623 87.9479 cv
34.623 88.0527 34.5916 88.126 34.5287 88.1889 cv
34.4554 88.2518 34.361 88.2832 34.2458 88.2832 cv
34.0257 88.2832 33.8161 88.168 33.6275 87.9374 cv
33.4389 87.7069 33.3446 87.382 33.3446 86.9733 cv
33.3446 86.6485 33.397 86.397 33.5122 86.1874 cv
33.5856 86.0407 33.7113 85.9254 33.8895 85.8521 cv
34.0048 85.7997 34.2248 85.7787 34.5706 85.7787 cv
35.7862 85.7787 li
36.132 85.7787 36.3416 85.7682 36.415 85.7578 cv
36.4988 85.7473 36.5407 85.7263 36.5721 85.6949 cv
36.5931 85.6635 36.6141 85.632 36.6141 85.5901 cv
36.6141 85.5482 36.6036 85.5167 36.5826 85.4853 cv
36.5512 85.4329 36.4569 85.3281 36.2997 85.1709 cv
36.5197 85.1709 li
36.9075 85.4539 37.1066 85.7368 37.1066 85.9988 cv
37.1066 86.135 37.0542 86.2293 36.9704 86.3027 cv
36.876 86.3865 36.7293 86.4179 36.5197 86.4284 cv
cp
36.2578 86.4284 mo
34.8955 86.4284 li
35.0527 86.8162 35.1679 87.0676 35.2308 87.1829 cv
35.3461 87.3925 35.4614 87.5392 35.5871 87.623 cv
35.7129 87.7174 35.8491 87.7593 35.9958 87.7593 cv
36.1844 87.7593 36.3416 87.7069 36.4674 87.5916 cv
36.5931 87.4763 36.656 87.3506 36.656 87.2039 cv
36.656 87.0048 36.5197 86.7428 36.2578 86.4284 cv
cp
32.2757 83.861 mo
33.4494 83.861 li
33.4494 83.0227 li
33.7323 83.0227 li
33.7323 83.861 li
36.0482 83.861 li
36.2787 83.861 36.4359 83.8296 36.5197 83.7667 cv
36.5931 83.6934 36.635 83.6095 36.635 83.5048 cv
36.635 83.4209 36.6141 83.3371 36.5617 83.2533 cv
36.5093 83.1799 36.4254 83.117 36.3206 83.0646 cv
36.3206 82.9179 li
36.5721 83.0122 36.7712 83.138 36.897 83.3056 cv
37.0227 83.4733 37.0856 83.641 37.0856 83.8191 cv
37.0856 83.9344 37.0542 84.0601 36.9913 84.1754 cv
36.9284 84.2802 36.8341 84.3745 36.7084 84.4269 cv
36.5826 84.4793 36.394 84.5107 36.132 84.5107 cv
33.7323 84.5107 li
33.7323 85.0766 li
33.5961 85.0766 li
33.5437 84.9299 33.4494 84.7832 33.3027 84.6365 cv
33.1664 84.4793 33.0092 84.3536 32.8206 84.2383 cv
32.7263 84.1754 32.5377 84.0916 32.2757 83.9868 cv
cp
31.4793 81.629 mo
34.0991 81.629 li
33.7742 81.3356 33.5751 81.105 33.4808 80.9374 cv
33.397 80.7697 33.3446 80.602 33.3446 80.4344 cv
33.3446 80.2248 33.4074 80.0571 33.5122 79.9104 cv
33.6275 79.7637 33.8057 79.6589 34.0467 79.5856 cv
34.2143 79.5332 34.5182 79.5122 34.9584 79.5122 cv
36.2263 79.5122 li
36.4464 79.5122 36.6036 79.4912 36.6874 79.4598 cv
36.7503 79.4284 36.8027 79.3865 36.8341 79.3236 cv
36.876 79.2607 36.8865 79.1454 36.8865 78.9778 cv
37.0332 78.9778 li
37.0332 80.7383 li
36.8865 80.7383 li
36.8865 80.6544 li
36.8865 80.4868 36.8656 80.3715 36.8132 80.3086 cv
36.7608 80.2457 36.6874 80.1933 36.5931 80.1724 cv
36.5512 80.1619 36.4254 80.1619 36.2263 80.1619 cv
34.9584 80.1619 li
34.5706 80.1619 34.3087 80.1829 34.1934 80.2248 cv
34.0676 80.2562 33.9733 80.3296 33.9104 80.4134 cv
33.8476 80.4972 33.8161 80.6125 33.8161 80.7383 cv
33.8161 80.864 33.8581 80.9898 33.9209 81.1365 cv
33.9943 81.2727 34.1305 81.4404 34.3296 81.629 cv
36.2263 81.629 li
36.4674 81.629 36.6245 81.6185 36.6769 81.5871 cv
36.7398 81.5556 36.7922 81.5137 36.8341 81.4299 cv
36.876 81.3565 36.8865 81.2308 36.8865 81.0526 cv
37.0332 81.0526 li
37.0332 82.8236 li
36.8865 82.8236 li
36.8865 82.6664 36.8656 82.5407 36.8132 82.4464 cv
36.7922 82.394 36.7398 82.352 36.6665 82.3206 cv
36.5931 82.2892 36.4464 82.2787 36.2263 82.2787 cv
32.9883 82.2787 li
32.5796 82.2787 32.3281 82.2892 32.2338 82.3101 cv
32.1395 82.3206 32.0766 82.352 32.0452 82.394 cv
32.0032 82.4359 31.9928 82.4883 31.9928 82.5616 cv
31.9928 82.614 32.0137 82.6979 32.0556 82.8236 cv
31.9194 82.876 li
31.4793 81.8071 li
cp
33.4494 76.8819 mo
33.4494 75.3834 li
33.5961 75.3834 li
33.6066 75.5197 33.638 75.6035 33.6694 75.6454 cv
33.7113 75.6978 33.7637 75.7188 33.8371 75.7188 cv
33.9209 75.7188 34.0152 75.6873 34.1305 75.6454 cv
36.1949 74.8804 li
34.5182 74.1155 li
33.9943 74.3146 li
33.8371 74.3774 33.7218 74.4613 33.6694 74.5661 cv
33.6275 74.6185 33.6066 74.7233 33.5961 74.8804 cv
33.4494 74.8804 li
33.4494 73.1828 li
33.5961 73.1828 li
33.6066 73.3714 33.638 73.4972 33.7009 73.581 cv
33.7428 73.6334 33.8057 73.6544 33.9 73.6544 cv
33.9524 73.6544 34.0048 73.6439 34.0572 73.6229 cv
36.1111 72.816 li
34.1305 72.0615 li
33.9943 72.0092 33.879 71.9777 33.7952 71.9777 cv
33.7533 71.9777 33.7009 72.0092 33.6694 72.0615 cv
33.6275 72.1035 33.6066 72.2083 33.5961 72.355 cv
33.4494 72.355 li
33.4494 71.2232 li
33.5961 71.2232 li
33.6275 71.4538 33.7847 71.6214 34.0572 71.7262 cv
37.138 72.9208 li
37.138 73.078 li
34.8536 73.9792 li
37.138 75.0167 li
37.138 75.1634 li
34.1305 76.3161 li
33.9419 76.3894 33.8161 76.4628 33.7533 76.5361 cv
33.6799 76.6095 33.6275 76.7248 33.5961 76.8819 cv
cp
31.4793 69.9972 mo
31.4793 69.8819 31.5212 69.7876 31.5946 69.7142 cv
31.6679 69.6409 31.7622 69.599 31.867 69.599 cv
31.9823 69.599 32.0766 69.6409 32.15 69.7142 cv
32.2338 69.7876 32.2757 69.8819 32.2652 69.9972 cv
32.2757 70.102 32.2338 70.1963 32.15 70.2696 cv
32.0766 70.3535 31.9823 70.3954 31.867 70.3954 cv
31.7622 70.3954 31.6679 70.3535 31.5946 70.2801 cv
31.5212 70.1963 31.4793 70.102 31.4793 69.9972 cv
cp
33.3446 69.6723 mo
36.2263 69.6723 li
36.4464 69.6723 36.5931 69.6514 36.6665 69.6199 cv
36.7398 69.5885 36.8027 69.5361 36.8341 69.4732 cv
36.876 69.4103 36.8865 69.2951 36.8865 69.1274 cv
37.0332 69.1274 li
37.0332 70.8669 li
36.8865 70.8669 li
36.8865 70.6888 36.876 70.5735 36.8446 70.5106 cv
36.8027 70.4478 36.7503 70.4058 36.6769 70.3639 cv
36.5931 70.3325 36.4464 70.3115 36.2263 70.3115 cv
34.8431 70.3115 li
34.4554 70.3115 34.2039 70.3325 34.0886 70.3535 cv
34.0048 70.3744 33.9524 70.3954 33.9209 70.4373 cv
33.8895 70.4792 33.8685 70.5316 33.8685 70.5945 cv
33.8685 70.6678 33.8895 70.7621 33.9314 70.8669 cv
33.7847 70.9193 li
33.3446 69.84 li
cp
32.2757 67.6394 mo
33.4494 67.6394 li
33.4494 66.801 li
33.7323 66.801 li
33.7323 67.6394 li
36.0482 67.6394 li
36.2787 67.6394 36.4359 67.6079 36.5197 67.545 cv
36.5931 67.4717 36.635 67.3879 36.635 67.2831 cv
36.635 67.1992 36.6141 67.1154 36.5617 67.0316 cv
36.5093 66.9582 36.4254 66.8953 36.3206 66.8429 cv
36.3206 66.6962 li
36.5721 66.7906 36.7712 66.9163 36.897 67.084 cv
37.0227 67.2516 37.0856 67.4193 37.0856 67.5974 cv
37.0856 67.7127 37.0542 67.8385 36.9913 67.9537 cv
36.9284 68.069 36.8341 68.1528 36.7084 68.2052 cv
36.5826 68.2576 36.394 68.2891 36.132 68.2891 cv
33.7323 68.2891 li
33.7323 68.8549 li
33.5961 68.8549 li
33.5437 68.7082 33.4494 68.5615 33.3027 68.4148 cv
33.1664 68.2576 33.0092 68.1319 32.8206 68.0166 cv
32.7263 67.9537 32.5377 67.8699 32.2757 67.7651 cv
cp
31.4793 65.4073 mo
34.0991 65.4073 li
33.7742 65.1139 33.5751 64.8833 33.4808 64.7157 cv
33.397 64.548 33.3446 64.3803 33.3446 64.2127 cv
33.3446 64.0136 33.4074 63.8354 33.5122 63.6887 cv
33.6275 63.542 33.8057 63.4372 34.0467 63.3639 cv
34.2143 63.3115 34.5182 63.2905 34.9584 63.2905 cv
36.2263 63.2905 li
36.4464 63.2905 36.6036 63.2696 36.6874 63.2381 cv
36.7503 63.2067 36.8027 63.1648 36.8341 63.1019 cv
36.876 63.039 36.8865 62.9238 36.8865 62.7561 cv
37.0332 62.7561 li
37.0332 64.5166 li
36.8865 64.5166 li
36.8865 64.4327 li
36.8865 64.2651 36.8656 64.1498 36.8132 64.0869 cv
36.7608 64.0241 36.6874 63.9717 36.5931 63.9507 cv
36.5512 63.9402 36.4254 63.9402 36.2263 63.9402 cv
34.9584 63.9402 li
34.5706 63.9402 34.3087 63.9612 34.1934 64.0031 cv
34.0676 64.0345 33.9733 64.1079 33.9104 64.1917 cv
33.8476 64.2756 33.8161 64.3908 33.8161 64.5166 cv
33.8161 64.6423 33.8581 64.7681 33.9209 64.9148 cv
33.9943 65.051 34.1305 65.2187 34.3296 65.4073 cv
36.2263 65.4073 li
36.4674 65.4073 36.6245 65.3968 36.6769 65.3654 cv
36.7398 65.3339 36.7922 65.292 36.8341 65.2082 cv
36.876 65.1348 36.8865 65.0091 36.8865 64.831 cv
37.0332 64.831 li
37.0332 66.6019 li
36.8865 66.6019 li
36.8865 66.4447 36.8656 66.319 36.8132 66.2247 cv
36.7922 66.1723 36.7398 66.1304 36.6665 66.0989 cv
36.5931 66.0675 36.4464 66.057 36.2263 66.057 cv
32.9883 66.057 li
32.5796 66.057 32.3281 66.0675 32.2338 66.0884 cv
32.1395 66.0989 32.0766 66.1304 32.0452 66.1723 cv
32.0032 66.2142 31.9928 66.2666 31.9928 66.34 cv
31.9928 66.3923 32.0137 66.4762 32.0556 66.6019 cv
31.9194 66.6543 li
31.4793 65.5854 li
cp
31.4793 59.2246 mo
36.2263 59.2246 li
36.4464 59.2246 36.5931 59.2141 36.6665 59.1827 cv
36.7398 59.1408 36.7922 59.0989 36.8341 59.0255 cv
36.876 58.9626 36.8865 58.8369 36.8865 58.6483 cv
37.0332 58.6483 li
37.0332 60.3983 li
36.8865 60.3983 li
36.8865 60.2411 36.876 60.1258 36.8446 60.063 cv
36.8027 60.0106 36.7503 59.9582 36.6769 59.9267 cv
36.5931 59.8953 36.4464 59.8743 36.2263 59.8743 cv
32.9778 59.8743 li
32.5691 59.8743 32.3176 59.8848 32.2338 59.9058 cv
32.1395 59.9162 32.0766 59.9477 32.0452 59.9896 cv
32.0032 60.0315 31.9928 60.0839 31.9928 60.1468 cv
31.9928 60.2097 32.0137 60.304 32.0556 60.3983 cv
31.9194 60.4716 li
31.4793 59.4028 li
cp
33.3446 56.4896 mo
33.3446 55.9446 33.5542 55.5045 33.9628 55.1797 cv
34.3191 54.9072 34.7173 54.7605 35.1784 54.7605 cv
35.4928 54.7605 35.8176 54.8443 36.153 54.9911 cv
36.4778 55.1482 36.7293 55.3578 36.8865 55.6303 cv
37.0542 55.9027 37.138 56.1962 37.138 56.5315 cv
37.138 57.0659 36.9284 57.4956 36.4988 57.8099 cv
36.132 58.0824 35.7338 58.2186 35.2832 58.2186 cv
34.9479 58.2186 34.623 58.1348 34.2982 57.9671 cv
33.9733 57.8099 33.7323 57.5899 33.5856 57.3279 cv
33.4284 57.0659 33.3446 56.783 33.3446 56.4896 cv
cp
33.6066 56.6048 mo
33.6066 56.7411 33.6485 56.8878 33.7218 57.024 cv
33.8057 57.1602 33.9524 57.2755 34.1619 57.3593 cv
34.361 57.4432 34.623 57.4851 34.9479 57.4851 cv
35.4718 57.4851 35.9224 57.3908 36.2997 57.1812 cv
36.6769 56.9716 36.8656 56.6992 36.8656 56.3638 cv
36.8656 56.1123 36.7608 55.9027 36.5512 55.7351 cv
36.3416 55.5674 35.9853 55.494 35.4823 55.494 cv
34.8431 55.494 34.3401 55.6303 33.9733 55.9027 cv
33.7323 56.0809 33.6066 56.3219 33.6066 56.6048 cv
cp
33.3446 52.4865 mo
33.3446 51.9416 33.5542 51.512 33.9628 51.1767 cv
34.3191 50.9042 34.7173 50.768 35.1784 50.768 cv
35.4928 50.768 35.8176 50.8413 36.153 50.9985 cv
36.4778 51.1452 36.7293 51.3548 36.8865 51.6273 cv
37.0542 51.8997 37.138 52.1931 37.138 52.5285 cv
37.138 53.0629 36.9284 53.4925 36.4988 53.8174 cv
36.132 54.0794 35.7338 54.2156 35.2832 54.2156 cv
34.9479 54.2156 34.623 54.1318 34.2982 53.9746 cv
33.9733 53.8069 33.7323 53.5973 33.5856 53.3249 cv
33.4284 53.0629 33.3446 52.78 33.3446 52.4865 cv
cp
33.6066 52.6018 mo
33.6066 52.7485 33.6485 52.8848 33.7218 53.021 cv
33.8057 53.1572 33.9524 53.2725 34.1619 53.3563 cv
34.361 53.4506 34.623 53.4925 34.9479 53.4925 cv
35.4718 53.4925 35.9224 53.3877 36.2997 53.1782 cv
36.6769 52.9686 36.8656 52.6961 36.8656 52.3608 cv
36.8656 52.1093 36.7608 51.8997 36.5512 51.732 cv
36.3416 51.5749 35.9853 51.491 35.4823 51.491 cv
34.8431 51.491 34.3401 51.6273 33.9733 51.8997 cv
33.7323 52.0883 33.6066 52.3189 33.6066 52.6018 cv
cp
33.8057 50.4955 mo
33.3655 49.3952 li
33.3655 49.2485 li
34.2039 49.2485 li
33.8895 49.0599 33.6694 48.8712 33.5332 48.6826 cv
33.4074 48.5045 33.3446 48.3054 33.3446 48.0958 cv
33.3446 47.7395 33.4913 47.4356 33.7742 47.2051 cv
34.1096 46.9117 34.5602 46.7545 35.1155 46.7545 cv
35.7338 46.7545 36.2368 46.9326 36.6455 47.2889 cv
36.9808 47.5823 37.138 47.9491 37.138 48.3892 cv
37.138 48.5883 37.1171 48.756 37.0542 48.8922 cv
37.0227 48.997 36.9389 49.1123 36.8236 49.2485 cv
37.9135 49.2485 li
38.1545 49.2485 38.3117 49.2275 38.385 49.1961 cv
38.4479 49.1647 38.5003 49.1123 38.5422 49.0389 cv
38.5737 48.9656 38.5946 48.8293 38.5946 48.6407 cv
38.7413 48.6407 li
38.7413 50.5165 li
38.5946 50.5165 li
38.5946 50.4117 li
38.6051 50.2754 38.5737 50.1497 38.5213 50.0449 cv
38.4898 50.003 38.4374 49.9611 38.3746 49.9296 cv
38.3117 49.9087 38.1545 49.8877 37.8925 49.8877 cv
34.5078 49.8877 li
34.2772 49.8877 34.1305 49.8982 34.0676 49.9192 cv
34.0048 49.9401 33.9628 49.982 33.9314 50.0239 cv
33.9 50.0659 33.879 50.1287 33.879 50.2126 cv
33.879 50.2754 33.9 50.3488 33.9314 50.4431 cv
cp
34.4344 49.2485 mo
35.7653 49.2485 li
36.0587 49.2485 36.2473 49.2275 36.3416 49.2066 cv
36.4883 49.1751 36.6245 49.0808 36.7398 48.9446 cv
36.8551 48.7979 36.9075 48.6197 36.9075 48.3997 cv
36.9075 48.1482 36.8027 47.9281 36.6036 47.7709 cv
36.3416 47.5613 35.9644 47.4566 35.4823 47.4566 cv
34.9374 47.4566 34.5182 47.5718 34.2143 47.8129 cv
34.0152 47.9805 33.9104 48.1796 33.9104 48.4102 cv
33.9104 48.5359 33.9419 48.6512 34.0048 48.7769 cv
34.0572 48.8712 34.1934 49.0284 34.4344 49.2485 cv
cp
34.0676 43.2544 mo
33.5856 42.9086 33.3446 42.5314 33.3446 42.1332 cv
33.3446 41.7664 33.5018 41.452 33.8161 41.1691 cv
34.1305 40.8966 34.5602 40.7604 35.1051 40.7604 cv
35.7443 40.7604 36.2578 40.97 36.6455 41.3996 cv
36.9704 41.7559 37.138 42.1646 37.138 42.6047 cv
37.138 42.8143 37.1066 43.0239 37.0332 43.244 cv
36.9494 43.4535 36.8446 43.6736 36.6874 43.9041 cv
32.9778 43.9041 li
32.5796 43.9041 32.3281 43.9146 32.2338 43.9251 cv
32.1395 43.9461 32.0766 43.9775 32.0452 44.0194 cv
32.0032 44.0613 31.9928 44.1137 31.9928 44.1766 cv
31.9928 44.2499 32.0137 44.3443 32.0556 44.4491 cv
31.9194 44.5014 li
31.4793 43.4326 li
31.4793 43.2544 li
cp
34.3191 43.2544 mo
36.4569 43.2544 li
36.5931 43.1182 36.6874 42.982 36.7608 42.8457 cv
36.8236 42.699 36.8551 42.5523 36.8551 42.4056 cv
36.8551 42.1751 36.7293 41.955 36.4674 41.7454 cv
36.2054 41.5463 35.8281 41.4415 35.3251 41.4415 cv
34.8745 41.4415 34.5182 41.5463 34.2772 41.7454 cv
34.0257 41.955 33.9 42.1856 33.9 42.4475 cv
33.9 42.5838 33.9419 42.72 34.0048 42.8562 cv
34.0572 42.961 34.1619 43.0972 34.3191 43.2544 cv
f
72.9766 115.068 mo
72.4946 114.722 72.2536 114.345 72.2536 113.947 cv
72.2536 113.58 72.4108 113.255 72.7251 112.983 cv
73.0395 112.71 73.4692 112.574 74.0141 112.574 cv
74.6428 112.574 75.1563 112.783 75.544 113.213 cv
75.8794 113.569 76.047 113.978 76.047 114.418 cv
76.047 114.628 76.0051 114.837 75.9317 115.057 cv
75.8584 115.267 75.7431 115.487 75.5859 115.718 cv
71.8868 115.718 li
71.4781 115.718 71.2266 115.718 71.1323 115.739 cv
71.038 115.759 70.9751 115.791 70.9437 115.833 cv
70.9122 115.875 70.8913 115.927 70.8913 115.99 cv
70.8913 116.063 70.9122 116.158 70.9542 116.262 cv
70.8179 116.315 li
70.3778 115.246 li
70.3778 115.068 li
cp
73.2281 115.068 mo
75.3659 115.068 li
75.4916 114.932 75.5964 114.795 75.6593 114.659 cv
75.7222 114.512 75.7641 114.366 75.7641 114.219 cv
75.7641 113.989 75.6279 113.758 75.3659 113.559 cv
75.1039 113.349 74.7266 113.255 74.2341 113.255 cv
73.773 113.255 73.4168 113.349 73.1757 113.559 cv
72.9242 113.758 72.809 113.999 72.809 114.25 cv
72.809 114.397 72.8404 114.533 72.9138 114.67 cv
72.9662 114.774 73.0709 114.911 73.2281 115.068 cv
f
70.5455 112.123 mo
70.3778 112.123 li
70.5769 111.725 70.8074 111.39 71.0694 111.128 cv
71.4572 110.761 71.8973 110.468 72.4108 110.268 cv
72.9242 110.069 73.4587 109.965 74.0141 109.965 cv
74.821 109.965 75.5545 110.164 76.2147 110.562 cv
76.8853 110.96 77.3569 111.474 77.6503 112.123 cv
77.5036 112.123 li
77.3255 111.798 77.074 111.536 76.7701 111.327 cv
76.4662 111.117 76.0784 110.971 75.6069 110.866 cv
75.1353 110.771 74.6428 110.719 74.1293 110.719 cv
73.5739 110.719 73.0605 110.761 72.6099 110.845 cv
72.2431 110.908 71.9602 110.992 71.7401 111.086 cv
71.5305 111.191 71.3209 111.316 71.1218 111.474 cv
70.9227 111.641 70.7236 111.851 70.5455 112.123 cv
f
70.6398 103.006 mo
71.8763 102.944 li
71.8763 103.101 li
71.6667 103.122 71.5096 103.164 71.4152 103.216 cv
71.258 103.289 71.1533 103.405 71.0799 103.53 cv
71.0066 103.667 70.9751 103.845 70.9751 104.065 cv
70.9751 104.809 li
75.0201 104.809 li
75.3449 104.809 75.544 104.777 75.6278 104.704 cv
75.7326 104.61 75.7955 104.453 75.785 104.253 cv
75.785 104.065 li
75.9317 104.065 li
75.9317 106.307 li
75.785 106.307 li
75.785 106.119 li
75.7955 105.899 75.7222 105.741 75.5859 105.647 cv
75.5021 105.584 75.3135 105.563 75.0201 105.563 cv
70.9751 105.563 li
70.9751 106.203 li
70.9751 106.444 70.9856 106.622 71.0275 106.726 cv
71.0799 106.863 71.1742 106.978 71.3104 107.072 cv
71.4467 107.167 71.6458 107.229 71.8763 107.24 cv
71.8763 107.397 li
70.6398 107.334 li
cp
70.3778 101.445 mo
72.9976 101.445 li
72.6832 101.162 72.4736 100.932 72.3898 100.764 cv
72.2955 100.586 72.2536 100.418 72.2536 100.25 cv
72.2536 100.051 72.306 99.8731 72.4212 99.7264 cv
72.5365 99.5797 72.7042 99.4749 72.9452 99.4016 cv
73.1129 99.3597 73.4167 99.3282 73.8569 99.3282 cv
75.1248 99.3282 li
75.3554 99.3282 75.5126 99.3073 75.5859 99.2758 cv
75.6488 99.2549 75.7012 99.2025 75.7431 99.1396 cv
75.7746 99.0767 75.7955 98.9614 75.7955 98.8043 cv
75.9317 98.8043 li
75.9317 100.554 li
75.7955 100.554 li
75.7955 100.47 li
75.7955 100.313 75.7641 100.188 75.7222 100.125 cv
75.6698 100.062 75.5964 100.02 75.4916 99.9884 cv
75.4497 99.9779 75.3344 99.9779 75.1248 99.9779 cv
73.8569 99.9779 li
73.4691 99.9779 73.2176 99.9989 73.0919 100.041 cv
72.9661 100.083 72.8823 100.146 72.8194 100.229 cv
72.7566 100.324 72.7251 100.429 72.7251 100.554 cv
72.7251 100.68 72.7566 100.816 72.8299 100.952 cv
72.8928 101.089 73.029 101.256 73.2386 101.445 cv
75.1248 101.445 li
75.3764 101.445 75.5231 101.435 75.5859 101.403 cv
75.6383 101.382 75.6907 101.33 75.7326 101.256 cv
75.7746 101.183 75.7955 101.047 75.7955 100.869 cv
75.9317 100.869 li
75.9317 102.64 li
75.7955 102.64 li
75.7955 102.482 75.7746 102.357 75.7222 102.273 cv
75.6907 102.22 75.6488 102.179 75.5754 102.147 cv
75.5021 102.116 75.3554 102.095 75.1248 102.095 cv
71.8868 102.095 li
71.4781 102.095 71.2266 102.105 71.1323 102.126 cv
71.038 102.147 70.9751 102.179 70.9437 102.22 cv
70.9122 102.252 70.8913 102.304 70.8913 102.378 cv
70.8913 102.43 70.9122 102.524 70.9542 102.64 cv
70.8179 102.702 li
70.3778 101.623 li
cp
73.6997 97.8926 mo
74.2341 97.9031 74.6533 97.7668 74.9572 97.5153 cv
75.2611 97.2534 75.4078 96.939 75.4078 96.5932 cv
75.4078 96.3626 75.3449 96.153 75.2192 95.9854 cv
75.0829 95.8072 74.8629 95.6605 74.5485 95.5453 cv
74.6323 95.4195 li
74.9886 95.4824 75.3135 95.6396 75.6069 95.9015 cv
75.9003 96.1635 76.047 96.4884 76.047 96.8866 cv
76.047 97.3162 75.8793 97.683 75.544 97.9974 cv
75.2087 98.3013 74.7581 98.448 74.1922 98.448 cv
73.5844 98.448 73.1024 98.2908 72.7566 97.9764 cv
72.4212 97.662 72.2431 97.2743 72.2431 96.8027 cv
72.2431 96.3941 72.3793 96.0692 72.6413 95.8072 cv
72.9137 95.5557 73.2596 95.4195 73.6997 95.4195 cv
cp
73.4796 97.8926 mo
73.4796 96.2369 li
73.2491 96.2578 73.0919 96.2788 72.9976 96.3207 cv
72.8509 96.3836 72.7356 96.4884 72.6518 96.6141 cv
72.5679 96.7399 72.526 96.8761 72.526 97.0228 cv
72.526 97.2324 72.6099 97.4315 72.7775 97.5992 cv
72.9452 97.7668 73.1757 97.8716 73.4796 97.8926 cv
cp
70.3778 91.7204 mo
75.1248 91.7204 li
75.3554 91.7204 75.5021 91.6994 75.5754 91.668 cv
75.6488 91.6365 75.7012 91.5841 75.7326 91.5213 cv
75.7746 91.4479 75.7955 91.3222 75.7955 91.144 cv
75.9317 91.144 li
75.9317 92.894 li
75.7955 92.894 li
75.7955 92.7264 75.7746 92.6216 75.7431 92.5587 cv
75.7117 92.4958 75.6488 92.4539 75.5754 92.412 cv
75.5021 92.3806 75.3449 92.3701 75.1248 92.3701 cv
71.8763 92.3701 li
71.4781 92.3701 71.2266 92.3701 71.1323 92.391 cv
71.038 92.412 70.9751 92.4434 70.9437 92.4854 cv
70.9122 92.5168 70.8913 92.5692 70.8913 92.6321 cv
70.8913 92.7054 70.9122 92.7892 70.9542 92.894 cv
70.8179 92.9569 li
70.3778 91.8985 li
cp
72.2536 88.9748 mo
72.2536 88.4299 72.4527 88.0003 72.8718 87.6754 cv
73.2176 87.3925 73.6263 87.2563 74.0769 87.2563 cv
74.4018 87.2563 74.7266 87.3296 75.0515 87.4868 cv
75.3764 87.6335 75.6278 87.8536 75.7955 88.1156 cv
75.9632 88.388 76.047 88.6919 76.047 89.0168 cv
76.047 89.5617 75.827 89.9913 75.3973 90.3057 cv
75.041 90.5677 74.6323 90.7039 74.1817 90.7039 cv
73.8569 90.7039 73.532 90.6201 73.2072 90.4629 cv
72.8823 90.2952 72.6413 90.0856 72.4841 89.8237 cv
72.3269 89.5512 72.2536 89.2683 72.2536 88.9748 cv
cp
72.5051 89.1006 mo
72.5051 89.2368 72.547 89.3731 72.6308 89.5093 cv
72.7146 89.656 72.8509 89.7608 73.0605 89.8551 cv
73.27 89.9389 73.532 89.9808 73.8569 89.9808 cv
74.3704 89.9808 74.821 89.876 75.1982 89.6665 cv
75.5754 89.4674 75.7641 89.1844 75.7641 88.8491 cv
75.7641 88.5976 75.6593 88.388 75.4497 88.2308 cv
75.2506 88.0632 74.8838 87.9793 74.3808 87.9793 cv
73.7416 87.9793 73.2491 88.1156 72.8823 88.388 cv
72.6308 88.5766 72.5051 88.8072 72.5051 89.1006 cv
cp
73.0081 85.6844 mo
72.5051 85.2652 72.2536 84.867 72.2536 84.4793 cv
72.2536 84.2907 72.2955 84.123 72.4003 83.9763 cv
72.4946 83.8401 72.6518 83.7248 72.8823 83.641 cv
73.0395 83.5886 73.2805 83.5571 73.5949 83.5571 cv
75.1248 83.5571 li
75.3554 83.5571 75.5021 83.5362 75.5859 83.5047 cv
75.6488 83.4733 75.7012 83.4314 75.7431 83.3685 cv
75.7746 83.3056 75.7955 83.1799 75.7955 83.0122 cv
75.9317 83.0122 li
75.9317 84.7832 li
75.7955 84.7832 li
75.7955 84.7098 li
75.7955 84.5422 75.7641 84.4269 75.7222 84.3535 cv
75.6698 84.2907 75.5964 84.2488 75.4916 84.2173 cv
75.4497 84.2068 75.3344 84.2068 75.1248 84.2068 cv
73.6578 84.2068 li
73.3329 84.2068 73.1024 84.2488 72.9557 84.3326 cv
72.809 84.4164 72.7356 84.5527 72.7356 84.7622 cv
72.7356 85.0661 72.9033 85.3805 73.2386 85.6844 cv
75.1248 85.6844 li
75.3659 85.6844 75.5231 85.6739 75.5754 85.6425 cv
75.6488 85.6006 75.7117 85.5586 75.7431 85.4853 cv
75.7746 85.4224 75.7955 85.2967 75.7955 85.0976 cv
75.9317 85.0976 li
75.9317 86.8685 li
75.7955 86.8685 li
75.7955 86.7952 li
75.7955 86.6066 75.7431 86.4913 75.6593 86.4284 cv
75.565 86.3551 75.3868 86.3236 75.1248 86.3236 cv
73.794 86.3236 li
73.3644 86.3236 73.1024 86.3341 73.0081 86.3551 cv
72.9242 86.376 72.8509 86.4075 72.8194 86.4494 cv
72.788 86.4913 72.767 86.5437 72.767 86.6066 cv
72.767 86.6799 72.788 86.7742 72.8299 86.8685 cv
72.6937 86.9314 li
72.2536 85.8521 li
72.2536 85.6844 li
cp
74.6323 81.7652 mo
74.5275 81.9853 74.3704 82.1529 74.1817 82.2682 cv
73.9931 82.394 73.7835 82.4464 73.553 82.4464 cv
73.1967 82.4464 72.8928 82.3206 72.6308 82.0481 cv
72.3793 81.7862 72.2536 81.4404 72.2536 81.0212 cv
72.2536 80.6859 72.3374 80.382 72.5051 80.1409 cv
72.5051 79.376 li
72.5051 79.2712 72.5051 79.1978 72.5155 79.1873 cv
72.5155 79.1664 72.526 79.1559 72.547 79.1454 cv
72.5679 79.1245 72.6099 79.1245 72.6727 79.1245 cv
72.7356 79.1245 72.788 79.1245 72.809 79.1454 cv
72.8194 79.1454 72.8299 79.1664 72.8404 79.1769 cv
72.8509 79.1978 72.8509 79.2712 72.8509 79.376 cv
72.8509 79.8475 li
73.0395 79.7008 73.2805 79.6275 73.5739 79.6275 cv
73.9093 79.6275 74.1922 79.7532 74.4227 80.0047 cv
74.6638 80.2667 74.779 80.602 74.779 81.0317 cv
74.779 81.2098 74.7581 81.388 74.7057 81.5766 cv
74.8 81.6918 74.8943 81.7652 74.9677 81.8071 cv
75.041 81.849 75.1039 81.87 75.1563 81.87 cv
75.1982 81.87 75.2401 81.849 75.282 81.8071 cv
75.324 81.7652 75.3554 81.6814 75.3764 81.5556 cv
75.3868 81.4823 75.3868 81.3041 75.3973 81.0107 cv
75.4078 80.4763 75.4287 80.12 75.4497 79.9628 cv
75.4916 79.7218 75.5754 79.5331 75.7222 79.3864 cv
75.8689 79.2397 76.047 79.1664 76.2671 79.1664 cv
76.5605 79.1664 76.8329 79.3026 77.0949 79.5855 cv
77.4722 79.9837 77.6608 80.5182 77.6608 81.1679 cv
77.6608 81.6709 77.5455 82.1005 77.3255 82.4464 cv
77.1892 82.6455 77.053 82.7398 76.9168 82.7398 cv
76.8539 82.7398 76.791 82.7188 76.7282 82.6978 cv
76.6338 82.6455 76.4976 82.5616 76.3299 82.4254 cv
76.2985 82.4044 76.1623 82.2682 75.9003 82.0272 cv
75.827 82.1634 75.7536 82.2577 75.6907 82.3101 cv
75.6278 82.3625 75.5545 82.394 75.4707 82.394 cv
75.3764 82.394 75.2716 82.352 75.1458 82.2787 cv
75.0305 82.2053 74.8524 82.0377 74.6323 81.7652 cv
cp
72.4422 81.0945 mo
72.4422 81.2832 72.5155 81.4404 72.6727 81.5766 cv
72.8194 81.7023 73.0605 81.7652 73.3748 81.7652 cv
73.7835 81.7652 74.1084 81.6814 74.3284 81.5032 cv
74.5066 81.367 74.5904 81.1993 74.5904 80.9898 cv
74.5904 80.7906 74.5171 80.623 74.3704 80.4972 cv
74.2236 80.3715 73.9826 80.3086 73.6683 80.3086 cv
73.2596 80.3086 72.9347 80.4029 72.6937 80.5811 cv
72.526 80.7068 72.4422 80.885 72.4422 81.0945 cv
cp
75.9317 81.8071 mo
76.068 81.9329 76.1937 82.0272 76.309 82.0901 cv
76.4243 82.1529 76.5291 82.1844 76.6234 82.1844 cv
76.7491 82.1844 76.8539 82.1005 76.9482 81.9538 cv
77.1159 81.6918 77.1892 81.3146 77.1892 80.8221 cv
77.1892 80.3505 77.1054 80.0047 76.9482 79.7847 cv
76.7805 79.5646 76.6024 79.4493 76.4138 79.4493 cv
76.2775 79.4493 76.1832 79.5227 76.1308 79.6484 cv
76.068 79.7847 76.0365 80.0571 76.0261 80.4553 cv
76.0051 81.0421 75.9841 81.4927 75.9317 81.8071 cv
cp
73.6997 78.1289 mo
74.2341 78.1289 74.6533 78.0032 74.9572 77.7412 cv
75.2611 77.4792 75.4078 77.1753 75.4078 76.8191 cv
75.4078 76.5885 75.3449 76.3789 75.2192 76.2113 cv
75.0829 76.0331 74.8629 75.8864 74.5485 75.7711 cv
74.6323 75.6559 li
74.9886 75.7083 75.3135 75.8655 75.6069 76.1274 cv
75.9003 76.3894 76.047 76.7247 76.047 77.1125 cv
76.047 77.5421 75.8793 77.9194 75.544 78.2233 cv
75.2087 78.5272 74.7581 78.6843 74.1922 78.6843 cv
73.5844 78.6843 73.1024 78.5272 72.7566 78.2128 cv
72.4212 77.8984 72.2431 77.5002 72.2431 77.0286 cv
72.2431 76.6304 72.3793 76.2951 72.6413 76.0436 cv
72.9137 75.7816 73.2596 75.6559 73.6997 75.6559 cv
cp
73.4796 78.1289 mo
73.4796 76.4733 li
73.2491 76.4837 73.0919 76.5047 72.9976 76.5466 cv
72.8509 76.62 72.7356 76.7143 72.6518 76.84 cv
72.5679 76.9658 72.526 77.102 72.526 77.2487 cv
72.526 77.4583 72.6099 77.6574 72.7775 77.8251 cv
72.9452 77.9927 73.1757 78.0975 73.4796 78.1289 cv
cp
72.2536 74.1259 mo
73.0605 74.1259 li
72.5155 73.8325 72.2536 73.5181 72.2536 73.2038 cv
72.2536 73.0675 72.2955 72.9418 72.3793 72.8475 cv
72.4736 72.7532 72.5679 72.7112 72.6832 72.7112 cv
72.788 72.7112 72.8718 72.7427 72.9452 72.816 cv
73.0081 72.8789 73.05 72.9627 73.05 73.0571 cv
73.05 73.1514 73.0081 73.2457 72.9137 73.3609 cv
72.8194 73.4762 72.7775 73.5601 72.7775 73.6124 cv
72.7775 73.6648 72.809 73.7068 72.8614 73.7696 cv
72.9661 73.8849 73.1443 74.0002 73.3853 74.1259 cv
75.1039 74.1259 li
75.2925 74.1259 75.4497 74.105 75.544 74.0526 cv
75.6174 74.0211 75.6802 73.9583 75.7222 73.8744 cv
75.7746 73.7906 75.7955 73.6648 75.7955 73.5077 cv
75.9317 73.5077 li
75.9317 75.331 li
75.7955 75.331 li
75.7955 75.1529 75.7641 75.0167 75.7117 74.9328 cv
75.6698 74.8699 75.5964 74.8176 75.5126 74.7966 cv
75.4602 74.7756 75.3344 74.7756 75.1248 74.7756 cv
73.7416 74.7756 li
73.3224 74.7756 73.0814 74.7861 72.9976 74.7966 cv
72.9242 74.8176 72.8614 74.849 72.8299 74.8909 cv
72.788 74.9433 72.767 74.9957 72.767 75.0586 cv
72.767 75.1424 72.788 75.2367 72.8299 75.331 cv
72.6937 75.3729 li
72.2536 74.2936 li
cp
72.7146 70.7726 mo
72.264 69.6723 li
72.264 69.5151 li
73.1024 69.5151 li
72.788 69.337 72.5679 69.1483 72.4422 68.9597 cv
72.3164 68.7816 72.2536 68.5825 72.2536 68.3729 cv
72.2536 68.0166 72.3898 67.7127 72.6727 67.4822 cv
73.0185 67.1783 73.4691 67.0316 74.0141 67.0316 cv
74.6323 67.0316 75.1458 67.2097 75.544 67.566 cv
75.8793 67.8594 76.047 68.2262 76.047 68.6663 cv
76.047 68.8654 76.0156 69.0331 75.9632 69.1693 cv
75.9213 69.2741 75.8479 69.3894 75.7326 69.5151 cv
76.8225 69.5151 li
77.0635 69.5151 77.2207 69.5046 77.2835 69.4732 cv
77.3464 69.4418 77.3988 69.3894 77.4407 69.316 cv
77.4827 69.2427 77.5036 69.1064 77.5036 68.9178 cv
77.6503 68.9178 li
77.6503 70.7936 li
77.5036 70.7936 li
77.5036 70.6888 li
77.5036 70.5525 77.4722 70.4268 77.4198 70.322 cv
77.3883 70.2801 77.3464 70.2382 77.2835 70.2067 cv
77.2207 70.1858 77.053 70.1648 76.791 70.1648 cv
73.4063 70.1648 li
73.1757 70.1648 73.029 70.1753 72.9661 70.1963 cv
72.9033 70.2172 72.8614 70.2486 72.8299 70.301 cv
72.7985 70.343 72.788 70.4058 72.7775 70.4897 cv
72.788 70.5421 72.7985 70.6259 72.8404 70.7202 cv
cp
73.3329 69.5151 mo
74.6742 69.5151 li
74.9572 69.5151 75.1458 69.5046 75.2401 69.4837 cv
75.3868 69.4522 75.5231 69.3579 75.6383 69.2217 cv
75.7536 69.075 75.806 68.8968 75.806 68.6768 cv
75.806 68.4148 75.7117 68.2052 75.5021 68.048 cv
75.2401 67.8384 74.8629 67.7337 74.3808 67.7337 cv
73.8359 67.7337 73.4167 67.8489 73.1233 68.09 cv
72.9242 68.2576 72.8194 68.4567 72.8194 68.6873 cv
72.8194 68.813 72.8509 68.9283 72.9137 69.054 cv
72.9557 69.1483 73.1024 69.3055 73.3329 69.5151 cv
cp
75.4183 64.4851 mo
75.7012 64.8519 75.8689 65.0824 75.9108 65.1768 cv
75.9737 65.313 76.0051 65.4702 76.0051 65.6274 cv
76.0051 65.8684 75.9213 66.078 75.7536 66.2351 cv
75.5859 66.3923 75.3659 66.4762 75.0829 66.4762 cv
74.9153 66.4762 74.7581 66.4342 74.6323 66.3609 cv
74.4542 66.2561 74.2865 66.0675 74.1293 65.8055 cv
73.9826 65.5435 73.7835 65.1034 73.5635 64.4851 cv
73.4272 64.4851 li
73.0709 64.4851 72.8194 64.5375 72.6937 64.6528 cv
72.5575 64.7681 72.4946 64.9357 72.4946 65.1453 cv
72.4946 65.313 72.5365 65.4387 72.6203 65.5435 cv
72.7146 65.6378 72.809 65.6902 72.9242 65.6902 cv
73.1548 65.6797 li
73.27 65.6797 73.3644 65.7112 73.4272 65.7741 cv
73.5006 65.8369 73.532 65.9103 73.532 66.0151 cv
73.532 66.1094 73.4901 66.1827 73.4272 66.2456 cv
73.3644 66.3085 73.27 66.3399 73.1548 66.3399 cv
72.9242 66.3399 72.7251 66.2247 72.5365 65.9941 cv
72.3479 65.7636 72.2536 65.4492 72.2536 65.03 cv
72.2536 64.7157 72.306 64.4537 72.4108 64.2546 cv
72.4946 64.0974 72.6203 63.9821 72.788 63.9088 cv
72.9033 63.8669 73.1338 63.8459 73.4796 63.8459 cv
74.6952 63.8459 li
75.0305 63.8459 75.2401 63.8354 75.324 63.8249 cv
75.3973 63.804 75.4497 63.783 75.4707 63.7516 cv
75.5021 63.7306 75.5126 63.6887 75.5126 63.6573 cv
75.5126 63.6154 75.5021 63.5734 75.4811 63.542 cv
75.4497 63.4896 75.3554 63.3848 75.1982 63.2276 cv
75.4183 63.2276 li
75.806 63.521 76.0051 63.7935 76.0051 64.066 cv
76.0051 64.1917 75.9632 64.2965 75.8689 64.3699 cv
75.785 64.4432 75.6278 64.4851 75.4183 64.4851 cv
cp
75.1668 64.4851 mo
73.8045 64.4851 li
73.9617 64.8833 74.0665 65.1348 74.1293 65.2501 cv
74.2446 65.4492 74.3704 65.5959 74.4961 65.6902 cv
74.6218 65.7741 74.7581 65.816 74.9048 65.816 cv
75.0934 65.816 75.2506 65.7636 75.3659 65.6483 cv
75.4916 65.5435 75.5545 65.4073 75.5545 65.2711 cv
75.5545 65.072 75.4287 64.81 75.1668 64.4851 cv
cp
71.1847 61.9177 mo
72.3584 61.9177 li
72.3584 61.0899 li
72.6308 61.0899 li
72.6308 61.9177 li
74.9467 61.9177 li
75.1772 61.9177 75.3344 61.8863 75.4183 61.8234 cv
75.5021 61.7606 75.544 61.6662 75.544 61.5719 cv
75.544 61.4776 75.5126 61.3938 75.4602 61.3204 cv
75.4078 61.2366 75.324 61.1737 75.2192 61.1318 cv
75.2192 60.9746 li
75.4811 61.0689 75.6698 61.1947 75.7955 61.3624 cv
75.9317 61.53 75.9946 61.6977 75.9946 61.8758 cv
75.9946 62.0016 75.9632 62.1169 75.8898 62.2321 cv
75.827 62.3474 75.7326 62.4312 75.6069 62.4836 cv
75.4811 62.536 75.2925 62.5675 75.041 62.5675 cv
72.6308 62.5675 li
72.6308 63.1333 li
72.5051 63.1333 li
72.4422 62.9866 72.3479 62.8399 72.2117 62.6932 cv
72.0754 62.5465 71.9078 62.4103 71.7191 62.295 cv
71.6248 62.2321 71.4467 62.1483 71.1847 62.0435 cv
cp
70.3778 59.6857 mo
72.9976 59.6857 li
72.6832 59.4028 72.4736 59.1722 72.3898 59.0045 cv
72.2955 58.8369 72.2536 58.6587 72.2536 58.4911 cv
72.2536 58.292 72.306 58.1138 72.4212 57.9671 cv
72.5365 57.8204 72.7042 57.7156 72.9452 57.6423 cv
73.1129 57.6003 73.4167 57.5689 73.8569 57.5689 cv
75.1248 57.5689 li
75.3554 57.5689 75.5126 57.5584 75.5859 57.5165 cv
75.6488 57.4956 75.7012 57.4432 75.7431 57.3803 cv
75.7746 57.3174 75.7955 57.2021 75.7955 57.045 cv
75.9317 57.045 li
75.9317 58.795 li
75.7955 58.795 li
75.7955 58.7111 li
75.7955 58.5539 75.7641 58.4387 75.7222 58.3653 cv
75.6698 58.3024 75.5964 58.2605 75.4916 58.2291 cv
75.4497 58.2291 75.3344 58.2186 75.1248 58.2186 cv
73.8569 58.2186 li
73.4691 58.2186 73.2176 58.2396 73.0919 58.2815 cv
72.9661 58.3234 72.8823 58.3863 72.8194 58.4701 cv
72.7566 58.5644 72.7251 58.6692 72.7251 58.795 cv
72.7251 58.9207 72.7566 59.0569 72.8299 59.1932 cv
72.8928 59.3294 73.029 59.4971 73.2386 59.6857 cv
75.1248 59.6857 li
75.3764 59.6857 75.5231 59.6752 75.5859 59.6438 cv
75.6383 59.6228 75.6907 59.5704 75.7326 59.4971 cv
75.7746 59.4237 75.7955 59.298 75.7955 59.1093 cv
75.9317 59.1093 li
75.9317 60.8803 li
75.7955 60.8803 li
75.7955 60.7231 75.7746 60.5974 75.7222 60.5135 cv
75.6907 60.4611 75.6488 60.4192 75.5754 60.3878 cv
75.5021 60.3564 75.3554 60.3354 75.1248 60.3354 cv
71.8868 60.3354 li
71.4781 60.3354 71.2266 60.3459 71.1323 60.3668 cv
71.038 60.3878 70.9751 60.4192 70.9437 60.4611 cv
70.9122 60.4926 70.8913 60.5555 70.8913 60.6183 cv
70.8913 60.6707 70.9122 60.765 70.9542 60.8803 cv
70.8179 60.9432 li
70.3778 59.8638 li
cp
72.2536 52.9895 mo
72.2536 52.4446 72.4527 52.015 72.8718 51.6901 cv
73.2176 51.4072 73.6263 51.271 74.0769 51.271 cv
74.4018 51.271 74.7266 51.3443 75.0515 51.5015 cv
75.3764 51.6482 75.6278 51.8683 75.7955 52.1302 cv
75.9632 52.4027 76.047 52.7066 76.047 53.0314 cv
76.047 53.5764 75.827 53.9955 75.3973 54.3204 cv
75.041 54.5824 74.6323 54.7186 74.1817 54.7186 cv
73.8569 54.7186 73.532 54.6348 73.2072 54.4776 cv
72.8823 54.3099 72.6413 54.1003 72.4841 53.8383 cv
72.3269 53.5659 72.2536 53.2829 72.2536 52.9895 cv
cp
72.5051 53.1153 mo
72.5051 53.2515 72.547 53.3877 72.6308 53.524 cv
72.7146 53.6707 72.8509 53.7755 73.0605 53.8698 cv
73.27 53.9536 73.532 53.9955 73.8569 53.9955 cv
74.3704 53.9955 74.821 53.8907 75.1982 53.6812 cv
75.5754 53.4716 75.7641 53.1991 75.7641 52.8638 cv
75.7641 52.6123 75.6593 52.4027 75.4497 52.235 cv
75.2506 52.0778 74.8838 51.994 74.3808 51.994 cv
73.7416 51.994 73.2491 52.1302 72.8823 52.4027 cv
72.6308 52.5913 72.5051 52.8219 72.5051 53.1153 cv
cp
72.9766 49.762 mo
72.4946 49.4161 72.2536 49.0389 72.2536 48.6407 cv
72.2536 48.2739 72.4108 47.9491 72.7251 47.6766 cv
73.0395 47.4042 73.4691 47.2679 74.0141 47.2679 cv
74.6428 47.2679 75.1563 47.4775 75.544 47.8967 cv
75.8793 48.2634 76.047 48.6617 76.047 49.1123 cv
76.047 49.3218 76.0051 49.5314 75.9317 49.741 cv
75.8584 49.9611 75.7431 50.1811 75.5859 50.4012 cv
71.8868 50.4012 li
71.4781 50.4012 71.2266 50.4117 71.1323 50.4326 cv
71.038 50.4536 70.9751 50.485 70.9437 50.5269 cv
70.9122 50.5689 70.8913 50.6212 70.8913 50.6841 cv
70.8913 50.7575 70.9122 50.8413 70.9542 50.9566 cv
70.8179 51.009 li
70.3778 49.9401 li
70.3778 49.762 li
cp
73.2281 49.762 mo
75.3659 49.762 li
75.4916 49.6257 75.5964 49.4895 75.6593 49.3428 cv
75.7222 49.2066 75.7641 49.0599 75.7641 48.9131 cv
75.7641 48.6721 75.6278 48.4521 75.3659 48.253 cv
75.1039 48.0434 74.7266 47.9386 74.2341 47.9386 cv
73.773 47.9386 73.4167 48.0434 73.1757 48.253 cv
72.9242 48.4521 72.809 48.6826 72.809 48.9446 cv
72.809 49.0808 72.8404 49.2275 72.9137 49.3637 cv
72.9661 49.4685 73.0709 49.5943 73.2281 49.762 cv
cp
71.1847 45.6961 mo
72.3584 45.6961 li
72.3584 44.8682 li
72.6308 44.8682 li
72.6308 45.6961 li
74.9467 45.6961 li
75.1772 45.6961 75.3344 45.6646 75.4183 45.6017 cv
75.5021 45.5389 75.544 45.4446 75.544 45.3503 cv
75.544 45.2559 75.5126 45.1721 75.4602 45.0987 cv
75.4078 45.0149 75.324 44.952 75.2192 44.9101 cv
75.2192 44.7529 li
75.4811 44.8472 75.6698 44.973 75.7955 45.1407 cv
75.9317 45.3083 75.9946 45.476 75.9946 45.6541 cv
75.9946 45.7799 75.9632 45.8952 75.8898 46.0104 cv
75.827 46.1257 75.7326 46.2095 75.6069 46.2619 cv
75.4811 46.3143 75.2925 46.3458 75.041 46.3458 cv
72.6308 46.3458 li
72.6308 46.9116 li
72.5051 46.9116 li
72.4422 46.7649 72.3479 46.6182 72.2117 46.4715 cv
72.0754 46.3248 71.9078 46.1886 71.7191 46.0733 cv
71.6248 46.0104 71.4467 45.9266 71.1847 45.8218 cv
cp
75.4183 42.4894 mo
75.7012 42.8562 75.8689 43.0868 75.9108 43.1811 cv
75.9737 43.3278 76.0051 43.4745 76.0051 43.6317 cv
76.0051 43.8832 75.9213 44.0823 75.7536 44.2395 cv
75.5859 44.4071 75.3659 44.4805 75.0829 44.4805 cv
74.9153 44.4805 74.7581 44.4386 74.6323 44.3652 cv
74.4542 44.2604 74.2865 44.0718 74.1293 43.8098 cv
73.9826 43.5478 73.7835 43.1077 73.5635 42.4894 cv
73.4272 42.4894 li
73.0709 42.4894 72.8194 42.5523 72.6937 42.6571 cv
72.5575 42.7724 72.4946 42.94 72.4946 43.1496 cv
72.4946 43.3173 72.5365 43.4535 72.6203 43.5478 cv
72.7146 43.6422 72.809 43.6945 72.9242 43.6945 cv
73.1548 43.6841 li
73.27 43.6841 73.3644 43.7155 73.4272 43.7784 cv
73.5006 43.8412 73.532 43.9146 73.532 44.0194 cv
73.532 44.1137 73.4901 44.1975 73.4272 44.2499 cv
73.3644 44.3128 73.27 44.3442 73.1548 44.3442 cv
72.9242 44.3442 72.7251 44.229 72.5365 43.9984 cv
72.3479 43.7679 72.2536 43.4535 72.2536 43.0344 cv
72.2536 42.72 72.306 42.458 72.4108 42.2589 cv
72.4946 42.1017 72.6203 41.9864 72.788 41.9131 cv
72.9033 41.8712 73.1338 41.8502 73.4796 41.8502 cv
74.6952 41.8502 li
75.0305 41.8502 75.2401 41.8397 75.324 41.8293 cv
75.3973 41.8083 75.4497 41.7873 75.4707 41.7664 cv
75.5021 41.7349 75.5126 41.693 75.5126 41.6616 cv
75.5126 41.6197 75.5021 41.5778 75.4811 41.5463 cv
75.4497 41.4939 75.3554 41.3891 75.1982 41.2319 cv
75.4183 41.2319 li
75.806 41.5254 76.0051 41.8083 76.0051 42.0703 cv
76.0051 42.196 75.9632 42.3008 75.8689 42.3742 cv
75.785 42.4475 75.6278 42.4894 75.4183 42.4894 cv
cp
75.1668 42.4894 mo
73.8045 42.4894 li
73.9617 42.8876 74.0665 43.1392 74.1293 43.2544 cv
74.2446 43.4535 74.3704 43.6002 74.4961 43.6945 cv
74.6218 43.7784 74.7581 43.8308 74.9048 43.8308 cv
75.0934 43.8308 75.2506 43.7679 75.3659 43.6631 cv
75.4916 43.5478 75.5545 43.4221 75.5545 43.2754 cv
75.5545 43.0763 75.4287 42.8143 75.1668 42.4894 cv
cp
70.3778 40.0583 mo
70.3778 39.943 70.4197 39.8592 70.4931 39.7754 cv
70.5769 39.702 70.6607 39.6601 70.776 39.6601 cv
70.8808 39.6601 70.9751 39.702 71.0589 39.7754 cv
71.1323 39.8592 71.1742 39.943 71.1742 40.0583 cv
71.1742 40.1631 71.1323 40.2574 71.0589 40.3412 cv
70.9751 40.4146 70.8808 40.4565 70.776 40.4565 cv
70.6607 40.4565 70.5769 40.4146 70.4931 40.3412 cv
70.4197 40.2679 70.3778 40.1736 70.3778 40.0583 cv
cp
72.2536 39.7334 mo
75.1248 39.7334 li
75.3554 39.7334 75.5021 39.7125 75.5754 39.681 cv
75.6488 39.6496 75.7012 39.6077 75.7431 39.5448 cv
75.7746 39.4715 75.7955 39.3562 75.7955 39.1885 cv
75.9317 39.1885 li
75.9317 40.9281 li
75.7955 40.9281 li
75.7955 40.7499 75.7746 40.6346 75.7431 40.5718 cv
75.7117 40.5194 75.6488 40.467 75.5754 40.4355 cv
75.5021 40.4041 75.3449 40.3831 75.1248 40.3831 cv
73.7521 40.3831 li
73.3644 40.3831 73.1129 40.3936 72.9976 40.4146 cv
72.9137 40.4355 72.8509 40.467 72.8194 40.4984 cv
72.788 40.5403 72.767 40.5927 72.767 40.6661 cv
72.767 40.7394 72.788 40.8233 72.8299 40.9281 cv
72.6937 40.9804 li
72.2536 39.9011 li
cp
73.0081 37.7005 mo
72.5051 37.2813 72.2536 36.8831 72.2536 36.5059 cv
72.2536 36.3068 72.2955 36.1391 72.4003 36.0029 cv
72.4946 35.8562 72.6518 35.7514 72.8823 35.6675 cv
73.0395 35.6047 73.2805 35.5732 73.5949 35.5732 cv
75.1248 35.5732 li
75.3554 35.5732 75.5021 35.5627 75.5859 35.5208 cv
75.6488 35.4894 75.7012 35.4475 75.7431 35.3846 cv
75.7746 35.3217 75.7955 35.2065 75.7955 35.0283 cv
75.9317 35.0283 li
75.9317 36.7993 li
75.7955 36.7993 li
75.7955 36.7259 li
75.7955 36.5583 75.7641 36.443 75.7222 36.3801 cv
75.6698 36.3068 75.5964 36.2648 75.4916 36.2334 cv
75.4497 36.2229 75.3344 36.2229 75.1248 36.2229 cv
73.6578 36.2229 li
73.3329 36.2229 73.1024 36.2648 72.9557 36.3487 cv
72.809 36.4325 72.7356 36.5792 72.7356 36.7783 cv
72.7356 37.0822 72.9033 37.3966 73.2386 37.7005 cv
75.1248 37.7005 li
75.3659 37.7005 75.5231 37.69 75.5754 37.6586 cv
75.6488 37.6271 75.7117 37.5747 75.7431 37.5119 cv
75.7746 37.449 75.7955 37.3128 75.7955 37.1241 cv
75.9317 37.1241 li
75.9317 38.8846 li
75.7955 38.8846 li
75.7955 38.8113 li
75.7955 38.6331 75.7431 38.5074 75.6593 38.4445 cv
75.565 38.3816 75.3868 38.3502 75.1248 38.3502 cv
73.794 38.3502 li
73.3644 38.3502 73.1024 38.3607 73.0081 38.3711 cv
72.9242 38.3921 72.8509 38.4235 72.8194 38.4655 cv
72.788 38.5074 72.767 38.5598 72.767 38.6226 cv
72.767 38.696 72.788 38.7903 72.8299 38.8846 cv
72.6937 38.9475 li
72.2536 37.8681 li
72.2536 37.7005 li
cp
73.6997 34.1481 mo
74.2341 34.1481 74.6533 34.0223 74.9572 33.7603 cv
75.2611 33.4984 75.4078 33.1945 75.4078 32.8382 cv
75.4078 32.6076 75.3449 32.398 75.2192 32.2304 cv
75.0829 32.0522 74.8629 31.9055 74.5485 31.7903 cv
74.6323 31.675 li
74.9886 31.7274 75.3135 31.8846 75.6069 32.1465 cv
75.9003 32.4085 76.047 32.7439 76.047 33.1316 cv
76.047 33.5612 75.8793 33.9385 75.544 34.2424 cv
75.2087 34.5463 74.7581 34.7035 74.1922 34.7035 cv
73.5844 34.7035 73.1024 34.5463 72.7566 34.2319 cv
72.4212 33.9175 72.2431 33.5193 72.2431 33.0478 cv
72.2431 32.6495 72.3793 32.3142 72.6413 32.0627 cv
72.9137 31.8007 73.2596 31.675 73.6997 31.675 cv
cp
73.4796 34.1481 mo
73.4796 32.4924 li
73.2491 32.5028 73.0919 32.5238 72.9976 32.5657 cv
72.8509 32.6391 72.7356 32.7334 72.6518 32.8591 cv
72.5679 32.9849 72.526 33.1211 72.526 33.2678 cv
72.526 33.4774 72.6099 33.6765 72.7775 33.8442 cv
72.9452 34.0118 73.1757 34.1166 73.4796 34.1481 cv
cp
75.5335 28.6675 mo
75.7117 28.8456 75.8479 29.0133 75.9213 29.181 cv
76.0051 29.3486 76.047 29.5268 76.047 29.7154 cv
76.047 30.1136 75.8793 30.4489 75.5545 30.7423 cv
75.2296 31.0358 74.8105 31.1825 74.297 31.1825 cv
73.7835 31.1825 73.312 31.0148 72.8823 30.6899 cv
72.4632 30.3756 72.2431 29.9564 72.2431 29.4534 cv
72.2431 29.1286 72.3479 28.8771 72.547 28.6675 cv
71.8868 28.6675 li
71.4781 28.6675 71.2266 28.678 71.1323 28.6989 cv
71.038 28.7199 70.9751 28.7513 70.9437 28.7932 cv
70.9122 28.8351 70.8913 28.8875 70.8913 28.9399 cv
70.8913 29.0133 70.9122 29.0971 70.9542 29.2124 cv
70.8179 29.2648 li
70.3778 28.1959 li
70.3778 28.0283 li
74.5171 28.0283 li
74.9362 28.0283 75.1877 28.0178 75.282 27.9968 cv
75.3764 27.9759 75.4392 27.9444 75.4811 27.9025 cv
75.5126 27.8606 75.5335 27.8082 75.5335 27.7453 cv
75.5335 27.6824 75.5126 27.5881 75.4707 27.4729 cv
75.6069 27.4205 li
76.047 28.4893 li
76.047 28.6675 li
cp
75.2611 28.6675 mo
73.4167 28.6675 li
73.2386 28.6884 73.0814 28.7304 72.9347 28.8037 cv
72.788 28.8875 72.6727 28.9923 72.5994 29.1181 cv
72.526 29.2438 72.4946 29.3696 72.4946 29.4953 cv
72.4946 29.7259 72.5889 29.925 72.7985 30.1136 cv
73.0709 30.3441 73.4691 30.4594 73.9826 30.4594 cv
74.5171 30.4594 74.9153 30.3546 75.1982 30.1241 cv
75.4707 29.8935 75.6174 29.6316 75.6174 29.3591 cv
75.6174 29.1181 75.4916 28.8875 75.2611 28.6675 cv
f
82.5755 102.304 mo
82.0935 101.958 81.8525 101.581 81.8525 101.183 cv
81.8525 100.816 82.0096 100.502 82.324 100.219 cv
82.6384 99.9465 83.068 99.8103 83.6129 99.8103 cv
84.2417 99.8103 84.7552 100.02 85.1429 100.449 cv
85.4782 100.806 85.6459 101.214 85.6459 101.655 cv
85.6459 101.864 85.604 102.074 85.5306 102.294 cv
85.4573 102.503 85.342 102.723 85.1953 102.954 cv
81.4857 102.954 li
81.077 102.954 80.8255 102.964 80.7312 102.975 cv
80.6369 102.996 80.574 103.027 80.5426 103.069 cv
80.5111 103.111 80.4902 103.164 80.4902 103.226 cv
80.4902 103.3 80.5111 103.394 80.553 103.499 cv
80.4168 103.551 li
79.9767 102.482 li
79.9767 102.304 li
cp
82.827 102.304 mo
84.9648 102.304 li
85.0905 102.168 85.1953 102.032 85.2582 101.896 cv
85.321 101.749 85.363 101.602 85.363 101.455 cv
85.363 101.225 85.2267 101.005 84.9648 100.795 cv
84.7028 100.596 84.3255 100.491 83.833 100.491 cv
83.3719 100.491 83.0156 100.596 82.7746 100.795 cv
82.5336 101.005 82.4078 101.235 82.4078 101.497 cv
82.4078 101.634 82.4393 101.77 82.5126 101.906 cv
82.565 102.011 82.6698 102.147 82.827 102.304 cv
cp
81.9572 99.4854 mo
81.9572 97.8192 li
82.104 97.8192 li
82.104 97.9031 li
82.104 98.0183 82.1249 98.1126 82.1773 98.165 cv
82.2297 98.2279 82.2926 98.2593 82.3659 98.2593 cv
82.4707 98.2593 82.6069 98.207 82.7851 98.1231 cv
84.5875 97.2533 li
82.6174 96.4569 li
82.5126 96.4045 82.4078 96.3836 82.3031 96.3836 cv
82.2507 96.3836 82.2192 96.3941 82.1983 96.415 cv
82.1668 96.436 82.1459 96.4674 82.1249 96.5093 cv
82.1144 96.5617 82.104 96.6351 82.104 96.7504 cv
81.9572 96.7504 li
81.9572 95.5872 li
82.104 95.5872 li
82.1144 95.6815 82.1354 95.7548 82.1668 95.8072 cv
82.1983 95.8596 82.2507 95.912 82.3345 95.9749 cv
82.3764 96.0063 82.4707 96.0483 82.6384 96.1111 cv
86.2118 97.5677 li
86.5576 97.704 86.8196 97.8926 86.9977 98.1231 cv
87.1758 98.3432 87.2597 98.5632 87.2597 98.7833 cv
87.2597 98.93 87.2178 99.0558 87.1235 99.1606 cv
87.0396 99.2549 86.9348 99.3073 86.8196 99.3073 cv
86.7148 99.3073 86.6205 99.2653 86.5576 99.2025 cv
86.4947 99.1291 86.4633 99.0243 86.4633 98.8986 cv
86.4633 98.8147 86.4842 98.6995 86.5471 98.5528 cv
86.589 98.448 86.5995 98.3851 86.5995 98.3537 cv
86.5995 98.2803 86.5681 98.1965 86.4842 98.1022 cv
86.4004 98.0079 86.2432 97.9135 86.0127 97.8192 cv
85.3944 97.5677 li
82.6908 98.8567 li
82.6174 98.8881 82.5126 98.951 82.3974 99.0348 cv
82.3031 99.1082 82.2402 99.1606 82.2087 99.2025 cv
82.1668 99.2549 82.1354 99.3597 82.104 99.4854 cv
cp
81.9572 90.1485 mo
84.1264 90.1485 li
84.5351 90.1485 84.7866 90.138 84.8809 90.1171 cv
84.9752 90.0961 85.0381 90.0647 85.08 90.0228 cv
85.1115 89.9808 85.1324 89.9284 85.1324 89.876 cv
85.1324 89.7922 85.1115 89.7084 85.0695 89.6036 cv
85.2058 89.5512 li
85.6459 90.6201 li
85.6459 90.7982 li
84.8809 90.7982 li
85.2163 91.1021 85.4258 91.3326 85.5097 91.5003 cv
85.604 91.6575 85.6459 91.8252 85.6459 92.0138 cv
85.6459 92.2129 85.583 92.3806 85.4678 92.5273 cv
85.3525 92.674 85.2058 92.7788 85.0276 92.8416 cv
84.839 92.894 84.5875 92.9255 84.2522 92.9255 cv
82.6489 92.9255 li
82.4812 92.9255 82.3659 92.936 82.3031 92.9779 cv
82.2402 93.0093 82.1878 93.0722 82.1459 93.1351 cv
82.1144 93.2084 82.0935 93.3446 82.104 93.5333 cv
81.9572 93.5333 li
81.9572 92.2758 li
84.3465 92.2758 li
84.6818 92.2758 84.9019 92.2129 85.0067 92.0976 cv
85.1115 91.9824 85.1639 91.8461 85.1639 91.6785 cv
85.1639 91.5737 85.1324 91.4374 85.0591 91.3012 cv
84.9857 91.1545 84.8495 90.9868 84.6504 90.7982 cv
82.6279 90.7982 li
82.4288 90.7982 82.2926 90.8297 82.2192 90.903 cv
82.1459 90.9764 82.104 91.1335 82.104 91.3641 cv
81.9572 91.3641 li
cp
82.6069 88.2413 mo
82.104 87.8221 81.8525 87.4239 81.8525 87.0467 cv
81.8525 86.8476 81.9048 86.6799 81.9992 86.5437 cv
82.0935 86.397 82.2507 86.2922 82.4812 86.2084 cv
82.6384 86.1455 82.8794 86.114 83.1938 86.114 cv
84.7237 86.114 li
84.9543 86.114 85.101 86.1036 85.1848 86.0616 cv
85.2477 86.0302 85.3001 85.9883 85.342 85.9254 cv
85.3734 85.8625 85.3944 85.7473 85.3944 85.5691 cv
85.5306 85.5691 li
85.5306 87.3401 li
85.3944 87.3401 li
85.3944 87.2667 li
85.3944 87.0991 85.363 86.9838 85.321 86.9209 cv
85.2686 86.8476 85.1953 86.8057 85.0905 86.7742 cv
85.0486 86.7637 84.9333 86.7637 84.7237 86.7637 cv
83.2567 86.7637 li
82.9318 86.7637 82.7013 86.8057 82.5546 86.8895 cv
82.4078 86.9733 82.3345 87.12 82.3345 87.3191 cv
82.3345 87.623 82.5022 87.9374 82.8375 88.2413 cv
84.7237 88.2413 li
84.9648 88.2413 85.1219 88.2308 85.1743 88.1994 cv
85.2477 88.1679 85.3106 88.1156 85.342 88.0527 cv
85.3734 87.9898 85.3944 87.8536 85.3944 87.665 cv
85.5306 87.665 li
85.5306 89.4359 li
85.3944 89.4359 li
85.3944 89.3521 li
85.3944 89.1739 85.3525 89.0482 85.2582 88.9853 cv
85.1639 88.9224 84.9857 88.891 84.7237 88.891 cv
83.3929 88.891 li
82.9632 88.891 82.7013 88.9015 82.6174 88.9224 cv
82.5231 88.9329 82.4602 88.9644 82.4183 89.0063 cv
82.3869 89.0482 82.3659 89.1006 82.3659 89.1739 cv
82.3659 89.2473 82.3869 89.3311 82.4288 89.4359 cv
82.2926 89.4883 li
81.8525 88.409 li
81.8525 88.2413 li
cp
82.2402 83.8925 mo
84.5875 83.8925 li
84.9228 83.8925 85.1324 83.8505 85.2163 83.7772 cv
85.3315 83.6829 85.3944 83.5571 85.3944 83.3895 cv
85.3944 83.0646 li
85.5306 83.0646 li
85.5306 85.2024 li
85.3944 85.2024 li
85.3944 85.0452 li
85.3944 84.9404 85.363 84.8461 85.3106 84.7622 cv
85.2582 84.6784 85.1953 84.6155 85.101 84.5841 cv
85.0172 84.5527 84.839 84.5317 84.5875 84.5317 cv
82.2402 84.5317 li
82.2402 85.2233 li
81.9572 85.2233 li
81.9572 84.5317 li
81.7267 84.5317 li
81.3704 84.5317 81.0665 84.4793 80.815 84.364 cv
80.5635 84.2488 80.3644 84.0706 80.2177 83.8401 cv
80.0605 83.5991 79.9872 83.3371 79.9872 83.0437 cv
79.9872 82.7712 80.0815 82.5197 80.2491 82.2892 cv
80.3749 82.132 80.5006 82.0586 80.6474 82.0586 cv
80.7207 82.0586 80.8045 82.0901 80.8674 82.1634 cv
80.9408 82.2263 80.9722 82.2996 80.9722 82.3835 cv
80.9722 82.4359 80.9512 82.4987 80.9093 82.5721 cv
80.8674 82.635 80.7731 82.7188 80.6264 82.8131 cv
80.4902 82.9074 80.3959 83.0017 80.3435 83.0751 cv
80.2911 83.1589 80.2701 83.2532 80.2701 83.3475 cv
80.2701 83.4733 80.3015 83.5676 80.3644 83.6514 cv
80.4273 83.7353 80.5321 83.7982 80.6578 83.8296 cv
80.7941 83.8715 81.1399 83.8925 81.6953 83.8925 cv
81.9572 83.8925 li
81.9572 82.9703 li
82.2402 82.9703 li
cp
81.8525 80.8745 mo
81.8525 80.3296 82.0516 79.8999 82.4707 79.5646 cv
82.8165 79.2921 83.2252 79.1454 83.6758 79.1454 cv
84.0007 79.1454 84.3255 79.2293 84.6504 79.376 cv
84.9752 79.5331 85.2267 79.7427 85.3944 80.0152 cv
85.5621 80.2877 85.6459 80.5811 85.6459 80.9164 cv
85.6459 81.4508 85.4258 81.8805 84.9962 82.2053 cv
84.6399 82.4673 84.2312 82.6035 83.7806 82.6035 cv
83.4558 82.6035 83.1309 82.5197 82.8061 82.3625 cv
82.4812 82.1948 82.2402 81.9853 82.083 81.7128 cv
81.9258 81.4508 81.8525 81.1679 81.8525 80.8745 cv
cp
82.104 80.9897 mo
82.104 81.1365 82.1459 81.2727 82.2297 81.4089 cv
82.3135 81.5451 82.4498 81.6604 82.6593 81.7442 cv
82.8689 81.8386 83.1309 81.8805 83.4558 81.8805 cv
83.9692 81.8805 84.4198 81.7757 84.7971 81.5661 cv
85.1743 81.3565 85.363 81.0841 85.363 80.7487 cv
85.363 80.4972 85.2582 80.2877 85.0486 80.12 cv
84.8495 79.9628 84.4827 79.879 83.9797 79.879 cv
83.3405 79.879 82.848 80.0152 82.4812 80.2877 cv
82.2297 80.4763 82.104 80.7068 82.104 80.9897 cv
cp
79.9767 77.3954 mo
84.7237 77.3954 li
84.9543 77.3954 85.101 77.3745 85.1743 77.343 cv
85.2477 77.3116 85.3001 77.2592 85.342 77.1963 cv
85.3734 77.123 85.3944 76.9972 85.3944 76.8191 cv
85.5306 76.8191 li
85.5306 78.5691 li
85.3944 78.5691 li
85.3944 78.4014 85.3734 78.2966 85.342 78.2337 cv
85.3106 78.1709 85.2477 78.1289 85.1743 78.087 cv
85.101 78.0556 84.9438 78.0451 84.7237 78.0451 cv
81.4752 78.0451 li
81.077 78.0451 80.8255 78.0451 80.7312 78.0661 cv
80.6369 78.087 80.574 78.1185 80.5426 78.1604 cv
80.5111 78.1918 80.4902 78.2442 80.4902 78.3071 cv
80.4902 78.3804 80.5111 78.4643 80.553 78.5691 cv
80.4168 78.6319 li
79.9767 77.5736 li
cp
85.1324 73.8744 mo
85.3106 74.0526 85.4468 74.2202 85.5201 74.3879 cv
85.604 74.5556 85.6459 74.7337 85.6459 74.9223 cv
85.6459 75.3101 85.4782 75.6559 85.1534 75.9493 cv
84.8285 76.2427 84.4094 76.3894 83.8959 76.3894 cv
83.3824 76.3894 82.9108 76.2217 82.4812 75.8969 cv
82.062 75.5825 81.842 75.1634 81.842 74.6499 cv
81.842 74.3355 81.9468 74.084 82.1459 73.8744 cv
81.4857 73.8744 li
81.077 73.8744 80.8255 73.8849 80.7312 73.9059 cv
80.6369 73.9268 80.574 73.9478 80.5426 73.9897 cv
80.5111 74.0316 80.4902 74.084 80.4902 74.1469 cv
80.4902 74.2202 80.5111 74.3041 80.553 74.4193 cv
80.4168 74.4717 li
79.9767 73.4029 li
79.9767 73.2247 li
84.1159 73.2247 li
84.5351 73.2247 84.7866 73.2142 84.8809 73.2038 cv
84.9752 73.1828 85.0381 73.1514 85.08 73.1095 cv
85.1115 73.0675 85.1324 73.0151 85.1324 72.9523 cv
85.1324 72.8894 85.1115 72.7951 85.0695 72.6693 cv
85.2058 72.6274 li
85.6459 73.6963 li
85.6459 73.8744 li
cp
84.86 73.8744 mo
83.0156 73.8744 li
82.8375 73.8849 82.6803 73.9373 82.5336 74.0107 cv
82.3869 74.0945 82.2716 74.1993 82.1983 74.325 cv
82.1249 74.4508 82.0935 74.5765 82.0935 74.7023 cv
82.0935 74.9328 82.1878 75.1319 82.3974 75.3101 cv
82.6698 75.5511 83.068 75.6664 83.5815 75.6664 cv
84.1159 75.6664 84.5142 75.5511 84.7971 75.331 cv
85.0695 75.1005 85.2163 74.8385 85.2163 74.566 cv
85.2163 74.325 85.0905 74.0945 84.86 73.8744 cv
cp
79.9767 71.4957 mo
79.9767 71.3804 80.0186 71.2861 80.092 71.2127 cv
80.1758 71.1394 80.2701 71.0975 80.3749 71.0975 cv
80.4797 71.0975 80.574 71.1394 80.6578 71.2127 cv
80.7312 71.2861 80.7731 71.3804 80.7731 71.4957 cv
80.7731 71.6005 80.7312 71.6948 80.6578 71.7681 cv
80.574 71.852 80.4797 71.8939 80.3749 71.8939 cv
80.2701 71.8939 80.1758 71.852 80.092 71.7786 cv
80.0186 71.6948 79.9767 71.6005 79.9767 71.4957 cv
cp
81.8525 71.1708 mo
84.7237 71.1708 li
84.9543 71.1708 85.101 71.1498 85.1743 71.1184 cv
85.2477 71.087 85.3001 71.0346 85.342 70.9717 cv
85.3734 70.9088 85.3944 70.7936 85.3944 70.6259 cv
85.5306 70.6259 li
85.5306 72.3654 li
85.3944 72.3654 li
85.3944 72.1873 85.3734 72.072 85.342 72.0091 cv
85.3106 71.9463 85.2477 71.9044 85.1743 71.8624 cv
85.101 71.831 84.9438 71.81 84.7237 71.81 cv
83.351 71.81 li
82.9632 71.81 82.7117 71.831 82.5965 71.852 cv
82.5126 71.8729 82.4498 71.8939 82.4183 71.9358 cv
82.3869 71.9777 82.3659 72.0301 82.3659 72.093 cv
82.3659 72.1663 82.3869 72.2606 82.4288 72.3654 cv
82.2926 72.4178 li
81.8525 71.3385 li
cp
82.6069 69.1379 mo
82.104 68.7187 81.8525 68.3205 81.8525 67.9328 cv
81.8525 67.7441 81.9048 67.5765 81.9992 67.4298 cv
82.0935 67.2935 82.2507 67.1783 82.4812 67.0944 cv
82.6384 67.042 82.8794 67.0106 83.1938 67.0106 cv
84.7237 67.0106 li
84.9543 67.0106 85.101 66.9896 85.1848 66.9582 cv
85.2477 66.9268 85.3001 66.8848 85.342 66.822 cv
85.3734 66.7486 85.3944 66.6333 85.3944 66.4657 cv
85.5306 66.4657 li
85.5306 68.2367 li
85.3944 68.2367 li
85.3944 68.1633 li
85.3944 67.9956 85.363 67.8804 85.321 67.807 cv
85.2686 67.7441 85.1953 67.6917 85.0905 67.6708 cv
85.0486 67.6603 84.9333 67.6603 84.7237 67.6603 cv
83.2567 67.6603 li
82.9318 67.6603 82.7013 67.7022 82.5546 67.7861 cv
82.4078 67.8699 82.3345 68.0061 82.3345 68.2052 cv
82.3345 68.5196 82.5022 68.8235 82.8375 69.1379 cv
84.7237 69.1379 li
84.9648 69.1379 85.1219 69.1169 85.1743 69.0959 cv
85.2477 69.054 85.3106 69.0016 85.342 68.9388 cv
85.3734 68.8759 85.3944 68.7501 85.3944 68.551 cv
85.5306 68.551 li
85.5306 70.322 li
85.3944 70.322 li
85.3944 70.2486 li
85.3944 70.06 85.3525 69.9343 85.2582 69.8714 cv
85.1639 69.8085 84.9857 69.7771 84.7237 69.7771 cv
83.3929 69.7771 li
82.9632 69.7771 82.7013 69.7876 82.6174 69.8085 cv
82.5231 69.8295 82.4602 69.8609 82.4183 69.9028 cv
82.3869 69.9343 82.3659 69.9971 82.3659 70.06 cv
82.3659 70.1334 82.3869 70.2172 82.4288 70.322 cv
82.2926 70.3849 li
81.8525 69.3055 li
81.8525 69.1379 li
cp
84.2312 65.2187 mo
84.1264 65.4387 83.9692 65.6064 83.7806 65.7217 cv
83.592 65.8474 83.3824 65.8998 83.1519 65.8998 cv
82.7956 65.8998 82.4917 65.7636 82.2297 65.5016 cv
81.9782 65.2291 81.8525 64.8938 81.8525 64.4746 cv
81.8525 64.1393 81.9363 63.8354 82.104 63.5839 cv
82.104 62.8294 li
82.104 62.7142 82.104 62.6513 82.1144 62.6408 cv
82.1144 62.6198 82.1249 62.6094 82.1459 62.5989 cv
82.1668 62.5779 82.2087 62.5779 82.2716 62.5779 cv
82.3345 62.5779 82.3869 62.5779 82.4078 62.5884 cv
82.4183 62.5989 82.4288 62.6094 82.4393 62.6303 cv
82.4498 62.6513 82.4498 62.7142 82.4498 62.8294 cv
82.4498 63.301 li
82.6384 63.1543 82.8794 63.0809 83.1728 63.0809 cv
83.5082 63.0809 83.7911 63.2067 84.0216 63.4582 cv
84.2626 63.7202 84.3779 64.0555 84.3779 64.4851 cv
84.3779 64.6633 84.357 64.8414 84.3046 65.03 cv
84.3989 65.1453 84.4932 65.2187 84.5665 65.2606 cv
84.6399 65.3025 84.7028 65.3235 84.7552 65.3235 cv
84.7971 65.3235 84.839 65.3025 84.8809 65.2606 cv
84.9228 65.2187 84.9543 65.1348 84.9752 65.0091 cv
84.9857 64.9357 84.9962 64.7471 84.9962 64.4642 cv
85.0172 63.9193 85.0276 63.5734 85.0486 63.4163 cv
85.0905 63.1752 85.1743 62.9866 85.321 62.8399 cv
85.4678 62.6932 85.6459 62.6198 85.866 62.6198 cv
86.1594 62.6198 86.4318 62.7561 86.6938 63.039 cv
87.0711 63.4372 87.2597 63.9716 87.2597 64.6214 cv
87.2597 65.1244 87.1444 65.554 86.9243 65.8998 cv
86.7881 66.0884 86.6519 66.1932 86.5157 66.1932 cv
86.4528 66.1932 86.3899 66.1723 86.327 66.1513 cv
86.2327 66.0989 86.0965 66.0151 85.9288 65.8789 cv
85.8974 65.8579 85.7612 65.7217 85.4992 65.4806 cv
85.4258 65.6064 85.3525 65.7112 85.2896 65.7636 cv
85.2267 65.816 85.1534 65.8474 85.0695 65.8474 cv
84.9752 65.8474 84.8704 65.8055 84.7447 65.7321 cv
84.6294 65.6588 84.4513 65.4911 84.2312 65.2187 cv
cp
82.0411 64.5375 mo
82.0411 64.7366 82.1144 64.8938 82.2716 65.03 cv
82.4183 65.1558 82.6593 65.2187 82.9737 65.2187 cv
83.3824 65.2187 83.7073 65.1348 83.9273 64.9567 cv
84.1055 64.8205 84.1893 64.6528 84.1893 64.4432 cv
84.1893 64.2441 84.1159 64.0764 83.9692 63.9507 cv
83.8225 63.8249 83.5815 63.7621 83.2671 63.7621 cv
82.8585 63.7621 82.5336 63.8459 82.2926 64.0345 cv
82.1249 64.1603 82.0411 64.3384 82.0411 64.5375 cv
cp
85.5306 65.2606 mo
85.6669 65.3863 85.7926 65.4806 85.9079 65.533 cv
86.0231 65.5959 86.1279 65.6273 86.2222 65.6273 cv
86.348 65.6273 86.4528 65.554 86.5471 65.4073 cv
86.7148 65.1453 86.7881 64.7681 86.7881 64.2755 cv
86.7881 63.804 86.7043 63.4582 86.5471 63.2381 cv
86.3794 63.0181 86.2013 62.9028 86.0127 62.9028 cv
85.8764 62.9028 85.7821 62.9761 85.7297 63.1019 cv
85.6669 63.2381 85.6354 63.5106 85.6249 63.9088 cv
85.604 64.4956 85.583 64.9462 85.5306 65.2606 cv
cp
79.9767 58.9521 mo
84.7237 58.9521 li
84.9543 58.9521 85.101 58.9312 85.1743 58.8998 cv
85.2477 58.8683 85.3001 58.8159 85.342 58.753 cv
85.3734 58.6797 85.3944 58.5539 85.3944 58.3653 cv
85.5306 58.3653 li
85.5306 60.1258 li
85.3944 60.1258 li
85.3944 59.9581 85.3734 59.8534 85.342 59.7905 cv
85.3106 59.7276 85.2477 59.6857 85.1743 59.6438 cv
85.101 59.6123 84.9438 59.6019 84.7237 59.6019 cv
81.4752 59.6019 li
81.077 59.6019 80.8255 59.6019 80.7312 59.6228 cv
80.6369 59.6438 80.574 59.6752 80.5426 59.7171 cv
80.5111 59.7486 80.4902 59.801 80.4902 59.8638 cv
80.4902 59.9372 80.5111 60.021 80.553 60.1258 cv
80.4168 60.1887 li
79.9767 59.1198 li
cp
81.8525 56.2066 mo
81.8525 55.6617 82.0516 55.2321 82.4707 54.9072 cv
82.8165 54.6243 83.2252 54.488 83.6758 54.488 cv
84.0007 54.488 84.3255 54.5614 84.6504 54.7186 cv
84.9752 54.8653 85.2267 55.0749 85.3944 55.3473 cv
85.5621 55.6198 85.6459 55.9237 85.6459 56.2485 cv
85.6459 56.7934 85.4258 57.2126 84.9962 57.5375 cv
84.6399 57.7994 84.2312 57.9357 83.7806 57.9357 cv
83.4558 57.9357 83.1309 57.8518 82.8061 57.6947 cv
82.4812 57.527 82.2402 57.3174 82.083 57.0554 cv
81.9258 56.783 81.8525 56.5 81.8525 56.2066 cv
cp
82.104 56.3324 mo
82.104 56.4686 82.1459 56.6048 82.2297 56.7411 cv
82.3135 56.8878 82.4498 56.9926 82.6593 57.0869 cv
82.8689 57.1707 83.1309 57.2126 83.4558 57.2126 cv
83.9692 57.2126 84.4198 57.1078 84.7971 56.8982 cv
85.1743 56.6887 85.363 56.4162 85.363 56.0809 cv
85.363 55.8294 85.2582 55.6198 85.0486 55.4521 cv
84.8495 55.2949 84.4827 55.2111 83.9797 55.2111 cv
83.3405 55.2111 82.848 55.3473 82.4812 55.6198 cv
82.2297 55.8084 82.104 56.039 82.104 56.3324 cv
cp
81.8525 52.2036 mo
81.8525 51.6692 82.0516 51.229 82.4707 50.9042 cv
82.8165 50.6212 83.2252 50.485 83.6758 50.485 cv
84.0007 50.485 84.3255 50.5584 84.6504 50.7156 cv
84.9752 50.8727 85.2267 51.0823 85.3944 51.3548 cv
85.5621 51.6168 85.6459 51.9207 85.6459 52.2455 cv
85.6459 52.7904 85.4258 53.2201 84.9962 53.5344 cv
84.6399 53.8069 84.2312 53.9326 83.7806 53.9326 cv
83.4558 53.9326 83.1309 53.8593 82.8061 53.6916 cv
82.4812 53.5344 82.2402 53.3144 82.083 53.0524 cv
81.9258 52.7799 81.8525 52.5075 81.8525 52.2036 cv
cp
82.104 52.3293 mo
82.104 52.4656 82.1459 52.6018 82.2297 52.7485 cv
82.3135 52.8847 82.4498 53 82.6593 53.0838 cv
82.8689 53.1677 83.1309 53.2096 83.4558 53.2096 cv
83.9692 53.2096 84.4198 53.1048 84.7971 52.8952 cv
85.1743 52.6961 85.363 52.4237 85.363 52.0778 cv
85.363 51.8263 85.2582 51.6168 85.0486 51.4596 cv
84.8495 51.2919 84.4827 51.2081 83.9797 51.2081 cv
83.3405 51.2081 82.848 51.3443 82.4812 51.6168 cv
82.2297 51.8054 82.104 52.0464 82.104 52.3293 cv
cp
82.3135 50.2126 mo
81.8629 49.1123 li
81.8629 48.9655 li
82.7013 48.9655 li
82.3869 48.7769 82.1668 48.5988 82.0411 48.4101 cv
81.9153 48.2215 81.8525 48.0224 81.8525 47.8233 cv
81.8525 47.4566 81.9887 47.1631 82.2716 46.9221 cv
82.6174 46.6287 83.068 46.482 83.6129 46.482 cv
84.2312 46.482 84.7447 46.6601 85.1429 47.0164 cv
85.4782 47.2994 85.6459 47.6661 85.6459 48.1167 cv
85.6459 48.3054 85.6145 48.473 85.5621 48.6093 cv
85.5201 48.714 85.4468 48.8293 85.3315 48.9655 cv
86.4213 48.9655 li
86.6624 48.9655 86.8196 48.9446 86.8824 48.9236 cv
86.9453 48.8922 86.9977 48.8398 87.0396 48.7664 cv
87.0815 48.6931 87.1025 48.5569 87.1025 48.3577 cv
87.2492 48.3577 li
87.2492 50.2335 li
87.1025 50.2335 li
87.1025 50.1392 li
87.1025 49.9925 87.0711 49.8668 87.0187 49.7724 cv
86.9872 49.72 86.9453 49.6781 86.8824 49.6572 cv
86.8196 49.6257 86.6519 49.6152 86.3899 49.6152 cv
83.0156 49.6152 li
82.7746 49.6152 82.6279 49.6257 82.565 49.6467 cv
82.5022 49.6676 82.4602 49.6991 82.4288 49.741 cv
82.3974 49.7934 82.3869 49.8563 82.3869 49.9296 cv
82.3869 49.9925 82.3974 50.0763 82.4393 50.1706 cv
cp
82.9318 48.9655 mo
84.2731 48.9655 li
84.5561 48.9655 84.7447 48.9551 84.839 48.9341 cv
84.9857 48.8922 85.1219 48.8084 85.2372 48.6616 cv
85.3525 48.5149 85.4049 48.3368 85.4049 48.1272 cv
85.4049 47.8652 85.3106 47.6557 85.101 47.488 cv
84.839 47.2784 84.4618 47.1736 83.9797 47.1736 cv
83.4348 47.1736 83.0156 47.2994 82.7222 47.5404 cv
82.5231 47.6976 82.4183 47.8967 82.4183 48.1272 cv
82.4183 48.253 82.4498 48.3787 82.5126 48.5045 cv
82.5546 48.5988 82.7013 48.7455 82.9318 48.9655 cv
cp
82.5755 42.982 mo
82.0935 42.6257 81.8525 42.2589 81.8525 41.8607 cv
81.8525 41.4939 82.0096 41.1691 82.324 40.8966 cv
82.6384 40.6242 83.068 40.4879 83.6129 40.4879 cv
84.2417 40.4879 84.7552 40.6975 85.1429 41.1167 cv
85.4782 41.4835 85.6459 41.8817 85.6459 42.3323 cv
85.6459 42.5418 85.604 42.7514 85.5306 42.961 cv
85.4573 43.1811 85.342 43.4011 85.1953 43.6212 cv
81.4857 43.6212 li
81.077 43.6212 80.8255 43.6317 80.7312 43.6526 cv
80.6369 43.6736 80.574 43.705 80.5426 43.7469 cv
80.5111 43.7889 80.4902 43.8413 80.4902 43.8936 cv
80.4902 43.967 80.5111 44.0613 80.553 44.1766 cv
80.4168 44.229 li
79.9767 43.1496 li
79.9767 42.982 li
cp
82.827 42.982 mo
84.9648 42.982 li
85.0905 42.8457 85.1953 42.7095 85.2582 42.5628 cv
85.321 42.4266 85.363 42.2799 85.363 42.1332 cv
85.363 41.8921 85.2267 41.6721 84.9648 41.4625 cv
84.7028 41.2634 84.3255 41.1586 83.833 41.1586 cv
83.3719 41.1586 83.0156 41.2634 82.7746 41.4625 cv
82.5336 41.6721 82.4078 41.9026 82.4078 42.1646 cv
82.4078 42.3008 82.4393 42.437 82.5126 42.5838 cv
82.565 42.6781 82.6698 42.8143 82.827 42.982 cv
f
26.5541 109.944 mo
26.837 110.31 27.0047 110.541 27.0466 110.635 cv
27.1095 110.771 27.1409 110.929 27.1409 111.086 cv
27.1409 111.327 27.0571 111.536 26.8894 111.694 cv
26.7218 111.851 26.5017 111.935 26.2188 111.935 cv
26.0511 111.935 25.8939 111.893 25.7682 111.819 cv
25.59 111.715 25.4224 111.526 25.2652 111.264 cv
25.108 110.992 24.9194 110.562 24.6993 109.944 cv
24.5526 109.944 li
24.1963 109.944 23.9553 109.996 23.8191 110.111 cv
23.6933 110.227 23.62 110.394 23.62 110.604 cv
23.62 110.771 23.6723 110.897 23.7562 111.002 cv
23.8505 111.096 23.9448 111.149 24.0601 111.149 cv
24.2906 111.138 li
24.4059 111.138 24.5002 111.17 24.5631 111.233 cv
24.6259 111.295 24.6679 111.369 24.6679 111.474 cv
24.6679 111.568 24.6259 111.641 24.5631 111.704 cv
24.4897 111.767 24.4059 111.798 24.2801 111.798 cv
24.0601 111.798 23.8505 111.683 23.6619 111.453 cv
23.4837 111.222 23.3894 110.908 23.3894 110.489 cv
23.3894 110.174 23.4418 109.912 23.5466 109.713 cv
23.6304 109.556 23.7562 109.441 23.9238 109.367 cv
24.0391 109.325 24.2697 109.294 24.6155 109.294 cv
25.831 109.294 li
26.1664 109.294 26.376 109.294 26.4493 109.283 cv
26.5331 109.262 26.5855 109.241 26.6065 109.21 cv
26.6379 109.189 26.6484 109.147 26.6484 109.116 cv
26.6484 109.074 26.6379 109.032 26.617 109 cv
26.5855 108.948 26.4912 108.843 26.334 108.686 cv
26.5541 108.686 li
26.9418 108.98 27.1409 109.252 27.1409 109.524 cv
27.1409 109.65 27.099 109.744 27.0047 109.828 cv
26.9209 109.902 26.7637 109.944 26.5541 109.944 cv
cp
26.3026 109.944 mo
24.9403 109.944 li
25.0975 110.331 25.2023 110.593 25.2652 110.709 cv
25.3804 110.908 25.5062 111.054 25.6319 111.149 cv
25.7577 111.233 25.8939 111.274 26.0406 111.274 cv
26.2293 111.274 26.376 111.222 26.5017 111.107 cv
26.6275 111.002 26.6903 110.866 26.6903 110.719 cv
26.6903 110.53 26.5646 110.268 26.3026 109.944 cv
f
24.1125 87.7593 mo
23.6304 87.4135 23.3894 87.0362 23.3894 86.638 cv
23.3894 86.2712 23.5466 85.9464 23.861 85.6739 cv
24.1753 85.4015 24.5945 85.2652 25.1394 85.2652 cv
25.7787 85.2652 26.2921 85.4748 26.6799 85.894 cv
27.0152 86.2608 27.1829 86.659 27.1829 87.1096 cv
27.1829 87.3192 27.1409 87.5287 27.0676 87.7383 cv
26.9942 87.9584 26.879 88.1784 26.7218 88.3985 cv
23.0226 88.3985 li
22.614 88.3985 22.3625 88.409 22.2681 88.4299 cv
22.1738 88.4509 22.111 88.4823 22.0795 88.5243 cv
22.0481 88.5662 22.0271 88.6186 22.0271 88.6814 cv
22.0271 88.7443 22.0481 88.8386 22.09 88.9539 cv
21.9538 89.0063 li
21.5136 87.9269 li
21.5136 87.7593 li
cp
24.3535 87.7593 mo
26.5017 87.7593 li
26.6275 87.623 26.7323 87.4868 26.7951 87.3401 cv
26.858 87.2039 26.8894 87.0572 26.8894 86.9105 cv
26.8894 86.6694 26.7637 86.4494 26.5017 86.2503 cv
26.2397 86.0407 25.8625 85.9359 25.37 85.9359 cv
24.9089 85.9359 24.5526 86.0407 24.3116 86.2503 cv
24.0601 86.4494 23.9448 86.6799 23.9448 86.9419 cv
23.9448 87.0781 23.9762 87.2144 24.0496 87.3611 cv
24.102 87.4554 24.2068 87.5916 24.3535 87.7593 cv
f
25.6319 62.4627 mo
26.1035 62.557 26.4703 62.7456 26.7218 63.0285 cv
26.9837 63.3115 27.1095 63.6258 27.1095 63.9612 cv
27.1095 64.3699 26.9314 64.7262 26.596 65.0196 cv
26.2502 65.3235 25.7891 65.4807 25.2128 65.4807 cv
24.6469 65.4807 24.1963 65.313 23.84 64.9777 cv
23.4942 64.6423 23.3161 64.2441 23.3161 63.7726 cv
23.3161 63.4163 23.4104 63.1333 23.5885 62.9028 cv
23.7771 62.6722 23.9762 62.5675 24.1753 62.5675 cv
24.2697 62.5675 24.3535 62.5989 24.4164 62.6618 cv
24.4792 62.7246 24.5002 62.8085 24.5002 62.9237 cv
24.5002 63.0809 24.4583 63.1962 24.3535 63.2696 cv
24.3011 63.322 24.1963 63.3429 24.0391 63.3639 cv
23.8924 63.3744 23.7771 63.4267 23.6933 63.5211 cv
23.6095 63.6154 23.578 63.7411 23.578 63.8983 cv
23.578 64.1603 23.6723 64.3699 23.861 64.5271 cv
24.1229 64.7366 24.4583 64.8414 24.8774 64.8414 cv
25.3071 64.8414 25.6843 64.7366 26.0092 64.5271 cv
26.334 64.3175 26.5017 64.0345 26.4912 63.6782 cv
26.5017 63.4267 26.4074 63.1962 26.2397 62.9971 cv
26.114 62.8504 25.8939 62.7142 25.5795 62.5779 cv
f
66.2386 114.198 mo
66.5215 114.565 66.6787 114.795 66.7311 114.89 cv
66.7939 115.026 66.8254 115.173 66.8254 115.33 cv
66.8254 115.581 66.7415 115.791 66.5739 115.948 cv
66.4062 116.105 66.1757 116.189 65.9032 116.189 cv
65.7251 116.189 65.5784 116.147 65.4526 116.074 cv
65.2745 115.959 65.1068 115.78 64.9496 115.508 cv
64.7924 115.246 64.6038 114.806 64.3837 114.198 cv
64.237 114.198 li
63.8808 114.198 63.6397 114.25 63.5035 114.366 cv
63.3673 114.481 63.3044 114.638 63.3044 114.858 cv
63.3044 115.026 63.3463 115.152 63.4406 115.246 cv
63.5245 115.351 63.6293 115.393 63.7445 115.393 cv
63.9646 115.393 li
64.0903 115.393 64.1846 115.424 64.2475 115.477 cv
64.3104 115.539 64.3418 115.623 64.3418 115.718 cv
64.3418 115.822 64.3104 115.896 64.2475 115.959 cv
64.1742 116.021 64.0798 116.053 63.9646 116.053 cv
63.7445 116.053 63.5349 115.938 63.3463 115.707 cv
63.1577 115.477 63.0634 115.152 63.0634 114.743 cv
63.0634 114.418 63.1158 114.167 63.231 113.957 cv
63.3044 113.81 63.4301 113.695 63.6083 113.622 cv
63.7131 113.569 63.9436 113.548 64.2894 113.548 cv
65.505 113.548 li
65.8508 113.548 66.0604 113.538 66.1338 113.527 cv
66.2071 113.517 66.2595 113.496 66.2909 113.465 cv
66.3119 113.433 66.3329 113.402 66.3329 113.36 cv
66.3329 113.318 66.3224 113.286 66.3014 113.255 cv
66.27 113.203 66.1757 113.098 66.0185 112.941 cv
66.2386 112.941 li
66.6263 113.224 66.8149 113.506 66.8149 113.768 cv
66.8149 113.905 66.773 113.999 66.6892 114.072 cv
66.5948 114.156 66.4481 114.188 66.2386 114.198 cv
cp
65.9766 114.198 mo
64.6143 114.198 li
64.7715 114.586 64.8867 114.837 64.9496 114.953 cv
65.0649 115.162 65.1802 115.309 65.3059 115.393 cv
65.4317 115.487 65.5679 115.529 65.7146 115.529 cv
65.9032 115.529 66.0604 115.477 66.1862 115.361 cv
66.3119 115.246 66.3748 115.12 66.3748 114.974 cv
66.3748 114.774 66.2386 114.512 65.9766 114.198 cv
f
63.7864 89.7293 mo
63.3044 89.3835 63.0634 89.0063 63.0634 88.6081 cv
63.0634 88.2413 63.2206 87.9269 63.5349 87.6545 cv
63.8493 87.3715 64.279 87.2353 64.8239 87.2353 cv
65.4631 87.2353 65.9766 87.4554 66.3643 87.8745 cv
66.6892 88.2308 66.8568 88.6395 66.8568 89.0796 cv
66.8568 89.2892 66.8254 89.4988 66.7415 89.7189 cv
66.6682 89.9284 66.5529 90.1485 66.4062 90.379 cv
62.6966 90.379 li
62.2984 90.379 62.0469 90.3895 61.9526 90.4 cv
61.8583 90.421 61.7954 90.4524 61.7535 90.4943 cv
61.722 90.5362 61.7116 90.5886 61.7116 90.6515 cv
61.7116 90.7249 61.7325 90.8192 61.7744 90.924 cv
61.6277 90.9764 li
61.1981 89.9075 li
61.1981 89.7293 li
cp
64.0379 89.7293 mo
66.1757 89.7293 li
66.3119 89.6036 66.4062 89.4569 66.4796 89.3207 cv
66.5424 89.1739 66.5739 89.0272 66.5739 88.8805 cv
66.5739 88.65 66.4481 88.4299 66.1862 88.2203 cv
65.9242 88.0212 65.5469 87.9165 65.0439 87.9165 cv
64.5933 87.9165 64.237 88.0212 63.9855 88.2203 cv
63.7445 88.4299 63.6188 88.6605 63.6188 88.9224 cv
63.6188 89.0587 63.6607 89.1949 63.7236 89.3311 cv
63.776 89.4359 63.8807 89.5722 64.0379 89.7293 cv
f
65.3164 14.2796 mo
65.7879 14.3739 66.1547 14.5626 66.4062 14.8455 cv
66.6577 15.1284 66.7835 15.4323 66.7835 15.7782 cv
66.7835 16.1868 66.6158 16.5326 66.27 16.8365 cv
65.9347 17.1404 65.4736 17.2976 64.8972 17.2976 cv
64.3314 17.2976 63.8703 17.13 63.5245 16.7946 cv
63.1682 16.4593 62.99 16.0506 62.99 15.5895 cv
62.99 15.2332 63.0843 14.9503 63.273 14.7198 cv
63.4616 14.4892 63.6502 14.3739 63.8493 14.3739 cv
63.9541 14.3739 64.0275 14.4054 64.0903 14.4787 cv
64.1532 14.5416 64.1846 14.6255 64.1846 14.7407 cv
64.1846 14.8979 64.1322 15.0132 64.0379 15.0865 cv
63.9855 15.1389 63.8807 15.1599 63.7236 15.1808 cv
63.5664 15.1913 63.4511 15.2437 63.3778 15.338 cv
63.2939 15.4219 63.252 15.5581 63.252 15.7153 cv
63.252 15.9773 63.3568 16.1868 63.5454 16.344 cv
63.7969 16.5536 64.1322 16.6584 64.5514 16.6584 cv
64.9811 16.6584 65.3583 16.5536 65.6832 16.344 cv
66.0185 16.1344 66.1757 15.8515 66.1757 15.4952 cv
66.1757 15.2437 66.0918 15.0132 65.9137 14.8036 cv
65.7984 14.6674 65.5784 14.5207 65.264 14.3949 cv
f
63.6397 39.0105 mo
63.1577 38.6647 62.9167 38.2875 62.9167 37.8893 cv
62.9167 37.5225 63.0739 37.1977 63.3882 36.9252 cv
63.7026 36.6527 64.1323 36.5165 64.6772 36.5165 cv
65.3164 36.5165 65.8299 36.7261 66.2176 37.1557 cv
66.5425 37.512 66.7101 37.9207 66.7101 38.3608 cv
66.7101 38.5704 66.6787 38.78 66.6053 39.0001 cv
66.5215 39.2096 66.4167 39.4297 66.2595 39.6603 cv
62.5499 39.6603 li
62.1517 39.6603 61.9002 39.6603 61.8059 39.6812 cv
61.7116 39.7022 61.6487 39.7336 61.6173 39.7755 cv
61.5754 39.8174 61.5649 39.8698 61.5649 39.9327 cv
61.5649 40.0061 61.5858 40.1004 61.6277 40.2052 cv
61.4915 40.2576 li
61.0514 39.1887 li
61.0514 39.0105 li
cp
63.8912 39.0105 mo
66.0395 39.0105 li
66.1652 38.8743 66.2595 38.7381 66.3329 38.6019 cv
66.3957 38.4552 66.4272 38.3084 66.4272 38.1617 cv
66.4272 37.9312 66.3014 37.7007 66.0395 37.5016 cv
65.7775 37.292 65.4002 37.1977 64.8972 37.1977 cv
64.4466 37.1977 64.0903 37.292 63.8493 37.5016 cv
63.5978 37.7007 63.4721 37.9417 63.4721 38.2037 cv
63.4721 38.3399 63.514 38.4761 63.5769 38.6123 cv
63.6293 38.7171 63.7341 38.8534 63.8912 39.0105 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
