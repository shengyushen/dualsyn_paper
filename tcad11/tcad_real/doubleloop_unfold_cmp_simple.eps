%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: doubleloop_unfold_cmp_simple.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: Administrator
%%CreationDate: 2011-2-14, 9:32:03
%%BoundingBox: -52 51 90 141
%%HiResBoundingBox: -51.5607 51.5607 89.0553 140.6160
%%CropBox: -51.5607 51.5607 89.0553 140.6160
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1136 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:CreatorTool="Acrobat PDFMaker 9.0 Visio 版"
   xmp:ModifyDate="2011-02-14T09:31:44+08:00"
   xmp:CreateDate="2011-02-14T09:31:42+08:00"
   xmp:MetadataDate="2011-02-14T09:31:44+08:00"
   pdf:Producer="Acrobat Distiller 9.0.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:2fbcad3a-e69d-49bc-bd5c-892c23270b61"
   xmpMM:InstanceID="uuid:8e2ae835-35cf-4a43-b081-d29d8600d8af"
   pdfx:Company="super">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>FtpDown</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -140.616 translate
pgsv
[0 1 -1 0 89.0553 0 ]ct
gsave
np
gsave
0 0 mo
0 140.616 li
89.0553 140.616 li
89.0553 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.719916 lw
1 lc
1 lj
10 ml
[2.15975 2.15975 ] 0 dsh
false sadj
19.5017 121.89 mo
19.5017 56.783 li
false sop
.750179 .679652 .670191 .901488 cmyk
@
16.2636 57.4327 mo
19.5016 54.1946 li
22.7397 57.4327 li
16.2636 57.4327 li
ef
[] 0 dsh
16.9238 102.063 mo
16.6932 102.074 16.4732 102.074 16.2426 102.074 cv
5.01949 102.021 4.14973 93.2818 4.7156 86.2293 cv
5.28147 79.1664 7.29347 73.8116 19.5016 73.7906 cv
@
16.6723 98.7728 mo
19.5016 102.378 li
15.8968 105.207 li
16.6723 98.7728 li
ef
11.3175 90.1904 mo
10.9926 90.1904 li
10.9926 85.9778 li
11.3175 85.9778 li
cp
10.9926 90.1904 mo
cp
12.5854 90.1904 mo
12.2711 90.1904 li
12.2711 85.9778 li
12.5854 85.9778 li
cp
f
[2.15975 2.15975 ] 0 dsh
58.5154 123.629 mo
58.5154 7.17479 li
@
55.2774 7.82449 mo
58.5154 4.58646 li
61.7535 7.82449 li
55.2774 7.82449 li
ef
1.19986 lw
[.00122256 3.59975 ] 0 dsh
51.6307 70.563 mo
51.6307 52.8744 li
@
.719916 lw
[] 0 dsh
55.9481 52.4656 mo
55.7175 52.4656 55.487 52.4656 55.2669 52.4656 cv
44.0333 52.4237 43.1635 43.6736 43.7294 36.6316 cv
44.3057 29.5687 46.3177 24.2139 58.5154 24.1929 cv
@
55.6861 49.1751 mo
58.5154 52.7695 li
54.9106 55.6093 li
55.6861 49.1751 li
ef
50.3312 40.5824 mo
50.0169 40.5824 li
50.0169 36.3698 li
50.3312 36.3698 li
cp
50.0169 40.5824 mo
cp
51.6097 40.5824 mo
51.2848 40.5824 li
51.2848 36.3698 li
51.6097 36.3698 li
cp
f
55.9481 102.063 mo
55.7175 102.074 55.487 102.074 55.2669 102.074 cv
44.0333 102.021 43.1635 93.2818 43.7294 86.2293 cv
44.3057 79.1664 46.3177 73.8116 58.5154 73.7906 cv
@
55.6861 98.7728 mo
58.5154 102.378 li
54.9106 105.207 li
55.6861 98.7728 li
ef
50.3312 90.1904 mo
50.0169 90.1904 li
50.0169 85.9778 li
50.3312 85.9778 li
cp
50.0169 90.1904 mo
cp
51.6097 90.1904 mo
51.2848 90.1904 li
51.2848 85.9778 li
51.6097 85.9778 li
cp
f
36.5198 129.173 mo
36.8027 129.54 36.9599 129.77 37.0123 129.864 cv
37.0752 130.011 37.1066 130.158 37.1066 130.315 cv
37.1066 130.566 37.0228 130.766 36.8551 130.923 cv
36.6874 131.09 36.4569 131.164 36.1844 131.164 cv
36.0063 131.164 35.8596 131.132 35.7338 131.049 cv
35.5557 130.944 35.388 130.755 35.2308 130.493 cv
35.0736 130.231 34.885 129.791 34.665 129.173 cv
34.5182 129.173 li
34.162 129.173 33.9209 129.236 33.7847 129.34 cv
33.6485 129.456 33.5856 129.623 33.5856 129.843 cv
33.5856 130.001 33.6275 130.137 33.7218 130.231 cv
33.8057 130.325 33.9105 130.378 34.0257 130.378 cv
34.2458 130.367 li
34.3715 130.367 34.4659 130.399 34.5287 130.462 cv
34.5916 130.525 34.623 130.608 34.623 130.703 cv
34.623 130.797 34.5916 130.881 34.5287 130.944 cv
34.4554 130.996 34.3611 131.028 34.2458 131.028 cv
34.0257 131.028 33.8161 130.912 33.6275 130.682 cv
33.4389 130.462 33.3446 130.137 33.3446 129.718 cv
33.3446 129.403 33.397 129.141 33.5122 128.942 cv
33.5856 128.785 33.7114 128.67 33.8895 128.596 cv
34.0048 128.555 34.2248 128.534 34.5706 128.534 cv
35.7862 128.534 li
36.132 128.534 36.3416 128.523 36.415 128.513 cv
36.4988 128.502 36.5407 128.481 36.5722 128.45 cv
36.5931 128.418 36.6141 128.387 36.6141 128.345 cv
36.6141 128.303 36.6036 128.261 36.5826 128.23 cv
36.5512 128.177 36.4569 128.072 36.2997 127.915 cv
36.5198 127.915 li
36.9075 128.209 37.1066 128.492 37.1066 128.754 cv
37.1066 128.879 37.0542 128.984 36.9704 129.057 cv
36.876 129.131 36.7293 129.173 36.5198 129.173 cv
cp
36.2578 129.173 mo
34.8955 129.173 li
35.0527 129.571 35.1679 129.822 35.2308 129.938 cv
35.3461 130.147 35.4614 130.294 35.5871 130.378 cv
35.7129 130.462 35.8491 130.514 35.9958 130.514 cv
36.1844 130.514 36.3416 130.451 36.4674 130.346 cv
36.5931 130.231 36.656 130.105 36.656 129.959 cv
36.656 129.76 36.5198 129.498 36.2578 129.173 cv
f
31.6365 127.727 mo
31.4793 127.727 li
31.6679 127.328 31.8985 126.993 32.1709 126.731 cv
32.5482 126.364 32.9988 126.071 33.5018 125.872 cv
34.0152 125.673 34.5497 125.568 35.1051 125.568 cv
35.912 125.568 36.6455 125.767 37.3162 126.165 cv
37.9763 126.563 38.4584 127.077 38.7413 127.727 cv
38.5946 127.727 li
38.4165 127.402 38.1754 127.14 37.8716 126.93 cv
37.5677 126.721 37.1695 126.574 36.6979 126.469 cv
36.2263 126.375 35.7338 126.322 35.2203 126.322 cv
34.6649 126.322 34.1619 126.364 33.7009 126.448 cv
33.3446 126.511 33.0616 126.595 32.8416 126.689 cv
32.6215 126.794 32.4119 126.92 32.2128 127.077 cv
32.0137 127.245 31.8251 127.454 31.6365 127.727 cv
f
31.7308 118.61 mo
32.9778 118.547 li
32.9778 118.704 li
32.7577 118.725 32.6006 118.767 32.5062 118.819 cv
32.3595 118.893 32.2443 119.008 32.1709 119.134 cv
32.108 119.27 32.0661 119.448 32.0661 119.668 cv
32.0661 120.412 li
36.1111 120.412 li
36.4359 120.412 36.6455 120.381 36.7189 120.307 cv
36.8341 120.213 36.8865 120.056 36.8865 119.857 cv
36.8865 119.668 li
37.0332 119.668 li
37.0332 121.911 li
36.8865 121.911 li
36.8865 121.722 li
36.8865 121.502 36.8236 121.345 36.6874 121.251 cv
36.6036 121.188 36.415 121.167 36.1111 121.167 cv
32.0661 121.167 li
32.0661 121.806 li
32.0661 122.047 32.0871 122.225 32.1185 122.33 cv
32.1709 122.466 32.2652 122.581 32.4119 122.676 cv
32.5482 122.77 32.7368 122.833 32.9778 122.843 cv
32.9778 123.001 li
31.7308 122.938 li
cp
31.4793 117.048 mo
34.0991 117.048 li
33.7742 116.765 33.5751 116.535 33.4808 116.367 cv
33.397 116.189 33.3446 116.021 33.3446 115.854 cv
33.3446 115.655 33.4074 115.477 33.5122 115.33 cv
33.6275 115.183 33.8057 115.078 34.0467 115.005 cv
34.2143 114.963 34.5182 114.932 34.9584 114.932 cv
36.2263 114.932 li
36.4464 114.932 36.6036 114.911 36.6874 114.879 cv
36.7503 114.858 36.8027 114.806 36.8341 114.743 cv
36.876 114.68 36.8865 114.565 36.8865 114.408 cv
37.0332 114.408 li
37.0332 116.158 li
36.8865 116.158 li
36.8865 116.074 li
36.8865 115.917 36.8656 115.791 36.8132 115.728 cv
36.7608 115.665 36.6874 115.623 36.5931 115.592 cv
36.5512 115.581 36.4254 115.581 36.2263 115.581 cv
34.9584 115.581 li
34.5706 115.581 34.3087 115.602 34.1934 115.644 cv
34.0676 115.686 33.9733 115.749 33.9104 115.833 cv
33.8476 115.927 33.8161 116.032 33.8161 116.158 cv
33.8161 116.283 33.8581 116.42 33.9209 116.556 cv
33.9943 116.692 34.1305 116.86 34.3296 117.048 cv
36.2263 117.048 li
36.4674 117.048 36.6245 117.038 36.6769 117.007 cv
36.7398 116.986 36.7922 116.933 36.8341 116.86 cv
36.876 116.786 36.8865 116.65 36.8865 116.472 cv
37.0332 116.472 li
37.0332 118.243 li
36.8865 118.243 li
36.8865 118.086 36.8656 117.96 36.8132 117.876 cv
36.7922 117.824 36.7398 117.782 36.6665 117.751 cv
36.5931 117.719 36.4464 117.698 36.2263 117.698 cv
32.9883 117.698 li
32.5796 117.698 32.3281 117.709 32.2338 117.73 cv
32.1395 117.751 32.0766 117.782 32.0452 117.824 cv
32.0032 117.855 31.9928 117.908 31.9928 117.981 cv
31.9928 118.033 32.0137 118.128 32.0556 118.243 cv
31.9194 118.306 li
31.4793 117.227 li
cp
34.8012 113.496 mo
35.3356 113.506 35.7548 113.37 36.0482 113.119 cv
36.3521 112.857 36.5093 112.542 36.5093 112.197 cv
36.5093 111.966 36.4359 111.756 36.3102 111.589 cv
36.1844 111.411 35.9644 111.264 35.65 111.149 cv
35.7233 111.023 li
36.0796 111.086 36.4045 111.243 36.6979 111.505 cv
36.9913 111.767 37.138 112.092 37.138 112.49 cv
37.138 112.92 36.9704 113.286 36.635 113.601 cv
36.3102 113.905 35.8596 114.051 35.2937 114.051 cv
34.6754 114.051 34.2039 113.894 33.8581 113.58 cv
33.5122 113.265 33.3446 112.878 33.3446 112.406 cv
33.3446 111.997 33.4808 111.673 33.7428 111.411 cv
34.0048 111.159 34.361 111.023 34.8012 111.023 cv
cp
34.5706 113.496 mo
34.5706 111.84 li
34.3506 111.861 34.1829 111.882 34.0886 111.924 cv
33.9419 111.987 33.8266 112.092 33.7428 112.218 cv
33.6589 112.343 33.617 112.48 33.617 112.626 cv
33.617 112.836 33.7113 113.035 33.879 113.203 cv
34.0467 113.37 34.2772 113.475 34.5706 113.496 cv
cp
33.3446 106.244 mo
34.5706 106.244 li
34.5706 106.37 li
34.1829 106.465 33.9209 106.59 33.7847 106.747 cv
33.6485 106.905 33.5751 107.104 33.5751 107.345 cv
33.5751 107.523 33.6275 107.67 33.7218 107.785 cv
33.8161 107.89 33.9314 107.953 34.0467 107.953 cv
34.1934 107.953 34.3191 107.911 34.4239 107.827 cv
34.5287 107.743 34.644 107.575 34.7593 107.334 cv
35.0317 106.758 li
35.2937 106.234 35.629 105.972 36.0587 105.972 cv
36.3835 105.972 36.6455 106.098 36.8446 106.339 cv
37.0437 106.59 37.138 106.863 37.138 107.167 cv
37.138 107.387 37.1066 107.638 37.0227 107.911 cv
37.0018 108.005 36.9808 108.068 36.9808 108.131 cv
36.9808 108.183 37.0227 108.235 37.0856 108.267 cv
37.0856 108.393 li
35.8072 108.393 li
35.8072 108.267 li
36.1739 108.194 36.4464 108.057 36.635 107.848 cv
36.8236 107.638 36.9075 107.408 36.9075 107.156 cv
36.9075 106.978 36.8551 106.831 36.7503 106.716 cv
36.6455 106.601 36.5197 106.548 36.373 106.548 cv
36.1949 106.548 36.0377 106.611 35.9224 106.737 cv
35.7967 106.863 35.6395 107.114 35.4509 107.491 cv
35.2623 107.869 35.0946 108.12 34.9479 108.235 cv
34.8012 108.351 34.6125 108.414 34.382 108.414 cv
34.0886 108.414 33.8476 108.309 33.6485 108.11 cv
33.4494 107.911 33.3446 107.649 33.3446 107.324 cv
33.3446 107.188 33.376 107.009 33.4389 106.81 cv
33.4808 106.685 33.5018 106.59 33.5018 106.548 cv
33.5018 106.506 33.4913 106.475 33.4703 106.454 cv
33.4494 106.423 33.4074 106.402 33.3446 106.37 cv
cp
32.2757 104.4 mo
33.4494 104.4 li
33.4494 103.562 li
33.7323 103.562 li
33.7323 104.4 li
36.0482 104.4 li
36.2787 104.4 36.4359 104.369 36.5197 104.295 cv
36.5931 104.232 36.635 104.149 36.635 104.044 cv
36.635 103.96 36.6141 103.876 36.5617 103.792 cv
36.5093 103.709 36.4254 103.656 36.3206 103.604 cv
36.3206 103.457 li
36.5721 103.541 36.7712 103.677 36.897 103.845 cv
37.0227 104.012 37.0856 104.18 37.0856 104.358 cv
37.0856 104.473 37.0542 104.589 36.9913 104.704 cv
36.9284 104.819 36.8341 104.903 36.7084 104.966 cv
36.5826 105.018 36.394 105.039 36.132 105.039 cv
33.7323 105.039 li
33.7323 105.616 li
33.5961 105.616 li
33.5437 105.469 33.4494 105.322 33.3027 105.176 cv
33.1664 105.018 33.0092 104.893 32.8206 104.767 cv
32.7263 104.715 32.5377 104.631 32.2757 104.526 cv
cp
36.5197 101.194 mo
36.8027 101.56 36.9599 101.791 37.0123 101.885 cv
37.0751 102.021 37.1066 102.168 37.1066 102.325 cv
37.1066 102.577 37.0227 102.776 36.8551 102.944 cv
36.6874 103.101 36.4569 103.185 36.1844 103.185 cv
36.0063 103.185 35.8596 103.143 35.7338 103.059 cv
35.5557 102.954 35.388 102.776 35.2308 102.503 cv
35.0736 102.241 34.885 101.801 34.6649 101.194 cv
34.5182 101.194 li
34.1619 101.194 33.9209 101.246 33.7847 101.361 cv
33.6485 101.476 33.5856 101.634 33.5856 101.854 cv
33.5856 102.021 33.6275 102.147 33.7218 102.241 cv
33.8057 102.346 33.9104 102.388 34.0257 102.388 cv
34.2458 102.388 li
34.3715 102.388 34.4658 102.42 34.5287 102.472 cv
34.5916 102.535 34.623 102.619 34.623 102.713 cv
34.623 102.818 34.5916 102.891 34.5287 102.954 cv
34.4554 103.017 34.361 103.048 34.2458 103.048 cv
34.0257 103.048 33.8161 102.933 33.6275 102.703 cv
33.4389 102.472 33.3446 102.147 33.3446 101.738 cv
33.3446 101.414 33.397 101.162 33.5122 100.952 cv
33.5856 100.806 33.7113 100.691 33.8895 100.617 cv
34.0048 100.565 34.2248 100.544 34.5706 100.544 cv
35.7862 100.544 li
36.132 100.544 36.3416 100.533 36.415 100.523 cv
36.4988 100.512 36.5407 100.491 36.5721 100.46 cv
36.5931 100.429 36.6141 100.397 36.6141 100.355 cv
36.6141 100.313 36.6036 100.282 36.5826 100.25 cv
36.5512 100.198 36.4569 100.083 36.2997 99.936 cv
36.5197 99.936 li
36.9075 100.219 37.1066 100.502 37.1066 100.764 cv
37.1066 100.89 37.0542 100.994 36.9704 101.068 cv
36.876 101.152 36.7293 101.183 36.5197 101.194 cv
cp
36.2578 101.194 mo
34.8955 101.194 li
35.0527 101.581 35.1679 101.833 35.2308 101.948 cv
35.3461 102.158 35.4614 102.304 35.5871 102.388 cv
35.7129 102.482 35.8491 102.524 35.9958 102.524 cv
36.1844 102.524 36.3416 102.472 36.4674 102.357 cv
36.5931 102.241 36.656 102.116 36.656 101.969 cv
36.656 101.77 36.5197 101.508 36.2578 101.194 cv
cp
32.2757 98.6261 mo
33.4494 98.6261 li
33.4494 97.7878 li
33.7323 97.7878 li
33.7323 98.6261 li
36.0482 98.6261 li
36.2787 98.6261 36.4359 98.5947 36.5197 98.5318 cv
36.5931 98.4585 36.635 98.3746 36.635 98.2698 cv
36.635 98.186 36.6141 98.1022 36.5617 98.0183 cv
36.5093 97.945 36.4254 97.8821 36.3206 97.8297 cv
36.3206 97.683 li
36.5721 97.7773 36.7712 97.9031 36.897 98.0707 cv
37.0227 98.2384 37.0856 98.4061 37.0856 98.5842 cv
37.0856 98.6995 37.0542 98.8252 36.9913 98.9405 cv
36.9284 99.0453 36.8341 99.1396 36.7084 99.192 cv
36.5826 99.2444 36.394 99.2758 36.132 99.2758 cv
33.7323 99.2758 li
33.7323 99.8417 li
33.5961 99.8417 li
33.5437 99.695 33.4494 99.5483 33.3027 99.4016 cv
33.1664 99.2444 33.0092 99.1186 32.8206 98.9929 cv
32.7263 98.9405 32.5377 98.8567 32.2757 98.7519 cv
cp
34.8012 96.8447 mo
35.3356 96.8447 35.7548 96.7189 36.0482 96.4569 cv
36.3521 96.195 36.5093 95.8911 36.5093 95.5348 cv
36.5093 95.3042 36.4359 95.0947 36.3102 94.927 cv
36.1844 94.7488 35.9644 94.6126 35.65 94.4869 cv
35.7233 94.3716 li
36.0796 94.424 36.4045 94.5812 36.6979 94.8432 cv
36.9913 95.1051 37.138 95.4405 37.138 95.8387 cv
37.138 96.2683 36.9704 96.6351 36.635 96.939 cv
36.3102 97.2429 35.8596 97.4001 35.2937 97.4001 cv
34.6754 97.4001 34.2039 97.2429 33.8581 96.9285 cv
33.5122 96.6141 33.3446 96.2159 33.3446 95.7444 cv
33.3446 95.3462 33.4808 95.0108 33.7428 94.7593 cv
34.0048 94.4974 34.361 94.3716 34.8012 94.3716 cv
cp
34.5706 96.8447 mo
34.5706 95.189 li
34.3506 95.1994 34.1829 95.2309 34.0886 95.2728 cv
33.9419 95.3357 33.8266 95.43 33.7428 95.5557 cv
33.6589 95.692 33.617 95.8177 33.617 95.9644 cv
33.617 96.174 33.7113 96.3731 33.879 96.5408 cv
34.0467 96.7084 34.2772 96.8132 34.5706 96.8447 cv
cp
33.3446 89.5826 mo
34.5706 89.5826 li
34.5706 89.7084 li
34.1829 89.8132 33.9209 89.9389 33.7847 90.0856 cv
33.6485 90.2428 33.5751 90.4419 33.5751 90.6829 cv
33.5751 90.8611 33.6275 91.0078 33.7218 91.1231 cv
33.8161 91.2383 33.9314 91.2907 34.0467 91.2907 cv
34.1934 91.2907 34.3191 91.2488 34.4239 91.165 cv
34.5287 91.0812 34.644 90.924 34.7593 90.6725 cv
35.0317 90.1066 li
35.2937 89.5722 35.629 89.3102 36.0587 89.3102 cv
36.3835 89.3102 36.6455 89.4359 36.8446 89.6769 cv
37.0437 89.9285 37.138 90.2009 37.138 90.5048 cv
37.138 90.7249 37.1066 90.9764 37.0227 91.2593 cv
37.0018 91.3431 36.9808 91.4165 36.9808 91.4689 cv
36.9808 91.5318 37.0227 91.5737 37.0856 91.6051 cv
37.0856 91.7413 li
35.8072 91.7413 li
35.8072 91.6051 li
36.1739 91.5318 36.4464 91.3955 36.635 91.1859 cv
36.8236 90.9868 36.9075 90.7563 36.9075 90.4943 cv
36.9075 90.3162 36.8551 90.1695 36.7503 90.0542 cv
36.6455 89.9494 36.5197 89.8865 36.373 89.8865 cv
36.1949 89.8865 36.0377 89.9494 35.9224 90.0752 cv
35.7967 90.2009 35.6395 90.4524 35.4509 90.8297 cv
35.2623 91.2069 35.0946 91.4584 34.9479 91.5737 cv
34.8012 91.6889 34.6125 91.7518 34.382 91.7518 cv
34.0886 91.7518 33.8476 91.647 33.6485 91.4479 cv
33.4494 91.2488 33.3446 90.9868 33.3446 90.662 cv
33.3446 90.5258 33.376 90.3581 33.4389 90.159 cv
33.4808 90.0228 33.5018 89.9285 33.5018 89.8865 cv
33.5018 89.8446 33.4913 89.8132 33.4703 89.7922 cv
33.4494 89.7713 33.4074 89.7398 33.3446 89.7084 cv
cp
34.8012 88.1784 mo
35.3356 88.1784 35.7548 88.0527 36.0482 87.7907 cv
36.3521 87.5287 36.5093 87.2248 36.5093 86.879 cv
36.5093 86.638 36.4359 86.4389 36.3102 86.2608 cv
36.1844 86.0931 35.9644 85.9464 35.65 85.8311 cv
35.7233 85.7054 li
36.0796 85.7578 36.4045 85.9149 36.6979 86.1874 cv
36.9913 86.4494 37.138 86.7742 37.138 87.1724 cv
37.138 87.6021 36.9704 87.9688 36.635 88.2728 cv
36.3102 88.5766 35.8596 88.7338 35.2937 88.7338 cv
34.6754 88.7338 34.2039 88.5766 33.8581 88.2623 cv
33.5122 87.9479 33.3446 87.5497 33.3446 87.0781 cv
33.3446 86.6799 33.4808 86.3551 33.7428 86.0931 cv
34.0048 85.8311 34.361 85.7054 34.8012 85.7054 cv
cp
34.5706 88.1784 mo
34.5706 86.5227 li
34.3506 86.5332 34.1829 86.5647 34.0886 86.6066 cv
33.9419 86.6694 33.8266 86.7638 33.7428 86.9 cv
33.6589 87.0257 33.617 87.162 33.617 87.2982 cv
33.617 87.5182 33.7113 87.7069 33.879 87.8745 cv
34.0467 88.0527 34.2772 88.147 34.5706 88.1784 cv
cp
33.3446 82.0586 mo
37.9449 82.0586 li
38.1754 82.0586 38.3222 82.0481 38.3955 82.0167 cv
38.4584 81.9853 38.5108 81.9329 38.5422 81.87 cv
38.5841 81.8071 38.5946 81.6709 38.5946 81.4823 cv
38.7413 81.4823 li
38.7413 83.2847 li
38.5946 83.2847 li
38.5946 83.2113 li
38.5946 83.0646 38.5737 82.9494 38.5317 82.876 cv
38.5108 82.8236 38.4584 82.7817 38.385 82.7502 cv
38.3117 82.7188 38.165 82.7083 37.9449 82.7083 cv
36.415 82.7083 li
36.6874 82.9389 36.8865 83.1485 36.9913 83.3266 cv
37.0856 83.5047 37.138 83.6829 37.138 83.882 cv
37.138 84.2278 36.9808 84.5317 36.6665 84.8042 cv
36.3521 85.0766 35.9329 85.2128 35.3985 85.2128 cv
34.8012 85.2128 34.2982 85.0347 33.9209 84.6784 cv
33.5437 84.3116 33.3446 83.882 33.3446 83.379 cv
33.3446 83.2218 33.3655 83.0856 33.4074 82.9598 cv
33.4494 82.8341 33.5122 82.7293 33.5961 82.6245 cv
33.5227 82.4778 33.4389 82.3311 33.3446 82.1949 cv
cp
36.1635 82.7083 mo
34.4868 82.7083 li
34.2877 82.7083 34.141 82.7293 34.0257 82.7817 cv
33.9104 82.8341 33.8161 82.9284 33.7428 83.0541 cv
33.6589 83.1799 33.617 83.3266 33.617 83.4943 cv
33.617 83.7877 33.7428 84.0392 33.9943 84.2488 cv
34.2458 84.4583 34.6125 84.5527 35.1155 84.5527 cv
35.5976 84.5527 35.9644 84.4479 36.2159 84.2383 cv
36.4674 84.0287 36.5931 83.7667 36.5931 83.4733 cv
36.5931 83.3161 36.5617 83.1799 36.4883 83.0646 cv
36.4254 82.9389 36.3206 82.8236 36.1635 82.7083 cv
cp
33.4494 78.0975 mo
35.6185 78.0975 li
36.0377 78.0975 36.2892 78.087 36.3835 78.0661 cv
36.4778 78.0451 36.5407 78.0137 36.5721 77.9718 cv
36.6141 77.9298 36.6245 77.8775 36.6245 77.8251 cv
36.6245 77.7412 36.6036 77.6469 36.5617 77.5421 cv
36.6979 77.4897 li
37.138 78.5586 li
37.138 78.7367 li
36.3835 78.7367 li
36.7189 79.0406 36.9284 79.2817 37.0123 79.4388 cv
37.0961 79.6065 37.138 79.7742 37.138 79.9523 cv
37.138 80.1514 37.0856 80.3296 36.9704 80.4763 cv
36.8551 80.623 36.6979 80.7278 36.5197 80.7802 cv
36.3416 80.8326 36.0796 80.864 35.7443 80.864 cv
34.1515 80.864 li
33.9838 80.864 33.8581 80.885 33.7952 80.9164 cv
33.7323 80.9583 33.6799 81.0107 33.6485 81.0841 cv
33.617 81.1574 33.5961 81.2832 33.5961 81.4718 cv
33.4494 81.4718 li
33.4494 80.2143 li
35.8491 80.2143 li
36.1844 80.2143 36.4045 80.1619 36.5093 80.0466 cv
36.6141 79.9314 36.656 79.7847 36.656 79.6275 cv
36.656 79.5122 36.6245 79.3865 36.5512 79.2397 cv
36.4883 79.1035 36.3521 78.9358 36.153 78.7367 cv
34.1305 78.7367 li
33.9209 78.7367 33.7847 78.7787 33.7113 78.852 cv
33.638 78.9254 33.6066 79.0826 33.5961 79.3131 cv
33.4494 79.3131 li
cp
34.8012 76.6304 mo
35.3356 76.6304 35.7548 76.5047 36.0482 76.2427 cv
36.3521 75.9807 36.5093 75.6768 36.5093 75.3205 cv
36.5093 75.09 36.4359 74.8909 36.3102 74.7128 cv
36.1844 74.5346 35.9644 74.3984 35.65 74.2726 cv
35.7233 74.1574 li
36.0796 74.2098 36.4045 74.367 36.6979 74.6289 cv
36.9913 74.8909 37.138 75.2262 37.138 75.6245 cv
37.138 76.0541 36.9704 76.4209 36.635 76.7247 cv
36.3102 77.0286 35.8596 77.1858 35.2937 77.1858 cv
34.6754 77.1858 34.2039 77.0286 33.8581 76.7143 cv
33.5122 76.3999 33.3446 76.0017 33.3446 75.5301 cv
33.3446 75.1319 33.4808 74.7966 33.7428 74.5451 cv
34.0048 74.2831 34.361 74.1574 34.8012 74.1574 cv
cp
34.5706 76.6304 mo
34.5706 74.9747 li
34.3506 74.9852 34.1829 75.0167 34.0886 75.0586 cv
33.9419 75.1214 33.8266 75.2158 33.7428 75.3415 cv
33.6589 75.4777 33.617 75.614 33.617 75.7502 cv
33.617 75.9703 33.7113 76.1589 33.879 76.3265 cv
34.0467 76.5047 34.2772 76.599 34.5706 76.6304 cv
cp
34.1096 72.6379 mo
33.6066 72.2187 33.3446 71.8205 33.3446 71.4328 cv
33.3446 71.2442 33.397 71.0765 33.4913 70.9298 cv
33.5961 70.7936 33.7533 70.6783 33.9733 70.5945 cv
34.1305 70.5421 34.3715 70.5106 34.6964 70.5106 cv
36.2263 70.5106 li
36.4464 70.5106 36.6036 70.4897 36.6874 70.4582 cv
36.7503 70.4268 36.8027 70.3849 36.8341 70.322 cv
36.876 70.2591 36.8865 70.1334 36.8865 69.9657 cv
37.0332 69.9657 li
37.0332 71.7367 li
36.8865 71.7367 li
36.8865 71.6633 li
36.8865 71.4957 36.8656 71.3804 36.8132 71.307 cv
36.7608 71.2442 36.6874 71.2023 36.5931 71.1708 cv
36.5512 71.1603 36.4254 71.1603 36.2263 71.1603 cv
34.7593 71.1603 li
34.4344 71.1603 34.1934 71.2023 34.0467 71.2861 cv
33.9 71.3699 33.8266 71.5061 33.8266 71.7157 cv
33.8266 72.0196 33.9943 72.334 34.3401 72.6379 cv
36.2263 72.6379 li
36.4674 72.6379 36.6141 72.6274 36.6769 72.596 cv
36.7503 72.5541 36.8027 72.5121 36.8341 72.4388 cv
36.876 72.3759 36.8865 72.2502 36.8865 72.0511 cv
37.0332 72.0511 li
37.0332 73.822 li
36.8865 73.822 li
36.8865 73.7487 li
36.8865 73.5601 36.8446 73.4448 36.7503 73.3819 cv
36.656 73.3086 36.4883 73.2771 36.2263 73.2771 cv
34.8955 73.2771 li
34.4658 73.2771 34.2039 73.2876 34.1096 73.3086 cv
34.0152 73.3295 33.9524 73.361 33.9209 73.4029 cv
33.8895 73.4448 33.8685 73.4972 33.8685 73.5601 cv
33.8685 73.6334 33.8895 73.7277 33.9314 73.822 cv
33.7847 73.8849 li
33.3446 72.8056 li
33.3446 72.6379 li
cp
35.6709 66.6438 mo
36.1425 66.7381 36.5093 66.9268 36.7608 67.2097 cv
37.0123 67.4926 37.138 67.7965 37.138 68.1423 cv
37.138 68.551 36.9704 68.8968 36.6245 69.2007 cv
36.2892 69.5046 35.8281 69.6513 35.2518 69.6513 cv
34.6859 69.6513 34.2248 69.4837 33.879 69.1588 cv
33.5227 68.8235 33.3446 68.4148 33.3446 67.9537 cv
33.3446 67.5974 33.4389 67.304 33.6275 67.084 cv
33.8161 66.8534 34.0048 66.7381 34.2039 66.7381 cv
34.3087 66.7381 34.382 66.7696 34.4449 66.8429 cv
34.5078 66.9058 34.5392 66.9896 34.5392 67.1049 cv
34.5392 67.2621 34.4868 67.3774 34.3925 67.4507 cv
34.3401 67.4926 34.2353 67.5241 34.0781 67.545 cv
33.9209 67.5555 33.8057 67.6079 33.7323 67.7022 cv
33.6485 67.7861 33.6066 67.9118 33.6066 68.0795 cv
33.6066 68.3415 33.7113 68.551 33.9 68.7082 cv
34.1515 68.9178 34.4868 69.0226 34.906 69.0226 cv
35.3356 69.0226 35.7129 68.9178 36.0377 68.7082 cv
36.373 68.4986 36.5302 68.2157 36.5302 67.8594 cv
36.5302 67.6079 36.4464 67.3774 36.2682 67.1678 cv
36.153 67.0316 35.9329 66.8849 35.6185 66.7591 cv
cp
34.8012 65.5226 mo
35.3356 65.5331 35.7548 65.3968 36.0482 65.1453 cv
36.3521 64.8833 36.5093 64.5795 36.5093 64.2232 cv
36.5093 63.9926 36.4359 63.783 36.3102 63.6154 cv
36.1844 63.4372 35.9644 63.2905 35.65 63.1752 cv
35.7233 63.06 li
36.0796 63.1124 36.4045 63.2696 36.6979 63.5315 cv
36.9913 63.7935 37.138 64.1288 37.138 64.5166 cv
37.138 64.9462 36.9704 65.313 36.635 65.6274 cv
36.3102 65.9313 35.8596 66.078 35.2937 66.078 cv
34.6754 66.078 34.2039 65.9208 33.8581 65.6169 cv
33.5122 65.3025 33.3446 64.9043 33.3446 64.4327 cv
33.3446 64.0241 33.4808 63.6992 33.7428 63.4372 cv
34.0048 63.1857 34.361 63.06 34.8012 63.06 cv
cp
34.5706 65.5226 mo
34.5706 63.8669 li
34.3506 63.8878 34.1829 63.9088 34.0886 63.9507 cv
33.9419 64.0136 33.8266 64.1184 33.7428 64.2441 cv
33.6589 64.3699 33.617 64.5061 33.617 64.6528 cv
33.617 64.8624 33.7113 65.0615 33.879 65.2291 cv
34.0467 65.3968 34.2772 65.5016 34.5706 65.5226 cv
cp
33.4494 60.7755 mo
33.4494 59.277 li
33.5961 59.277 li
33.6066 59.4132 33.638 59.5076 33.6694 59.5495 cv
33.7113 59.5914 33.7637 59.6123 33.8371 59.6123 cv
33.9209 59.6123 34.0152 59.5914 34.1305 59.5495 cv
36.1949 58.7845 li
34.5182 58.009 li
33.9943 58.2186 li
33.8371 58.2815 33.7218 58.3653 33.6694 58.4596 cv
33.6275 58.5225 33.6066 58.6273 33.5961 58.7845 cv
33.4494 58.7845 li
33.4494 57.0764 li
33.5961 57.0764 li
33.6066 57.265 33.638 57.4012 33.7009 57.4746 cv
33.7428 57.527 33.8057 57.5584 33.9 57.5584 cv
33.9524 57.5584 34.0048 57.548 34.0572 57.527 cv
36.1111 56.7096 li
34.1305 55.9551 li
33.9943 55.9027 33.879 55.8818 33.7952 55.8818 cv
33.7533 55.8818 33.7009 55.9027 33.6694 55.9551 cv
33.6275 56.0075 33.6066 56.1018 33.5961 56.259 cv
33.4494 56.259 li
33.4494 55.1273 li
33.5961 55.1273 li
33.6275 55.3578 33.7847 55.515 34.0572 55.6303 cv
37.138 56.8249 li
37.138 56.9821 li
34.8536 57.8728 li
37.138 58.9207 li
37.138 59.0674 li
34.1305 60.2096 li
33.9419 60.283 33.8161 60.3564 33.7533 60.4297 cv
33.6799 60.5031 33.6275 60.6183 33.5961 60.7755 cv
cp
31.4793 53.8907 mo
31.4793 53.7859 31.5212 53.6916 31.5946 53.6078 cv
31.6679 53.5344 31.7622 53.4925 31.867 53.4925 cv
31.9823 53.4925 32.0766 53.5344 32.15 53.6078 cv
32.2338 53.6916 32.2757 53.7859 32.2652 53.8907 cv
32.2757 54.006 32.2338 54.0898 32.15 54.1737 cv
32.0766 54.247 31.9823 54.2889 31.867 54.2889 cv
31.7622 54.2889 31.6679 54.247 31.5946 54.1737 cv
31.5212 54.1003 31.4793 54.006 31.4793 53.8907 cv
cp
33.3446 53.5659 mo
36.2263 53.5659 li
36.4464 53.5659 36.5931 53.5554 36.6665 53.524 cv
36.7398 53.4821 36.8027 53.4401 36.8341 53.3773 cv
36.876 53.3144 36.8865 53.1886 36.8865 53.021 cv
37.0332 53.021 li
37.0332 54.7605 li
36.8865 54.7605 li
36.8865 54.5928 36.876 54.4671 36.8446 54.4147 cv
36.8027 54.3518 36.7503 54.2994 36.6769 54.268 cv
36.5931 54.2365 36.4464 54.2156 36.2263 54.2156 cv
34.8431 54.2156 li
34.4554 54.2156 34.2039 54.2261 34.0886 54.247 cv
34.0048 54.268 33.9524 54.2994 33.9209 54.3413 cv
33.8895 54.3728 33.8685 54.4252 33.8685 54.4985 cv
33.8685 54.5719 33.8895 54.6557 33.9314 54.7605 cv
33.7847 54.8129 li
33.3446 53.744 li
cp
32.2757 51.5434 mo
33.4494 51.5434 li
33.4494 50.7051 li
33.7323 50.7051 li
33.7323 51.5434 li
36.0482 51.5434 li
36.2787 51.5434 36.4359 51.512 36.5197 51.4386 cv
36.5931 51.3757 36.635 51.2919 36.635 51.1871 cv
36.635 51.1033 36.6141 51.0195 36.5617 50.9356 cv
36.5093 50.8518 36.4254 50.7889 36.3206 50.747 cv
36.3206 50.6003 li
36.5721 50.6841 36.7712 50.8204 36.897 50.9775 cv
37.0227 51.1452 37.0856 51.3233 37.0856 51.5015 cv
37.0856 51.6168 37.0542 51.732 36.9913 51.8473 cv
36.9284 51.9626 36.8341 52.0464 36.7084 52.0988 cv
36.5826 52.1617 36.394 52.1826 36.132 52.1826 cv
33.7323 52.1826 li
33.7323 52.7485 li
33.5961 52.7485 li
33.5437 52.6123 33.4494 52.4656 33.3027 52.3084 cv
33.1664 52.1617 33.0092 52.0255 32.8206 51.9102 cv
32.7263 51.8473 32.5377 51.7635 32.2757 51.6587 cv
cp
31.4793 49.3114 mo
34.0991 49.3114 li
33.7742 49.0179 33.5751 48.7874 33.4808 48.6197 cv
33.397 48.4521 33.3446 48.2844 33.3446 48.1063 cv
33.3446 47.9072 33.4074 47.729 33.5122 47.5928 cv
33.6275 47.4461 33.8057 47.3308 34.0467 47.2679 cv
34.2143 47.2155 34.5182 47.1946 34.9584 47.1946 cv
36.2263 47.1946 li
36.4464 47.1946 36.6036 47.1736 36.6874 47.1317 cv
36.7503 47.1107 36.8027 47.0688 36.8341 47.006 cv
36.876 46.9431 36.8865 46.8278 36.8865 46.6601 cv
37.0332 46.6601 li
37.0332 48.4206 li
36.8865 48.4206 li
36.8865 48.3368 li
36.8865 48.1691 36.8656 48.0539 36.8132 47.991 cv
36.7608 47.9176 36.6874 47.8757 36.5931 47.8548 cv
36.5512 47.8443 36.4254 47.8338 36.2263 47.8338 cv
34.9584 47.8338 li
34.5706 47.8338 34.3087 47.8548 34.1934 47.8967 cv
34.0676 47.9386 33.9733 48.0015 33.9104 48.0958 cv
33.8476 48.1796 33.8161 48.2844 33.8161 48.4102 cv
33.8161 48.5359 33.8581 48.6721 33.9209 48.8084 cv
33.9943 48.9446 34.1305 49.1123 34.3296 49.3114 cv
36.2263 49.3114 li
36.4674 49.3114 36.6245 49.2904 36.6769 49.2694 cv
36.7398 49.238 36.7922 49.1856 36.8341 49.1123 cv
36.876 49.0389 36.8865 48.9132 36.8865 48.7245 cv
37.0332 48.7245 li
37.0332 50.506 li
36.8865 50.506 li
36.8865 50.3383 36.8656 50.2126 36.8132 50.1287 cv
36.7922 50.0763 36.7398 50.0344 36.6665 50.003 cv
36.5931 49.9715 36.4464 49.9506 36.2263 49.9506 cv
32.9883 49.9506 li
32.5796 49.9506 32.3281 49.9611 32.2338 49.982 cv
32.1395 50.003 32.0766 50.0344 32.0452 50.0763 cv
32.0032 50.1183 31.9928 50.1707 31.9928 50.2335 cv
31.9928 50.2859 32.0137 50.3802 32.0556 50.506 cv
31.9194 50.5584 li
31.4793 49.4895 li
cp
31.4793 43.1287 mo
36.2263 43.1287 li
36.4464 43.1287 36.5931 43.1077 36.6665 43.0763 cv
36.7398 43.0448 36.7922 42.9924 36.8341 42.9296 cv
36.876 42.8562 36.8865 42.7305 36.8865 42.5523 cv
37.0332 42.5523 li
37.0332 44.3023 li
36.8865 44.3023 li
36.8865 44.1347 36.876 44.0299 36.8446 43.967 cv
36.8027 43.9041 36.7503 43.8622 36.6769 43.8308 cv
36.5931 43.7889 36.4464 43.7784 36.2263 43.7784 cv
32.9778 43.7784 li
32.5691 43.7784 32.3176 43.7889 32.2338 43.7993 cv
32.1395 43.8203 32.0766 43.8517 32.0452 43.8937 cv
32.0032 43.9356 31.9928 43.9775 31.9928 44.0404 cv
31.9928 44.1137 32.0137 44.1975 32.0556 44.3023 cv
31.9194 44.3652 li
31.4793 43.3068 li
cp
33.3446 40.3831 mo
33.3446 39.8487 33.5542 39.4086 33.9628 39.0837 cv
34.3191 38.8008 34.7173 38.6646 35.1784 38.6646 cv
35.4928 38.6646 35.8176 38.7379 36.153 38.8951 cv
36.4778 39.0418 36.7293 39.2619 36.8865 39.5239 cv
37.0542 39.7963 37.138 40.1002 37.138 40.4251 cv
37.138 40.97 36.9284 41.3996 36.4988 41.714 cv
36.132 41.9865 35.7338 42.1122 35.2832 42.1122 cv
34.9479 42.1122 34.623 42.0388 34.2982 41.8712 cv
33.9733 41.7035 33.7323 41.4939 33.5856 41.232 cv
33.4284 40.9595 33.3446 40.687 33.3446 40.3831 cv
cp
33.6066 40.5089 mo
33.6066 40.6451 33.6485 40.7814 33.7218 40.9176 cv
33.8057 41.0643 33.9524 41.1691 34.1619 41.2634 cv
34.361 41.3472 34.623 41.3891 34.9479 41.3891 cv
35.4718 41.3891 35.9224 41.2844 36.2997 41.0748 cv
36.6769 40.8757 36.8656 40.6032 36.8656 40.2574 cv
36.8656 40.0059 36.7608 39.7963 36.5512 39.6391 cv
36.3416 39.4715 35.9853 39.3876 35.4823 39.3876 cv
34.8431 39.3876 34.3401 39.5239 33.9733 39.7963 cv
33.7323 39.9849 33.6066 40.2155 33.6066 40.5089 cv
cp
33.3446 36.3906 mo
33.3446 35.8457 33.5542 35.4056 33.9628 35.0807 cv
34.3191 34.7978 34.7173 34.6615 35.1784 34.6615 cv
35.4928 34.6615 35.8176 34.7349 36.153 34.8921 cv
36.4778 35.0493 36.7293 35.2589 36.8865 35.5313 cv
37.0542 35.7933 37.138 36.0972 37.138 36.4325 cv
37.138 36.9669 36.9284 37.3966 36.4988 37.711 cv
36.132 37.9834 35.7338 38.1197 35.2832 38.1197 cv
34.9479 38.1197 34.623 38.0358 34.2982 37.8682 cv
33.9733 37.711 33.7323 37.4909 33.5856 37.2289 cv
33.4284 36.9669 33.3446 36.684 33.3446 36.3906 cv
cp
33.6066 36.5059 mo
33.6066 36.6421 33.6485 36.7783 33.7218 36.925 cv
33.8057 37.0613 33.9524 37.1765 34.1619 37.2604 cv
34.361 37.3442 34.623 37.3861 34.9479 37.3861 cv
35.4718 37.3861 35.9224 37.2813 36.2997 37.0822 cv
36.6769 36.8726 36.8656 36.6002 36.8656 36.2648 cv
36.8656 36.0029 36.7608 35.8038 36.5512 35.6361 cv
36.3416 35.4684 35.9853 35.3846 35.4823 35.3846 cv
34.8431 35.3846 34.3401 35.5313 33.9733 35.8038 cv
33.7323 35.9819 33.6066 36.2229 33.6066 36.5059 cv
cp
33.8057 34.3891 mo
33.3655 33.2888 li
33.3655 33.1421 li
34.2039 33.1421 li
33.8895 32.9534 33.6694 32.7753 33.5332 32.5867 cv
33.4074 32.3981 33.3446 32.2094 33.3446 31.9998 cv
33.3446 31.6436 33.4913 31.3397 33.7742 31.0986 cv
34.1096 30.8052 34.5602 30.6585 35.1155 30.6585 cv
35.7338 30.6585 36.2368 30.8367 36.6455 31.193 cv
36.9808 31.4864 37.138 31.8531 37.138 32.2933 cv
37.138 32.4819 37.1171 32.6496 37.0542 32.7963 cv
37.0227 32.9011 36.9389 33.0163 36.8236 33.1421 cv
37.9135 33.1421 li
38.1545 33.1421 38.3117 33.1316 38.385 33.1002 cv
38.4479 33.0687 38.5003 33.0163 38.5422 32.943 cv
38.5737 32.8696 38.5946 32.7334 38.5946 32.5343 cv
38.7413 32.5343 li
38.7413 34.41 li
38.5946 34.41 li
38.5946 34.3157 li
38.6051 34.169 38.5737 34.0537 38.5213 33.949 cv
38.4898 33.8966 38.4374 33.8651 38.3746 33.8337 cv
38.3117 33.8023 38.1545 33.7918 37.8925 33.7918 cv
34.5078 33.7918 li
34.2772 33.7918 34.1305 33.8023 34.0676 33.8232 cv
34.0048 33.8442 33.9628 33.8756 33.9314 33.9175 cv
33.9 33.9699 33.879 34.0328 33.879 34.1061 cv
33.879 34.169 33.9 34.2529 33.9314 34.3472 cv
cp
34.4344 33.1421 mo
35.7653 33.1421 li
36.0587 33.1421 36.2473 33.1316 36.3416 33.1106 cv
36.4883 33.0687 36.6245 32.9849 36.7398 32.8382 cv
36.8551 32.7019 36.9075 32.5238 36.9075 32.3037 cv
36.9075 32.0418 36.8027 31.8322 36.6036 31.675 cv
36.3416 31.4549 35.9644 31.3501 35.4823 31.3501 cv
34.9374 31.3501 34.5182 31.4759 34.2143 31.7169 cv
34.0152 31.8846 33.9104 32.0732 33.9104 32.3037 cv
33.9104 32.4295 33.9419 32.5552 34.0048 32.681 cv
34.0572 32.7753 34.1934 32.922 34.4344 33.1421 cv
cp
34.0676 27.1585 mo
33.5856 26.8127 33.3446 26.4354 33.3446 26.0372 cv
33.3446 25.6704 33.5018 25.3456 33.8161 25.0731 cv
34.1305 24.8007 34.5602 24.6645 35.1051 24.6645 cv
35.7443 24.6645 36.2578 24.874 36.6455 25.2932 cv
36.9704 25.66 37.138 26.0582 37.138 26.5088 cv
37.138 26.7184 37.1066 26.9279 37.0332 27.1375 cv
36.9494 27.3576 36.8446 27.5777 36.6874 27.7977 cv
32.9778 27.7977 li
32.5796 27.7977 32.3281 27.8082 32.2338 27.8291 cv
32.1395 27.8501 32.0766 27.8816 32.0452 27.9235 cv
32.0032 27.9654 31.9928 28.0178 31.9928 28.0807 cv
31.9928 28.154 32.0137 28.2378 32.0556 28.3531 cv
31.9194 28.4055 li
31.4793 27.3262 li
31.4793 27.1585 li
cp
34.3191 27.1585 mo
36.4569 27.1585 li
36.5931 27.0223 36.6874 26.886 36.7608 26.7393 cv
36.8236 26.6031 36.8551 26.4564 36.8551 26.3097 cv
36.8551 26.0687 36.7293 25.8486 36.4674 25.6495 cv
36.2054 25.4399 35.8281 25.3351 35.3251 25.3351 cv
34.8745 25.3351 34.5182 25.4399 34.2772 25.6495 cv
34.0257 25.8486 33.9 26.0791 33.9 26.3411 cv
33.9 26.4773 33.9419 26.6241 34.0048 26.7603 cv
34.0572 26.8651 34.1619 26.9908 34.3191 27.1585 cv
f
72.9766 131.164 mo
72.4946 130.818 72.2536 130.451 72.2536 130.043 cv
72.2536 129.676 72.4108 129.361 72.7251 129.089 cv
73.0395 128.816 73.4692 128.68 74.0141 128.68 cv
74.6428 128.68 75.1563 128.89 75.544 129.309 cv
75.8794 129.676 76.047 130.074 76.047 130.525 cv
76.047 130.724 76.0051 130.944 75.9317 131.153 cv
75.8584 131.373 75.7431 131.593 75.5859 131.814 cv
71.8868 131.814 li
71.4781 131.814 71.2266 131.824 71.1323 131.845 cv
71.038 131.866 70.9751 131.887 70.9437 131.929 cv
70.9122 131.971 70.8913 132.023 70.8913 132.086 cv
70.8913 132.159 70.9122 132.254 70.9542 132.358 cv
70.8179 132.421 li
70.3778 131.342 li
70.3778 131.164 li
cp
73.2281 131.164 mo
75.3659 131.164 li
75.4916 131.038 75.5964 130.902 75.6593 130.755 cv
75.7222 130.619 75.7641 130.472 75.7641 130.325 cv
75.7641 130.084 75.6279 129.864 75.3659 129.655 cv
75.1039 129.456 74.7266 129.351 74.2341 129.351 cv
73.773 129.351 73.4168 129.456 73.1757 129.655 cv
72.9242 129.864 72.809 130.095 72.809 130.357 cv
72.809 130.493 72.8404 130.629 72.9138 130.766 cv
72.9662 130.87 73.0709 131.007 73.2281 131.164 cv
f
70.5455 128.219 mo
70.3778 128.219 li
70.5769 127.821 70.8074 127.496 71.0694 127.234 cv
71.4572 126.857 71.8973 126.574 72.4108 126.364 cv
72.9242 126.165 73.4587 126.06 74.0141 126.06 cv
74.821 126.06 75.5545 126.26 76.2147 126.658 cv
76.8853 127.056 77.3569 127.58 77.6503 128.219 cv
77.5036 128.219 li
77.3255 127.894 77.074 127.632 76.7701 127.433 cv
76.4662 127.224 76.0784 127.066 75.6069 126.972 cv
75.1353 126.867 74.6428 126.815 74.1293 126.815 cv
73.5739 126.815 73.0605 126.857 72.6099 126.941 cv
72.2431 127.014 71.9602 127.087 71.7401 127.192 cv
71.5305 127.287 71.3209 127.412 71.1218 127.58 cv
70.9227 127.737 70.7236 127.957 70.5455 128.219 cv
f
70.6398 119.102 mo
71.8763 119.05 li
71.8763 119.197 li
71.6667 119.228 71.5096 119.26 71.4152 119.312 cv
71.258 119.396 71.1533 119.501 71.0799 119.637 cv
71.0066 119.773 70.9751 119.951 70.9751 120.161 cv
70.9751 120.915 li
75.0201 120.915 li
75.3449 120.915 75.544 120.873 75.6278 120.81 cv
75.7326 120.706 75.7955 120.559 75.785 120.349 cv
75.785 120.161 li
75.9317 120.161 li
75.9317 122.414 li
75.785 122.414 li
75.785 122.225 li
75.7955 121.995 75.7222 121.837 75.5859 121.743 cv
75.5021 121.691 75.3135 121.659 75.0201 121.659 cv
70.9751 121.659 li
70.9751 122.298 li
70.9751 122.55 70.9856 122.718 71.0275 122.822 cv
71.0799 122.959 71.1742 123.074 71.3104 123.168 cv
71.4467 123.273 71.6458 123.325 71.8763 123.346 cv
71.8763 123.493 li
70.6398 123.43 li
cp
70.3778 117.551 mo
72.9976 117.551 li
72.6832 117.258 72.4736 117.027 72.3898 116.86 cv
72.2955 116.692 72.2536 116.524 72.2536 116.357 cv
72.2536 116.147 72.306 115.98 72.4212 115.833 cv
72.5365 115.686 72.7042 115.571 72.9452 115.508 cv
73.1129 115.456 73.4167 115.435 73.8569 115.435 cv
75.1248 115.435 li
75.3554 115.435 75.5126 115.414 75.5859 115.372 cv
75.6488 115.351 75.7012 115.309 75.7431 115.246 cv
75.7746 115.183 75.7955 115.068 75.7955 114.9 cv
75.9317 114.9 li
75.9317 116.661 li
75.7955 116.661 li
75.7955 116.577 li
75.7955 116.409 75.7641 116.294 75.7222 116.231 cv
75.6698 116.158 75.5964 116.116 75.4916 116.095 cv
75.4497 116.084 75.3344 116.084 75.1248 116.084 cv
73.8569 116.084 li
73.4691 116.084 73.2176 116.095 73.0919 116.137 cv
72.9661 116.179 72.8823 116.242 72.8194 116.336 cv
72.7566 116.42 72.7251 116.524 72.7251 116.65 cv
72.7251 116.776 72.7566 116.912 72.8299 117.048 cv
72.8928 117.185 73.029 117.352 73.2386 117.551 cv
75.1248 117.551 li
75.3764 117.551 75.5231 117.53 75.5859 117.51 cv
75.6383 117.478 75.6907 117.426 75.7326 117.352 cv
75.7746 117.279 75.7955 117.153 75.7955 116.975 cv
75.9317 116.975 li
75.9317 118.746 li
75.7955 118.746 li
75.7955 118.589 75.7746 118.463 75.7222 118.369 cv
75.6907 118.316 75.6488 118.274 75.5754 118.243 cv
75.5021 118.212 75.3554 118.201 75.1248 118.201 cv
71.8868 118.201 li
71.4781 118.201 71.2266 118.201 71.1323 118.222 cv
71.038 118.243 70.9751 118.274 70.9437 118.316 cv
70.9122 118.358 70.8913 118.411 70.8913 118.474 cv
70.8913 118.536 70.9122 118.62 70.9542 118.746 cv
70.8179 118.798 li
70.3778 117.73 li
cp
73.6997 113.999 mo
74.2341 113.999 74.6533 113.873 74.9572 113.611 cv
75.2611 113.349 75.4078 113.045 75.4078 112.689 cv
75.4078 112.459 75.3449 112.259 75.2192 112.081 cv
75.0829 111.903 74.8629 111.767 74.5485 111.641 cv
74.6323 111.526 li
74.9886 111.578 75.3135 111.736 75.6069 111.997 cv
75.9003 112.259 76.047 112.595 76.047 112.993 cv
76.047 113.423 75.8793 113.789 75.544 114.093 cv
75.2087 114.397 74.7581 114.554 74.1922 114.554 cv
73.5844 114.554 73.1024 114.397 72.7566 114.083 cv
72.4212 113.768 72.2431 113.37 72.2431 112.899 cv
72.2431 112.5 72.3793 112.165 72.6413 111.914 cv
72.9137 111.652 73.2596 111.526 73.6997 111.526 cv
cp
73.4796 113.999 mo
73.4796 112.343 li
73.2491 112.354 73.0919 112.385 72.9976 112.427 cv
72.8509 112.49 72.7356 112.584 72.6518 112.71 cv
72.5679 112.846 72.526 112.983 72.526 113.119 cv
72.526 113.339 72.6099 113.527 72.7775 113.695 cv
72.9452 113.873 73.1757 113.968 73.4796 113.999 cv
cp
70.3778 107.816 mo
75.1248 107.816 li
75.3554 107.816 75.5021 107.806 75.5754 107.774 cv
75.6488 107.732 75.7012 107.691 75.7326 107.617 cv
75.7746 107.554 75.7955 107.429 75.7955 107.24 cv
75.9317 107.24 li
75.9317 108.99 li
75.7955 108.99 li
75.7955 108.833 75.7746 108.718 75.7431 108.655 cv
75.7117 108.602 75.6488 108.55 75.5754 108.518 cv
75.5021 108.487 75.3449 108.466 75.1248 108.466 cv
71.8763 108.466 li
71.4781 108.466 71.2266 108.477 71.1323 108.497 cv
71.038 108.508 70.9751 108.539 70.9437 108.581 cv
70.9122 108.623 70.8913 108.676 70.8913 108.738 cv
70.8913 108.801 70.9122 108.885 70.9542 108.99 cv
70.8179 109.063 li
70.3778 107.994 li
cp
72.2536 105.081 mo
72.2536 104.536 72.4527 104.096 72.8718 103.771 cv
73.2176 103.488 73.6263 103.352 74.0769 103.352 cv
74.4018 103.352 74.7266 103.426 75.0515 103.583 cv
75.3764 103.74 75.6278 103.95 75.7955 104.222 cv
75.9632 104.484 76.047 104.788 76.047 105.123 cv
76.047 105.658 75.827 106.087 75.3973 106.402 cv
75.041 106.674 74.6323 106.81 74.1817 106.81 cv
73.8569 106.81 73.532 106.726 73.2072 106.559 cv
72.8823 106.402 72.6413 106.182 72.4841 105.92 cv
72.3269 105.658 72.2536 105.375 72.2536 105.081 cv
cp
72.5051 105.197 mo
72.5051 105.333 72.547 105.469 72.6308 105.616 cv
72.7146 105.752 72.8509 105.867 73.0605 105.951 cv
73.27 106.035 73.532 106.077 73.8569 106.077 cv
74.3704 106.077 74.821 105.972 75.1982 105.773 cv
75.5754 105.563 75.7641 105.291 75.7641 104.956 cv
75.7641 104.694 75.6593 104.494 75.4497 104.327 cv
75.2506 104.159 74.8838 104.075 74.3808 104.075 cv
73.7416 104.075 73.2491 104.222 72.8823 104.494 cv
72.6308 104.673 72.5051 104.914 72.5051 105.197 cv
cp
73.0081 101.78 mo
72.5051 101.361 72.2536 100.963 72.2536 100.586 cv
72.2536 100.387 72.2955 100.219 72.4003 100.083 cv
72.4946 99.936 72.6518 99.8312 72.8823 99.7474 cv
73.0395 99.6845 73.2805 99.6636 73.5949 99.6636 cv
75.1248 99.6636 li
75.3554 99.6636 75.5021 99.6426 75.5859 99.6007 cv
75.6488 99.5797 75.7012 99.5273 75.7431 99.4645 cv
75.7746 99.4016 75.7955 99.2863 75.7955 99.1082 cv
75.9317 99.1082 li
75.9317 100.879 li
75.7955 100.879 li
75.7955 100.806 li
75.7955 100.638 75.7641 100.523 75.7222 100.46 cv
75.6698 100.387 75.5964 100.345 75.4916 100.324 cv
75.4497 100.313 75.3344 100.303 75.1248 100.303 cv
73.6578 100.303 li
73.3329 100.303 73.1024 100.345 72.9557 100.429 cv
72.809 100.512 72.7356 100.659 72.7356 100.858 cv
72.7356 101.173 72.9033 101.476 73.2386 101.78 cv
75.1248 101.78 li
75.3659 101.78 75.5231 101.77 75.5754 101.738 cv
75.6488 101.707 75.7117 101.655 75.7431 101.592 cv
75.7746 101.529 75.7955 101.393 75.7955 101.204 cv
75.9317 101.204 li
75.9317 102.975 li
75.7955 102.975 li
75.7955 102.891 li
75.7955 102.713 75.7431 102.587 75.6593 102.524 cv
75.565 102.461 75.3868 102.43 75.1248 102.43 cv
73.794 102.43 li
73.3644 102.43 73.1024 102.441 73.0081 102.461 cv
72.9242 102.472 72.8509 102.503 72.8194 102.545 cv
72.788 102.587 72.767 102.64 72.767 102.713 cv
72.767 102.786 72.788 102.87 72.8299 102.975 cv
72.6937 103.027 li
72.2536 101.948 li
72.2536 101.78 li
cp
74.6323 97.8716 mo
74.5275 98.0917 74.3704 98.2594 74.1817 98.3746 cv
73.9931 98.4899 73.7835 98.5528 73.553 98.5528 cv
73.1967 98.5528 72.8928 98.4165 72.6308 98.1441 cv
72.3793 97.8821 72.2536 97.5363 72.2536 97.1276 cv
72.2536 96.7818 72.3374 96.4884 72.5051 96.2369 cv
72.5051 95.4824 li
72.5051 95.3671 72.5051 95.3042 72.5155 95.2833 cv
72.5155 95.2623 72.526 95.2519 72.547 95.2414 cv
72.5679 95.2309 72.6099 95.2204 72.6727 95.2204 cv
72.7356 95.2204 72.788 95.2309 72.809 95.2414 cv
72.8194 95.2519 72.8299 95.2623 72.8404 95.2833 cv
72.8509 95.3042 72.8509 95.3671 72.8509 95.4824 cv
72.8509 95.9435 li
73.0395 95.7968 73.2805 95.7234 73.5739 95.7234 cv
73.9093 95.7234 74.1922 95.8492 74.4227 96.1111 cv
74.6638 96.3626 74.779 96.7085 74.779 97.1381 cv
74.779 97.3162 74.7581 97.4944 74.7057 97.683 cv
74.8 97.7878 74.8943 97.8716 74.9677 97.9136 cv
75.041 97.9555 75.1039 97.9659 75.1563 97.9659 cv
75.1982 97.9659 75.2401 97.945 75.282 97.9031 cv
75.324 97.8612 75.3554 97.7773 75.3764 97.6516 cv
75.3868 97.5782 75.3868 97.4001 75.3973 97.1067 cv
75.4078 96.5722 75.4287 96.2264 75.4497 96.0692 cv
75.4916 95.8177 75.5754 95.6291 75.7222 95.4824 cv
75.8689 95.3357 76.047 95.2728 76.2671 95.2728 cv
76.5605 95.2728 76.8329 95.409 77.0949 95.6815 cv
77.4722 96.0902 77.6608 96.6141 77.6608 97.2743 cv
77.6608 97.7773 77.5455 98.1965 77.3255 98.5423 cv
77.1892 98.7414 77.053 98.8357 76.9168 98.8357 cv
76.8539 98.8357 76.791 98.8252 76.7282 98.7938 cv
76.6338 98.7519 76.4976 98.6576 76.3299 98.5213 cv
76.2985 98.5004 76.1623 98.3746 75.9003 98.1231 cv
75.827 98.2594 75.7536 98.3537 75.6907 98.4061 cv
75.6278 98.4689 75.5545 98.4899 75.4707 98.4899 cv
75.3764 98.4899 75.2716 98.4585 75.1458 98.3851 cv
75.0305 98.3118 74.8524 98.1336 74.6323 97.8716 cv
cp
72.4422 97.1905 mo
72.4422 97.3791 72.5155 97.5468 72.6727 97.6725 cv
72.8194 97.8088 73.0605 97.8716 73.3748 97.8716 cv
73.7835 97.8716 74.1084 97.7773 74.3284 97.5992 cv
74.5066 97.4734 74.5904 97.2953 74.5904 97.0857 cv
74.5904 96.8866 74.5171 96.7294 74.3704 96.6037 cv
74.2236 96.4674 73.9826 96.4046 73.6683 96.4046 cv
73.2596 96.4046 72.9347 96.4989 72.6937 96.677 cv
72.526 96.8132 72.4422 96.9809 72.4422 97.1905 cv
cp
75.9317 97.9136 mo
76.068 98.0288 76.1937 98.1231 76.309 98.186 cv
76.4243 98.2489 76.5291 98.2803 76.6234 98.2803 cv
76.7491 98.2803 76.8539 98.207 76.9482 98.0498 cv
77.1159 97.7878 77.1892 97.421 77.1892 96.9285 cv
77.1892 96.4569 77.1054 96.1111 76.9482 95.8911 cv
76.7805 95.6605 76.6024 95.5557 76.4138 95.5557 cv
76.2775 95.5557 76.1832 95.6186 76.1308 95.7549 cv
76.068 95.8911 76.0365 96.1531 76.0261 96.5617 cv
76.0051 97.1381 75.9841 97.5887 75.9317 97.9136 cv
cp
73.6997 94.2249 mo
74.2341 94.2249 74.6533 94.0991 74.9572 93.8372 cv
75.2611 93.5752 75.4078 93.2713 75.4078 92.9255 cv
75.4078 92.6845 75.3449 92.4854 75.2192 92.3072 cv
75.0829 92.1395 74.8629 91.9928 74.5485 91.8776 cv
74.6323 91.7518 li
74.9886 91.8042 75.3135 91.9614 75.6069 92.2339 cv
75.9003 92.4958 76.047 92.8207 76.047 93.2189 cv
76.047 93.6485 75.8793 94.0153 75.544 94.3192 cv
75.2087 94.6231 74.7581 94.7803 74.1922 94.7803 cv
73.5844 94.7803 73.1024 94.6231 72.7566 94.3087 cv
72.4212 93.9944 72.2431 93.6066 72.2431 93.1246 cv
72.2431 92.7264 72.3793 92.4015 72.6413 92.1395 cv
72.9137 91.8776 73.2596 91.7518 73.6997 91.7518 cv
cp
73.4796 94.2249 mo
73.4796 92.5692 li
73.2491 92.5797 73.0919 92.6111 72.9976 92.653 cv
72.8509 92.7159 72.7356 92.8102 72.6518 92.9464 cv
72.5679 93.0722 72.526 93.2084 72.526 93.3447 cv
72.526 93.5647 72.6099 93.7533 72.7775 93.9315 cv
72.9452 94.0991 73.1757 94.1935 73.4796 94.2249 cv
cp
72.2536 90.2323 mo
73.0605 90.2323 li
72.5155 89.9285 72.2536 89.6246 72.2536 89.3102 cv
72.2536 89.1635 72.2955 89.0482 72.3793 88.9539 cv
72.4736 88.8596 72.5679 88.8072 72.6832 88.8072 cv
72.788 88.8072 72.8718 88.8491 72.9452 88.912 cv
73.0081 88.9853 73.05 89.0587 73.05 89.153 cv
73.05 89.2473 73.0081 89.3521 72.9137 89.4569 cv
72.8194 89.5722 72.7775 89.656 72.7775 89.7189 cv
72.7775 89.7608 72.809 89.8132 72.8614 89.8656 cv
72.9661 89.9809 73.1443 90.1066 73.3853 90.2323 cv
75.1039 90.2323 li
75.2925 90.2323 75.4497 90.2009 75.544 90.159 cv
75.6174 90.1171 75.6802 90.0647 75.7222 89.9704 cv
75.7746 89.8865 75.7955 89.7608 75.7955 89.6036 cv
75.9317 89.6036 li
75.9317 91.4374 li
75.7955 91.4374 li
75.7955 91.2488 75.7641 91.1231 75.7117 91.0288 cv
75.6698 90.9659 75.5964 90.924 75.5126 90.8925 cv
75.4602 90.8821 75.3344 90.8716 75.1248 90.8716 cv
73.7416 90.8716 li
73.3224 90.8716 73.0814 90.8821 72.9976 90.903 cv
72.9242 90.9135 72.8614 90.9449 72.8299 90.9973 cv
72.788 91.0392 72.767 91.0916 72.767 91.165 cv
72.767 91.2383 72.788 91.3327 72.8299 91.4374 cv
72.6937 91.4794 li
72.2536 90.3895 li
cp
72.2536 84.3012 mo
73.4691 84.3012 li
73.4691 84.4269 li
73.0919 84.5317 72.8299 84.6575 72.6937 84.8146 cv
72.547 84.9613 72.4841 85.1605 72.4841 85.4015 cv
72.4841 85.5796 72.526 85.7263 72.6308 85.8416 cv
72.7251 85.9569 72.8299 86.0093 72.9452 86.0093 cv
73.0919 86.0093 73.2176 85.9673 73.3224 85.8835 cv
73.4272 85.8102 73.5425 85.6425 73.6578 85.391 cv
73.9407 84.8251 li
74.1922 84.2907 74.538 84.0287 74.9572 84.0287 cv
75.282 84.0287 75.544 84.1545 75.7431 84.3955 cv
75.9422 84.647 76.047 84.9194 76.047 85.2233 cv
76.047 85.4434 76.0051 85.6949 75.9317 85.9778 cv
75.9003 86.0617 75.8898 86.135 75.8898 86.1874 cv
75.8898 86.2503 75.9213 86.2922 75.9946 86.3236 cv
75.9946 86.4599 li
74.7162 86.4599 li
74.7162 86.3236 li
75.0724 86.2503 75.3554 86.1141 75.5335 85.9045 cv
75.7222 85.7054 75.8165 85.4748 75.8165 85.2128 cv
75.8165 85.0347 75.7641 84.888 75.6593 84.7832 cv
75.5545 84.6679 75.4183 84.6051 75.2716 84.6051 cv
75.0934 84.6051 74.9467 84.6679 74.821 84.7937 cv
74.6952 84.9194 74.5485 85.1814 74.3599 85.5587 cv
74.1712 85.9359 74.0036 86.1769 73.8464 86.2922 cv
73.6997 86.4179 73.5111 86.4703 73.291 86.4703 cv
72.9976 86.4703 72.7461 86.3655 72.547 86.1665 cv
72.3479 85.9673 72.2536 85.7054 72.2536 85.391 cv
72.2536 85.2443 72.285 85.0766 72.3374 84.8775 cv
72.3793 84.7413 72.4003 84.6575 72.4003 84.6051 cv
72.4003 84.5631 72.3898 84.5317 72.3688 84.5107 cv
72.3584 84.4898 72.3164 84.4584 72.2536 84.4269 cv
cp
71.1847 82.4568 mo
72.3584 82.4568 li
72.3584 81.629 li
72.6308 81.629 li
72.6308 82.4568 li
74.9467 82.4568 li
75.1772 82.4568 75.3344 82.4254 75.4183 82.3625 cv
75.5021 82.2892 75.544 82.2053 75.544 82.1005 cv
75.544 82.0167 75.5126 81.9329 75.4602 81.8595 cv
75.4078 81.7757 75.324 81.7128 75.2192 81.6709 cv
75.2192 81.5137 li
75.4811 81.608 75.6698 81.7338 75.7955 81.9014 cv
75.9317 82.0691 75.9946 82.2368 75.9946 82.4149 cv
75.9946 82.5407 75.9632 82.6559 75.8898 82.7712 cv
75.827 82.8865 75.7326 82.9703 75.6069 83.0227 cv
75.4811 83.0751 75.2925 83.1065 75.041 83.1065 cv
72.6308 83.1065 li
72.6308 83.6724 li
72.5051 83.6724 li
72.4422 83.5257 72.3479 83.379 72.2117 83.2323 cv
72.0754 83.0856 71.9078 82.9494 71.7191 82.8341 cv
71.6248 82.7712 71.4467 82.6874 71.1847 82.5826 cv
cp
75.4183 79.2502 mo
75.7012 79.617 75.8689 79.8475 75.9108 79.9418 cv
75.9737 80.0781 76.0051 80.2353 76.0051 80.3924 cv
76.0051 80.6335 75.9213 80.8431 75.7536 81.0002 cv
75.5859 81.1574 75.3659 81.2413 75.0829 81.2413 cv
74.9153 81.2413 74.7581 81.1993 74.6323 81.126 cv
74.4542 81.0212 74.2865 80.8326 74.1293 80.5706 cv
73.9826 80.3086 73.7835 79.8685 73.5635 79.2502 cv
73.4272 79.2502 li
73.0709 79.2502 72.8194 79.3026 72.6937 79.4179 cv
72.5575 79.5332 72.4946 79.7008 72.4946 79.9104 cv
72.4946 80.0781 72.5365 80.2038 72.6203 80.3086 cv
72.7146 80.4029 72.809 80.4553 72.9242 80.4553 cv
73.1548 80.4448 li
73.27 80.4448 73.3644 80.4763 73.4272 80.5392 cv
73.5006 80.602 73.532 80.6754 73.532 80.7802 cv
73.532 80.8745 73.4901 80.9478 73.4272 81.0107 cv
73.3644 81.0736 73.27 81.105 73.1548 81.105 cv
72.9242 81.105 72.7251 80.9898 72.5365 80.7592 cv
72.3479 80.5287 72.2536 80.2143 72.2536 79.7951 cv
72.2536 79.4808 72.306 79.2188 72.4108 79.0197 cv
72.4946 78.8625 72.6203 78.7472 72.788 78.6739 cv
72.9033 78.632 73.1338 78.6005 73.4796 78.6005 cv
74.6952 78.6005 li
75.0305 78.6005 75.2401 78.6005 75.324 78.59 cv
75.3973 78.5691 75.4497 78.5481 75.4707 78.5167 cv
75.5021 78.4957 75.5126 78.4538 75.5126 78.4224 cv
75.5126 78.3805 75.5021 78.3385 75.4811 78.3071 cv
75.4497 78.2547 75.3554 78.1499 75.1982 77.9927 cv
75.4183 77.9927 li
75.806 78.2861 76.0051 78.5586 76.0051 78.8311 cv
76.0051 78.9568 75.9632 79.0616 75.8689 79.135 cv
75.785 79.2083 75.6278 79.2502 75.4183 79.2502 cv
cp
75.1668 79.2502 mo
73.8045 79.2502 li
73.9617 79.638 74.0665 79.8999 74.1293 80.0152 cv
74.2446 80.2143 74.3704 80.361 74.4961 80.4553 cv
74.6218 80.5392 74.7581 80.5811 74.9048 80.5811 cv
75.0934 80.5811 75.2506 80.5287 75.3659 80.4134 cv
75.4916 80.3086 75.5545 80.1724 75.5545 80.0362 cv
75.5545 79.8371 75.4287 79.5751 75.1668 79.2502 cv
cp
71.1847 76.6828 mo
72.3584 76.6828 li
72.3584 75.855 li
72.6308 75.855 li
72.6308 76.6828 li
74.9467 76.6828 li
75.1772 76.6828 75.3344 76.6514 75.4183 76.5885 cv
75.5021 76.5257 75.544 76.4313 75.544 76.337 cv
75.544 76.2427 75.5126 76.1589 75.4602 76.0855 cv
75.4078 76.0017 75.324 75.9388 75.2192 75.8969 cv
75.2192 75.7397 li
75.4811 75.834 75.6698 75.9598 75.7955 76.1274 cv
75.9317 76.2951 75.9946 76.4628 75.9946 76.6409 cv
75.9946 76.7667 75.9632 76.8819 75.8898 76.9972 cv
75.827 77.1125 75.7326 77.1963 75.6069 77.2487 cv
75.4811 77.3011 75.2925 77.3325 75.041 77.3325 cv
72.6308 77.3325 li
72.6308 77.8984 li
72.5051 77.8984 li
72.4422 77.7517 72.3479 77.605 72.2117 77.4583 cv
72.0754 77.3116 71.9078 77.1754 71.7191 77.0601 cv
71.6248 76.9972 71.4467 76.9134 71.1847 76.8086 cv
cp
73.6997 74.9014 mo
74.2341 74.9014 74.6533 74.7756 74.9572 74.5137 cv
75.2611 74.2517 75.4078 73.9478 75.4078 73.602 cv
75.4078 73.361 75.3449 73.1619 75.2192 72.9837 cv
75.0829 72.816 74.8629 72.6693 74.5485 72.5541 cv
74.6323 72.4283 li
74.9886 72.4807 75.3135 72.6484 75.6069 72.9104 cv
75.9003 73.1723 76.047 73.4972 76.047 73.8954 cv
76.047 74.325 75.8793 74.6918 75.544 74.9957 cv
75.2087 75.2996 74.7581 75.4568 74.1922 75.4568 cv
73.5844 75.4568 73.1024 75.2996 72.7566 74.9852 cv
72.4212 74.6709 72.2431 74.2831 72.2431 73.8011 cv
72.2431 73.4029 72.3793 73.078 72.6413 72.816 cv
72.9137 72.5541 73.2596 72.4283 73.6997 72.4283 cv
cp
73.4796 74.9014 mo
73.4796 73.2457 li
73.2491 73.2562 73.0919 73.2876 72.9976 73.3295 cv
72.8509 73.3924 72.7356 73.4867 72.6518 73.6229 cv
72.5679 73.7487 72.526 73.8849 72.526 74.0211 cv
72.526 74.2412 72.6099 74.4298 72.7775 74.608 cv
72.9452 74.7756 73.1757 74.87 73.4796 74.9014 cv
cp
72.2536 67.6394 mo
73.4691 67.6394 li
73.4691 67.7756 li
73.0919 67.8699 72.8299 67.9957 72.6937 68.1528 cv
72.547 68.31 72.4841 68.4986 72.4841 68.7397 cv
72.4841 68.9283 72.526 69.075 72.6308 69.1798 cv
72.7251 69.2951 72.8299 69.3475 72.9452 69.3475 cv
73.0919 69.3475 73.2176 69.3055 73.3224 69.2322 cv
73.4272 69.1484 73.5425 68.9807 73.6578 68.7397 cv
73.9407 68.1633 li
74.1922 67.6394 74.538 67.3669 74.9572 67.3669 cv
75.282 67.3669 75.544 67.4926 75.7431 67.7441 cv
75.9422 67.9852 76.047 68.2576 76.047 68.572 cv
76.047 68.7816 76.0051 69.0331 75.9317 69.316 cv
75.9003 69.3998 75.8898 69.4732 75.8898 69.5256 cv
75.8898 69.5885 75.9213 69.6304 75.9946 69.6723 cv
75.9946 69.7981 li
74.7162 69.7981 li
74.7162 69.6723 li
75.0724 69.599 75.3554 69.4522 75.5335 69.2531 cv
75.7222 69.0436 75.8165 68.813 75.8165 68.5615 cv
75.8165 68.3834 75.7641 68.2367 75.6593 68.1214 cv
75.5545 68.0061 75.4183 67.9537 75.2716 67.9537 cv
75.0934 67.9537 74.9467 68.0166 74.821 68.1424 cv
74.6952 68.2681 74.5485 68.5196 74.3599 68.8969 cv
74.1712 69.2741 74.0036 69.5151 73.8464 69.6409 cv
73.6997 69.7561 73.5111 69.8085 73.291 69.8085 cv
72.9976 69.8085 72.7461 69.7142 72.547 69.5151 cv
72.3479 69.3055 72.2536 69.0436 72.2536 68.7292 cv
72.2536 68.5825 72.285 68.4148 72.3374 68.2157 cv
72.3793 68.0795 72.4003 67.9957 72.4003 67.9537 cv
72.4003 67.9118 72.3898 67.8804 72.3688 67.8489 cv
72.3584 67.828 72.3164 67.7965 72.2536 67.7756 cv
cp
73.6997 66.2352 mo
74.2341 66.2456 74.6533 66.1094 74.9572 65.8474 cv
75.2611 65.5959 75.4078 65.2816 75.4078 64.9357 cv
75.4078 64.7052 75.3449 64.4956 75.2192 64.328 cv
75.0829 64.1498 74.8629 64.0031 74.5485 63.8878 cv
74.6323 63.7621 li
74.9886 63.825 75.3135 63.9821 75.6069 64.2441 cv
75.9003 64.5061 76.047 64.831 76.047 65.2292 cv
76.047 65.6588 75.8793 66.0256 75.544 66.3399 cv
75.2087 66.6438 74.7581 66.7906 74.1922 66.7906 cv
73.5844 66.7906 73.1024 66.6334 72.7566 66.319 cv
72.4212 66.0046 72.2431 65.6169 72.2431 65.1453 cv
72.2431 64.7366 72.3793 64.4118 72.6413 64.1498 cv
72.9137 63.8983 73.2596 63.7621 73.6997 63.7621 cv
cp
73.4796 66.2352 mo
73.4796 64.5795 li
73.2491 64.6004 73.0919 64.6214 72.9976 64.6633 cv
72.8509 64.7262 72.7356 64.831 72.6518 64.9567 cv
72.5679 65.0825 72.526 65.2187 72.526 65.3654 cv
72.526 65.575 72.6099 65.7741 72.7775 65.9417 cv
72.9452 66.1094 73.1757 66.2142 73.4796 66.2352 cv
cp
72.2536 60.1258 mo
76.8539 60.1258 li
77.0844 60.1258 77.2312 60.1049 77.294 60.0734 cv
77.3569 60.042 77.4093 60.0001 77.4512 59.9267 cv
77.4827 59.8638 77.5036 59.7381 77.5036 59.539 cv
77.6503 59.539 li
77.6503 61.3414 li
77.5036 61.3414 li
77.5036 61.268 li
77.5036 61.1213 77.4827 61.0165 77.4407 60.9432 cv
77.4093 60.8908 77.3569 60.8489 77.2835 60.8174 cv
77.2102 60.786 77.0635 60.7651 76.8539 60.7651 cv
75.3135 60.7651 li
75.5964 61.0061 75.785 61.2157 75.8898 61.3833 cv
75.9946 61.5615 76.047 61.7501 76.047 61.9387 cv
76.047 62.2845 75.8898 62.5989 75.5754 62.8714 cv
75.2611 63.1333 74.8314 63.2696 74.3075 63.2696 cv
73.6997 63.2696 73.2072 63.0914 72.8194 62.7351 cv
72.4422 62.3788 72.2536 61.9387 72.2536 61.4357 cv
72.2536 61.289 72.2745 61.1528 72.3164 61.027 cv
72.3584 60.9013 72.4212 60.786 72.5051 60.6917 cv
72.4317 60.5345 72.3479 60.3983 72.2536 60.2516 cv
cp
75.0724 60.7651 mo
73.3853 60.7651 li
73.1967 60.7651 73.0395 60.7965 72.9242 60.8384 cv
72.8194 60.8908 72.7251 60.9851 72.6413 61.1109 cv
72.5679 61.2471 72.526 61.3938 72.526 61.551 cv
72.526 61.8444 72.6518 62.0959 72.8928 62.3055 cv
73.1443 62.5151 73.5215 62.6199 74.0245 62.6199 cv
74.5066 62.6199 74.8734 62.5151 75.1144 62.295 cv
75.3659 62.0854 75.4916 61.8339 75.4916 61.53 cv
75.4916 61.3833 75.4602 61.2471 75.3973 61.1213 cv
75.324 61.0061 75.2192 60.8803 75.0724 60.7651 cv
cp
72.3584 56.1542 mo
74.5275 56.1542 li
74.9362 56.1542 75.1877 56.1438 75.282 56.1228 cv
75.3764 56.1018 75.4392 56.0704 75.4811 56.0285 cv
75.5126 55.9866 75.5335 55.9342 75.5335 55.8818 cv
75.5335 55.7979 75.5126 55.7036 75.4707 55.6093 cv
75.6069 55.5569 li
76.047 56.6258 li
76.047 56.7935 li
75.282 56.7935 li
75.6174 57.1078 75.827 57.3384 75.9108 57.506 cv
76.0051 57.6632 76.047 57.8309 76.047 58.009 cv
76.047 58.2186 75.9841 58.3863 75.8689 58.533 cv
75.7536 58.6797 75.6069 58.7845 75.4183 58.8369 cv
75.2401 58.8998 74.9781 58.9312 74.6533 58.9312 cv
73.05 58.9312 li
72.8823 58.9312 72.767 58.9417 72.7042 58.9836 cv
72.6308 59.015 72.5889 59.0674 72.547 59.1408 cv
72.5155 59.2141 72.4946 59.3504 72.5051 59.5285 cv
72.3584 59.5285 li
72.3584 58.2815 li
74.7476 58.2815 li
75.0829 58.2815 75.303 58.2186 75.4078 58.1033 cv
75.5126 57.9881 75.565 57.8519 75.565 57.6842 cv
75.565 57.5689 75.5335 57.4432 75.4602 57.3069 cv
75.3868 57.1602 75.2506 56.9926 75.0515 56.7935 cv
73.029 56.7935 li
72.8299 56.7935 72.6937 56.8354 72.6203 56.9087 cv
72.547 56.9821 72.5051 57.1393 72.5051 57.3698 cv
72.3584 57.3698 li
cp
73.6997 54.6872 mo
74.2341 54.6872 74.6533 54.5614 74.9572 54.2994 cv
75.2611 54.0375 75.4078 53.7336 75.4078 53.3877 cv
75.4078 53.1467 75.3449 52.9476 75.2192 52.7695 cv
75.0829 52.6018 74.8629 52.4551 74.5485 52.3398 cv
74.6323 52.2141 li
74.9886 52.2665 75.3135 52.4341 75.6069 52.6961 cv
75.9003 52.9581 76.047 53.283 76.047 53.6812 cv
76.047 54.1108 75.8793 54.4776 75.544 54.7815 cv
75.2087 55.0958 74.7581 55.2425 74.1922 55.2425 cv
73.5844 55.2425 73.1024 55.0854 72.7566 54.771 cv
72.4212 54.4566 72.2431 54.0689 72.2431 53.5869 cv
72.2431 53.1886 72.3793 52.8638 72.6413 52.6018 cv
72.9137 52.3503 73.2596 52.2141 73.6997 52.2141 cv
cp
73.4796 54.6872 mo
73.4796 53.0315 li
73.2491 53.0419 73.0919 53.0734 72.9976 53.1153 cv
72.8509 53.1782 72.7356 53.2725 72.6518 53.4087 cv
72.5679 53.5345 72.526 53.6707 72.526 53.8069 cv
72.526 54.027 72.6099 54.2156 72.7775 54.3937 cv
72.9452 54.5614 73.1757 54.6557 73.4796 54.6872 cv
cp
73.0081 50.6946 mo
72.5051 50.2754 72.2536 49.8772 72.2536 49.5 cv
72.2536 49.3009 72.2955 49.1332 72.4003 48.997 cv
72.4946 48.8503 72.6518 48.7455 72.8823 48.6617 cv
73.0395 48.5988 73.2805 48.5674 73.5949 48.5674 cv
75.1248 48.5674 li
75.3554 48.5674 75.5021 48.5569 75.5859 48.515 cv
75.6488 48.494 75.7012 48.4416 75.7431 48.3787 cv
75.7746 48.3158 75.7955 48.2006 75.7955 48.0224 cv
75.9317 48.0224 li
75.9317 49.7934 li
75.7955 49.7934 li
75.7955 49.72 li
75.7955 49.5524 75.7641 49.4371 75.7222 49.3742 cv
75.6698 49.3009 75.5964 49.259 75.4916 49.2275 cv
75.4497 49.217 75.3344 49.217 75.1248 49.217 cv
73.6578 49.217 li
73.3329 49.217 73.1024 49.259 72.9557 49.3428 cv
72.809 49.4266 72.7356 49.5733 72.7356 49.7724 cv
72.7356 50.0763 72.9033 50.3907 73.2386 50.6946 cv
75.1248 50.6946 li
75.3659 50.6946 75.5231 50.6841 75.5754 50.6527 cv
75.6488 50.6213 75.7117 50.5689 75.7431 50.506 cv
75.7746 50.4431 75.7955 50.3069 75.7955 50.1183 cv
75.9317 50.1183 li
75.9317 51.8892 li
75.7955 51.8892 li
75.7955 51.8054 li
75.7955 51.6273 75.7431 51.5015 75.6593 51.4386 cv
75.565 51.3758 75.3868 51.3443 75.1248 51.3443 cv
73.794 51.3443 li
73.3644 51.3443 73.1024 51.3548 73.0081 51.3758 cv
72.9242 51.3862 72.8509 51.4177 72.8194 51.4596 cv
72.788 51.5015 72.767 51.5539 72.767 51.6273 cv
72.767 51.7006 72.788 51.7844 72.8299 51.8892 cv
72.6937 51.9416 li
72.2536 50.8623 li
72.2536 50.6946 li
cp
74.5799 44.7005 mo
75.0515 44.7949 75.4078 44.9835 75.6593 45.2664 cv
75.9213 45.5494 76.047 45.8637 76.047 46.1991 cv
76.047 46.6077 75.8689 46.964 75.5335 47.2679 cv
75.1877 47.5614 74.7266 47.7185 74.1503 47.7185 cv
73.5844 47.7185 73.1338 47.5509 72.7775 47.2155 cv
72.4317 46.8802 72.2536 46.482 72.2536 46.0104 cv
72.2536 45.6542 72.3479 45.3712 72.526 45.1407 cv
72.7146 44.9206 72.9137 44.8053 73.1129 44.8053 cv
73.2072 44.8053 73.291 44.8368 73.3539 44.8997 cv
73.4167 44.9625 73.4482 45.0568 73.4377 45.1616 cv
73.4482 45.3188 73.3958 45.4341 73.291 45.5179 cv
73.2386 45.5598 73.1338 45.5913 72.9871 45.6018 cv
72.8299 45.6122 72.7146 45.6646 72.6308 45.7589 cv
72.5575 45.8533 72.5155 45.979 72.5155 46.1362 cv
72.5155 46.3982 72.6099 46.6077 72.7985 46.7649 cv
73.0605 46.9745 73.3958 47.0793 73.815 47.0793 cv
74.2446 47.0793 74.6218 46.9745 74.9467 46.7649 cv
75.2716 46.5554 75.4392 46.2724 75.4392 45.9161 cv
75.4392 45.6646 75.3449 45.4341 75.1772 45.235 cv
75.0515 45.0883 74.8314 44.952 74.5171 44.8158 cv
cp
73.6997 43.5898 mo
74.2341 43.5898 74.6533 43.464 74.9572 43.202 cv
75.2611 42.9401 75.4078 42.6362 75.4078 42.2799 cv
75.4078 42.0493 75.3449 41.8502 75.2192 41.6721 cv
75.0829 41.5044 74.8629 41.3577 74.5485 41.232 cv
74.6323 41.1167 li
74.9886 41.1691 75.3135 41.3263 75.6069 41.5882 cv
75.9003 41.8502 76.047 42.1856 76.047 42.5838 cv
76.047 43.0134 75.8793 43.3802 75.544 43.6841 cv
75.2087 43.988 74.7581 44.1452 74.1922 44.1452 cv
73.5844 44.1452 73.1024 43.988 72.7566 43.6736 cv
72.4212 43.3592 72.2431 42.961 72.2431 42.4895 cv
72.2431 42.0912 72.3793 41.7559 72.6413 41.5044 cv
72.9137 41.2424 73.2596 41.1167 73.6997 41.1167 cv
cp
73.4796 43.5898 mo
73.4796 41.9341 li
73.2491 41.9445 73.0919 41.976 72.9976 42.0179 cv
72.8509 42.0808 72.7356 42.1751 72.6518 42.3008 cv
72.5679 42.4371 72.526 42.5733 72.526 42.7095 cv
72.526 42.9296 72.6099 43.1182 72.7775 43.2859 cv
72.9452 43.464 73.1757 43.5583 73.4796 43.5898 cv
cp
72.2536 36.8936 mo
72.2536 36.3487 72.4527 35.9086 72.8718 35.5837 cv
73.2176 35.3112 73.6263 35.1645 74.0769 35.1645 cv
74.4018 35.1645 74.7266 35.2484 75.0515 35.3951 cv
75.3764 35.5523 75.6278 35.7619 75.7955 36.0343 cv
75.9632 36.3068 76.047 36.6002 76.047 36.9355 cv
76.047 37.47 75.827 37.8996 75.3973 38.214 cv
75.041 38.4864 74.6323 38.6227 74.1817 38.6227 cv
73.8569 38.6227 73.532 38.5388 73.2072 38.3712 cv
72.8823 38.214 72.6413 37.9939 72.4841 37.7319 cv
72.3269 37.47 72.2536 37.187 72.2536 36.8936 cv
cp
72.5051 37.0089 mo
72.5051 37.1451 72.547 37.2918 72.6308 37.428 cv
72.7146 37.5643 72.8509 37.6795 73.0605 37.7634 cv
73.27 37.8472 73.532 37.8891 73.8569 37.8891 cv
74.3704 37.8891 74.821 37.7948 75.1982 37.5852 cv
75.5754 37.3756 75.7641 37.1032 75.7641 36.7679 cv
75.7641 36.5164 75.6593 36.3068 75.4497 36.1391 cv
75.2506 35.9714 74.8838 35.8981 74.3808 35.8981 cv
73.7416 35.8981 73.2491 36.0343 72.8823 36.3068 cv
72.6308 36.4849 72.5051 36.7259 72.5051 37.0089 cv
cp
72.9766 33.6556 mo
72.4946 33.3097 72.2536 32.943 72.2536 32.5343 cv
72.2536 32.1675 72.4108 31.8531 72.7251 31.5807 cv
73.0395 31.3082 73.4691 31.172 74.0141 31.172 cv
74.6428 31.172 75.1563 31.3816 75.544 31.8008 cv
75.8793 32.157 76.047 32.5657 76.047 33.0058 cv
76.047 33.2154 76.0051 33.4355 75.9317 33.6451 cv
75.8584 33.8651 75.7431 34.0747 75.5859 34.3053 cv
71.8868 34.3053 li
71.4781 34.3053 71.2266 34.3157 71.1323 34.3367 cv
71.038 34.3577 70.9751 34.3786 70.9437 34.4205 cv
70.9122 34.4624 70.8913 34.5148 70.8913 34.5777 cv
70.8913 34.6511 70.9122 34.7454 70.9542 34.8502 cv
70.8179 34.913 li
70.3778 33.8337 li
70.3778 33.6556 li
cp
73.2281 33.6556 mo
75.3659 33.6556 li
75.4916 33.5298 75.5964 33.3936 75.6593 33.2469 cv
75.7222 33.1002 75.7641 32.9639 75.7641 32.8067 cv
75.7641 32.5762 75.6278 32.3561 75.3659 32.1466 cv
75.1039 31.9475 74.7266 31.8427 74.2341 31.8427 cv
73.773 31.8427 73.4167 31.9475 73.1757 32.1466 cv
72.9242 32.3561 72.809 32.5867 72.809 32.8487 cv
72.809 32.9849 72.8404 33.1211 72.9137 33.2573 cv
72.9661 33.3621 73.0709 33.4984 73.2281 33.6556 cv
cp
71.1847 29.6001 mo
72.3584 29.6001 li
72.3584 28.7618 li
72.6308 28.7618 li
72.6308 29.6001 li
74.9467 29.6001 li
75.1772 29.6001 75.3344 29.5687 75.4183 29.5058 cv
75.5021 29.4325 75.544 29.3486 75.544 29.2438 cv
75.544 29.16 75.5126 29.0762 75.4602 28.9923 cv
75.4078 28.919 75.324 28.8561 75.2192 28.8037 cv
75.2192 28.657 li
75.4811 28.7513 75.6698 28.8771 75.7955 29.0447 cv
75.9317 29.2124 75.9946 29.3801 75.9946 29.5582 cv
75.9946 29.6735 75.9632 29.7992 75.8898 29.9145 cv
75.827 30.0193 75.7326 30.1136 75.6069 30.166 cv
75.4811 30.2184 75.2925 30.2498 75.041 30.2498 cv
72.6308 30.2498 li
72.6308 30.8157 li
72.5051 30.8157 li
72.4422 30.669 72.3479 30.5223 72.2117 30.3756 cv
72.0754 30.2184 71.9078 30.0926 71.7191 29.9669 cv
71.6248 29.9145 71.4467 29.8307 71.1847 29.7259 cv
cp
75.4183 26.3935 mo
75.7012 26.7603 75.8689 26.9908 75.9108 27.0851 cv
75.9737 27.2214 76.0051 27.3681 76.0051 27.5357 cv
76.0051 27.7768 75.9213 27.9863 75.7536 28.1435 cv
75.5859 28.3007 75.3659 28.3846 75.0829 28.3846 cv
74.9153 28.3846 74.7581 28.3426 74.6323 28.2693 cv
74.4542 28.154 74.2865 27.9759 74.1293 27.7139 cv
73.9826 27.4414 73.7835 27.0013 73.5635 26.3935 cv
73.4272 26.3935 li
73.0709 26.3935 72.8194 26.4459 72.6937 26.5612 cv
72.5575 26.6765 72.4946 26.8336 72.4946 27.0537 cv
72.4946 27.2214 72.5365 27.3471 72.6203 27.4414 cv
72.7146 27.5462 72.809 27.5986 72.9242 27.5986 cv
73.1548 27.5881 li
73.27 27.5881 73.3644 27.6196 73.4272 27.6824 cv
73.5006 27.7348 73.532 27.8187 73.532 27.913 cv
73.532 28.0178 73.4901 28.0911 73.4272 28.154 cv
73.3644 28.2169 73.27 28.2483 73.1548 28.2483 cv
72.9242 28.2483 72.7251 28.1331 72.5365 27.9025 cv
72.3479 27.672 72.2536 27.3471 72.2536 26.9384 cv
72.2536 26.6241 72.306 26.3621 72.4108 26.1525 cv
72.4946 26.0058 72.6203 25.8905 72.788 25.8172 cv
72.9033 25.7648 73.1338 25.7438 73.4796 25.7438 cv
74.6952 25.7438 li
75.0305 25.7438 75.2401 25.7438 75.324 25.7229 cv
75.3973 25.7124 75.4497 25.6914 75.4707 25.66 cv
75.5021 25.6285 75.5126 25.5971 75.5126 25.5552 cv
75.5126 25.5133 75.5021 25.4818 75.4811 25.4504 cv
75.4497 25.398 75.3554 25.2932 75.1982 25.136 cv
75.4183 25.136 li
75.806 25.4294 76.0051 25.7019 76.0051 25.9639 cv
76.0051 26.1001 75.9632 26.1944 75.8689 26.2783 cv
75.785 26.3516 75.6278 26.383 75.4183 26.3935 cv
cp
75.1668 26.3935 mo
73.8045 26.3935 li
73.9617 26.7813 74.0665 27.0327 74.1293 27.148 cv
74.2446 27.3576 74.3704 27.5043 74.4961 27.5986 cv
74.6218 27.6824 74.7581 27.7244 74.9048 27.7244 cv
75.0934 27.7244 75.2506 27.672 75.3659 27.5567 cv
75.4916 27.4414 75.5545 27.3157 75.5545 27.169 cv
75.5545 26.9699 75.4287 26.7184 75.1668 26.3935 cv
cp
70.3778 23.9519 mo
70.3778 23.8471 70.4197 23.7528 70.4931 23.6794 cv
70.5769 23.6061 70.6607 23.5641 70.776 23.5641 cv
70.8808 23.5641 70.9751 23.6061 71.0589 23.6794 cv
71.1323 23.7528 71.1742 23.8471 71.1742 23.9519 cv
71.1742 24.0671 71.1323 24.1615 71.0589 24.2348 cv
70.9751 24.3186 70.8808 24.3606 70.776 24.3606 cv
70.6607 24.3606 70.5769 24.3186 70.4931 24.2453 cv
70.4197 24.1615 70.3778 24.0671 70.3778 23.9519 cv
cp
72.2536 23.6375 mo
75.1248 23.6375 li
75.3554 23.6375 75.5021 23.6166 75.5754 23.5851 cv
75.6488 23.5537 75.7012 23.5013 75.7431 23.4384 cv
75.7746 23.3755 75.7955 23.2603 75.7955 23.0926 cv
75.9317 23.0926 li
75.9317 24.8321 li
75.7955 24.8321 li
75.7955 24.654 75.7746 24.5387 75.7431 24.4758 cv
75.7117 24.413 75.6488 24.371 75.5754 24.3291 cv
75.5021 24.2977 75.3449 24.2767 75.1248 24.2767 cv
73.7521 24.2767 li
73.3644 24.2767 73.1129 24.2977 72.9976 24.3186 cv
72.9137 24.3396 72.8509 24.3606 72.8194 24.4025 cv
72.788 24.4444 72.767 24.4968 72.767 24.5597 cv
72.767 24.633 72.788 24.7273 72.8299 24.8321 cv
72.6937 24.8845 li
72.2536 23.8052 li
cp
73.0081 21.6046 mo
72.5051 21.1854 72.2536 20.7872 72.2536 20.3995 cv
72.2536 20.2108 72.2955 20.0432 72.4003 19.8965 cv
72.4946 19.7602 72.6518 19.645 72.8823 19.5611 cv
73.0395 19.5087 73.2805 19.4773 73.5949 19.4773 cv
75.1248 19.4773 li
75.3554 19.4773 75.5021 19.4563 75.5859 19.4249 cv
75.6488 19.3935 75.7012 19.3515 75.7431 19.2887 cv
75.7746 19.2153 75.7955 19.1 75.7955 18.9324 cv
75.9317 18.9324 li
75.9317 20.7033 li
75.7955 20.7033 li
75.7955 20.63 li
75.7955 20.4623 75.7641 20.3471 75.7222 20.2737 cv
75.6698 20.2108 75.5964 20.1584 75.4916 20.1375 cv
75.4497 20.127 75.3344 20.1165 75.1248 20.1165 cv
73.6578 20.1165 li
73.3329 20.1165 73.1024 20.1689 72.9557 20.2528 cv
72.809 20.3366 72.7356 20.4728 72.7356 20.6719 cv
72.7356 20.9863 72.9033 21.2902 73.2386 21.6046 cv
75.1248 21.6046 li
75.3659 21.6046 75.5231 21.5836 75.5754 21.5626 cv
75.6488 21.5207 75.7117 21.4683 75.7431 21.4054 cv
75.7746 21.3426 75.7955 21.2168 75.7955 21.0177 cv
75.9317 21.0177 li
75.9317 22.7887 li
75.7955 22.7887 li
75.7955 22.7153 li
75.7955 22.5267 75.7431 22.401 75.6593 22.3381 cv
75.565 22.2752 75.3868 22.2438 75.1248 22.2438 cv
73.794 22.2438 li
73.3644 22.2438 73.1024 22.2543 73.0081 22.2752 cv
72.9242 22.2962 72.8509 22.3276 72.8194 22.3695 cv
72.788 22.401 72.767 22.4638 72.767 22.5267 cv
72.767 22.6001 72.788 22.6839 72.8299 22.7887 cv
72.6937 22.8516 li
72.2536 21.7722 li
72.2536 21.6046 li
cp
73.6997 18.0416 mo
74.2341 18.0416 74.6533 17.9159 74.9572 17.6539 cv
75.2611 17.392 75.4078 17.0881 75.4078 16.7422 cv
75.4078 16.5012 75.3449 16.3021 75.2192 16.124 cv
75.0829 15.9563 74.8629 15.8096 74.5485 15.6943 cv
74.6323 15.5686 li
74.9886 15.621 75.3135 15.7886 75.6069 16.0506 cv
75.9003 16.3126 76.047 16.6375 76.047 17.0357 cv
76.047 17.4653 75.8793 17.8321 75.544 18.136 cv
75.2087 18.4399 74.7581 18.597 74.1922 18.597 cv
73.5844 18.597 73.1024 18.4399 72.7566 18.1255 cv
72.4212 17.8111 72.2431 17.4234 72.2431 16.9413 cv
72.2431 16.5431 72.3793 16.2183 72.6413 15.9563 cv
72.9137 15.7048 73.2596 15.5686 73.6997 15.5686 cv
cp
73.4796 18.0416 mo
73.4796 16.386 li
73.2491 16.3964 73.0919 16.4279 72.9976 16.4698 cv
72.8509 16.5327 72.7356 16.627 72.6518 16.7632 cv
72.5679 16.889 72.526 17.0252 72.526 17.1614 cv
72.526 17.3815 72.6099 17.5701 72.7775 17.7482 cv
72.9452 17.9159 73.1757 18.0102 73.4796 18.0416 cv
cp
75.5335 12.5715 mo
75.7117 12.7392 75.8479 12.9174 75.9213 13.0745 cv
76.0051 13.2422 76.047 13.4204 76.047 13.6195 cv
76.047 14.0072 75.8793 14.353 75.5545 14.6464 cv
75.2296 14.9294 74.8105 15.0761 74.297 15.0761 cv
73.7835 15.0761 73.312 14.9189 72.8823 14.594 cv
72.4632 14.2692 72.2431 13.8605 72.2431 13.347 cv
72.2431 13.0326 72.3479 12.7707 72.547 12.5715 cv
71.8868 12.5715 li
71.4781 12.5715 71.2266 12.582 71.1323 12.5925 cv
71.038 12.6135 70.9751 12.6449 70.9437 12.6868 cv
70.9122 12.7287 70.8913 12.7811 70.8913 12.844 cv
70.8913 12.9174 70.9122 13.0012 70.9542 13.1165 cv
70.8179 13.1689 li
70.3778 12.1 li
70.3778 11.9218 li
74.5171 11.9218 li
74.9362 11.9218 75.1877 11.9114 75.282 11.8904 cv
75.3764 11.8695 75.4392 11.838 75.4811 11.7961 cv
75.5126 11.7542 75.5335 11.7018 75.5335 11.6494 cv
75.5335 11.576 75.5126 11.4817 75.4707 11.3665 cv
75.6069 11.3245 li
76.047 12.3829 li
76.047 12.5715 li
cp
75.2611 12.5715 mo
73.4167 12.5715 li
73.2386 12.582 73.0814 12.6344 72.9347 12.7078 cv
72.788 12.7811 72.6727 12.8859 72.5994 13.0221 cv
72.526 13.1479 72.4946 13.2737 72.4946 13.3994 cv
72.4946 13.6195 72.5889 13.829 72.7985 14.0072 cv
73.0709 14.2482 73.4691 14.3635 73.9826 14.3635 cv
74.5171 14.3635 74.9153 14.2482 75.1982 14.0177 cv
75.4707 13.7871 75.6174 13.5356 75.6174 13.2527 cv
75.6174 13.0221 75.4916 12.7916 75.2611 12.5715 cv
f
82.5755 103.415 mo
82.0935 103.069 81.8525 102.692 81.8525 102.294 cv
81.8525 101.927 82.0096 101.602 82.324 101.33 cv
82.6384 101.057 83.068 100.921 83.6129 100.921 cv
84.2417 100.921 84.7552 101.131 85.1429 101.55 cv
85.4782 101.917 85.6459 102.315 85.6459 102.765 cv
85.6459 102.975 85.604 103.185 85.5306 103.394 cv
85.4573 103.614 85.342 103.834 85.1953 104.054 cv
81.4857 104.054 li
81.077 104.054 80.8255 104.065 80.7312 104.086 cv
80.6369 104.107 80.574 104.138 80.5426 104.18 cv
80.5111 104.222 80.4902 104.274 80.4902 104.337 cv
80.4902 104.411 80.5111 104.494 80.553 104.61 cv
80.4168 104.662 li
79.9767 103.593 li
79.9767 103.415 li
cp
82.827 103.415 mo
84.9648 103.415 li
85.0905 103.279 85.1953 103.143 85.2582 102.996 cv
85.321 102.86 85.363 102.713 85.363 102.566 cv
85.363 102.325 85.2267 102.105 84.9648 101.906 cv
84.7028 101.697 84.3255 101.592 83.833 101.592 cv
83.3719 101.592 83.0156 101.697 82.7746 101.906 cv
82.5336 102.105 82.4078 102.336 82.4078 102.598 cv
82.4078 102.734 82.4393 102.881 82.5126 103.017 cv
82.565 103.122 82.6698 103.247 82.827 103.415 cv
cp
81.9572 100.596 mo
81.9572 98.93 li
82.104 98.93 li
82.104 99.0139 li
82.104 99.1291 82.1249 99.213 82.1773 99.2758 cv
82.2297 99.3282 82.2926 99.3597 82.3659 99.3597 cv
82.4707 99.3597 82.6069 99.3177 82.7851 99.2339 cv
84.5875 98.3641 li
82.6174 97.5573 li
82.5126 97.5153 82.4078 97.4944 82.3031 97.4944 cv
82.2507 97.4944 82.2192 97.5049 82.1983 97.5258 cv
82.1668 97.5468 82.1459 97.5782 82.1249 97.6201 cv
82.1144 97.662 82.104 97.7459 82.104 97.8507 cv
81.9572 97.8507 li
81.9572 96.6875 li
82.104 96.6875 li
82.1144 96.7818 82.1354 96.8656 82.1668 96.918 cv
82.1983 96.9599 82.2507 97.0228 82.3345 97.0857 cv
82.3764 97.1067 82.4707 97.1486 82.6384 97.2219 cv
86.2118 98.6785 li
86.5576 98.8148 86.8196 99.0034 86.9977 99.2234 cv
87.1758 99.454 87.2597 99.674 87.2597 99.8836 cv
87.2597 100.041 87.2178 100.167 87.1235 100.261 cv
87.0396 100.366 86.9348 100.418 86.8196 100.418 cv
86.7148 100.418 86.6205 100.376 86.5576 100.303 cv
86.4947 100.229 86.4633 100.135 86.4633 100.009 cv
86.4633 99.9255 86.4842 99.8103 86.5471 99.6636 cv
86.589 99.5588 86.5995 99.4854 86.5995 99.4645 cv
86.5995 99.3806 86.5681 99.2968 86.4842 99.213 cv
86.4004 99.1186 86.2432 99.0243 86.0127 98.93 cv
85.3944 98.6785 li
82.6908 99.957 li
82.6174 99.9989 82.5126 100.062 82.3974 100.146 cv
82.3031 100.208 82.2402 100.261 82.2087 100.303 cv
82.1668 100.366 82.1354 100.46 82.104 100.596 cv
cp
83.2986 93.7952 mo
83.833 93.7952 84.2522 93.6695 84.5561 93.4075 cv
84.86 93.1455 85.0067 92.8416 85.0067 92.4854 cv
85.0067 92.2548 84.9438 92.0452 84.818 91.8776 cv
84.6818 91.6994 84.4618 91.5527 84.1474 91.4374 cv
84.2312 91.3222 li
84.5875 91.3746 84.9124 91.5318 85.2058 91.7937 cv
85.4992 92.0557 85.6459 92.391 85.6459 92.7893 cv
85.6459 93.2189 85.4782 93.5857 85.1429 93.8896 cv
84.8076 94.1935 84.357 94.3506 83.7911 94.3506 cv
83.1833 94.3506 82.7013 94.1935 82.3555 93.8791 cv
82.0201 93.5647 81.842 93.1665 81.842 92.6949 cv
81.842 92.2967 81.9782 91.9614 82.2402 91.7099 cv
82.5126 91.4479 82.8585 91.3222 83.2986 91.3222 cv
cp
83.0785 93.7952 mo
83.0785 92.1395 li
82.848 92.15 82.6908 92.1815 82.5965 92.2129 cv
82.4498 92.2863 82.3345 92.3806 82.2507 92.5063 cv
82.1668 92.6425 82.1249 92.7683 82.1249 92.915 cv
82.1249 93.1246 82.2087 93.3237 82.3764 93.4914 cv
82.5441 93.659 82.7746 93.7638 83.0785 93.7952 cv
cp
81.9572 90.9868 mo
81.9572 89.2997 li
82.104 89.2997 li
82.104 89.415 82.1144 89.4883 82.1563 89.5302 cv
82.1878 89.5722 82.2402 89.5931 82.3031 89.5931 cv
82.3659 89.5931 82.4602 89.5512 82.586 89.4569 cv
82.6279 89.4255 82.6908 89.3835 82.7851 89.3311 cv
83.1938 89.0692 li
82.7851 88.7757 li
82.5231 88.5976 82.3659 88.5033 82.2926 88.5033 cv
82.2402 88.5033 82.1983 88.5242 82.1563 88.5662 cv
82.1249 88.6081 82.104 88.6814 82.104 88.7757 cv
81.9572 88.7757 li
81.9572 87.5706 li
82.104 87.5706 li
82.104 87.6964 82.1459 87.8117 82.2087 87.906 cv
82.2926 88.0317 82.4917 88.1994 82.7851 88.4299 cv
83.4348 88.912 li
84.7133 88.0212 li
85.0381 87.8012 85.2267 87.644 85.2896 87.5497 cv
85.3525 87.4659 85.3839 87.3401 85.3944 87.1934 cv
85.5306 87.1934 li
85.5306 88.8805 li
85.3944 88.8805 li
85.3944 88.7653 85.363 88.671 85.3106 88.6081 cv
85.2791 88.5557 85.2267 88.5347 85.1743 88.5347 cv
85.1115 88.5347 84.9648 88.6186 84.7133 88.7757 cv
83.9483 89.2997 li
84.7133 89.8761 li
84.9543 90.0542 85.0905 90.1485 85.1429 90.1485 cv
85.2058 90.1485 85.2582 90.1171 85.3106 90.0542 cv
85.363 90.0018 85.3839 89.9075 85.3944 89.7922 cv
85.5306 89.7922 li
85.5306 90.9554 li
85.3944 90.9554 li
85.3839 90.8716 85.3525 90.7877 85.3001 90.7144 cv
85.2163 90.6201 85.0276 90.4524 84.7133 90.2114 cv
83.7177 89.4674 li
82.7327 90.1485 li
82.4602 90.3371 82.2821 90.4838 82.2087 90.5886 cv
82.1354 90.6934 82.104 90.8297 82.104 90.9868 cv
cp
82.3135 87.0991 mo
81.8629 85.9988 li
81.8629 85.8521 li
82.7013 85.8521 li
82.3869 85.6634 82.1668 85.4853 82.0411 85.2967 cv
81.9153 85.1081 81.8525 84.909 81.8525 84.7098 cv
81.8525 84.3431 81.9887 84.0497 82.2716 83.8086 cv
82.6174 83.5152 83.068 83.3685 83.6129 83.3685 cv
84.2312 83.3685 84.7447 83.5467 85.1429 83.903 cv
85.4782 84.1859 85.6459 84.5527 85.6459 85.0033 cv
85.6459 85.1919 85.6145 85.3596 85.5621 85.4958 cv
85.5201 85.6006 85.4468 85.7158 85.3315 85.8521 cv
86.4213 85.8521 li
86.6624 85.8521 86.8196 85.8311 86.8824 85.8102 cv
86.9453 85.7787 86.9977 85.7263 87.0396 85.653 cv
87.0815 85.5796 87.1025 85.4434 87.1025 85.2443 cv
87.2492 85.2443 li
87.2492 87.12 li
87.1025 87.12 li
87.1025 87.0257 li
87.1025 86.879 87.0711 86.7533 87.0187 86.659 cv
86.9872 86.6066 86.9453 86.5647 86.8824 86.5437 cv
86.8196 86.5123 86.6519 86.5018 86.3899 86.5018 cv
83.0156 86.5018 li
82.7746 86.5018 82.6279 86.5123 82.565 86.5332 cv
82.5022 86.5542 82.4602 86.5856 82.4288 86.6275 cv
82.3974 86.6799 82.3869 86.7428 82.3869 86.8161 cv
82.3869 86.879 82.3974 86.9629 82.4393 87.0572 cv
cp
82.9318 85.8521 mo
84.2731 85.8521 li
84.5561 85.8521 84.7447 85.8416 84.839 85.8206 cv
84.9857 85.7787 85.1219 85.6949 85.2372 85.5482 cv
85.3525 85.4015 85.4049 85.2233 85.4049 85.0137 cv
85.4049 84.7518 85.3106 84.5422 85.101 84.3745 cv
84.839 84.1649 84.4618 84.0601 83.9797 84.0601 cv
83.4348 84.0601 83.0156 84.1859 82.7222 84.4269 cv
82.5231 84.5841 82.4183 84.7832 82.4183 85.0137 cv
82.4183 85.1395 82.4498 85.2652 82.5126 85.391 cv
82.5546 85.4853 82.7013 85.632 82.9318 85.8521 cv
cp
85.0172 80.8116 mo
85.3001 81.1784 85.4678 81.4089 85.5097 81.5032 cv
85.5725 81.6499 85.604 81.7966 85.604 81.9538 cv
85.604 82.2053 85.5201 82.4044 85.3525 82.5721 cv
85.1848 82.7293 84.9648 82.8131 84.6818 82.8131 cv
84.5142 82.8131 84.357 82.7712 84.2312 82.6874 cv
84.0531 82.5826 83.8854 82.394 83.7387 82.132 cv
83.5815 81.87 83.3824 81.4299 83.1623 80.8116 cv
83.0261 80.8116 li
82.6698 80.8116 82.4183 80.8745 82.2926 80.9898 cv
82.1563 81.0945 82.0935 81.2622 82.0935 81.4823 cv
82.0935 81.6395 82.1354 81.7757 82.2192 81.87 cv
82.3135 81.9748 82.4078 82.0167 82.5231 82.0167 cv
82.7537 82.0167 li
82.8689 82.0167 82.9632 82.0377 83.0261 82.1005 cv
83.0995 82.1634 83.1309 82.2473 83.1309 82.3416 cv
83.1309 82.4359 83.0995 82.5197 83.0261 82.5826 cv
82.9632 82.6455 82.8689 82.6769 82.7537 82.6769 cv
82.5231 82.6769 82.324 82.5616 82.1354 82.3311 cv
81.9468 82.1005 81.8525 81.7757 81.8525 81.367 cv
81.8525 81.0422 81.9048 80.7802 82.0096 80.5811 cv
82.0935 80.4239 82.2192 80.3191 82.3869 80.2457 cv
82.5022 80.1933 82.7327 80.1724 83.0785 80.1724 cv
84.2941 80.1724 li
84.6294 80.1724 84.839 80.1619 84.9228 80.1514 cv
84.9962 80.1409 85.0486 80.12 85.0695 80.0886 cv
85.101 80.0571 85.1115 80.0257 85.1115 79.9838 cv
85.1115 79.9418 85.101 79.9104 85.08 79.879 cv
85.0486 79.8161 84.9543 79.7113 84.7971 79.5541 cv
85.0172 79.5541 li
85.4049 79.8475 85.604 80.1305 85.604 80.3924 cv
85.604 80.5182 85.5621 80.623 85.4678 80.6963 cv
85.3839 80.7697 85.2372 80.8116 85.0172 80.8116 cv
cp
84.7656 80.8116 mo
83.4034 80.8116 li
83.5605 81.2098 83.6653 81.4613 83.7282 81.5766 cv
83.8435 81.7862 83.9692 81.9329 84.095 82.0167 cv
84.2207 82.111 84.357 82.1529 84.5037 82.1529 cv
84.6923 82.1529 84.8495 82.1005 84.9648 81.9853 cv
85.0905 81.87 85.1534 81.7443 85.1534 81.5975 cv
85.1534 81.3984 85.0276 81.1365 84.7656 80.8116 cv
cp
82.6069 78.2547 mo
82.104 77.8355 81.8525 77.4268 81.8525 77.0496 cv
81.8525 76.861 81.9048 76.6828 81.9992 76.5466 cv
82.0935 76.4104 82.2507 76.2951 82.4812 76.2113 cv
82.6384 76.1589 82.8794 76.1274 83.1938 76.1274 cv
84.7237 76.1274 li
84.9543 76.1274 85.101 76.1065 85.1848 76.0751 cv
85.2477 76.0436 85.3001 75.9912 85.342 75.9283 cv
85.3734 75.8655 85.3944 75.7502 85.3944 75.5825 cv
85.5306 75.5825 li
85.5306 77.343 li
85.3944 77.343 li
85.3944 77.2697 li
85.3944 77.102 85.363 76.9867 85.321 76.9239 cv
85.2686 76.861 85.1953 76.8086 85.0905 76.7876 cv
85.0486 76.7771 84.9333 76.7667 84.7237 76.7667 cv
83.2567 76.7667 li
82.9318 76.7667 82.7013 76.8086 82.5546 76.8924 cv
82.4078 76.9762 82.3345 77.123 82.3345 77.3221 cv
82.3345 77.6364 82.5022 77.9403 82.8375 78.2547 cv
84.7237 78.2547 li
84.9648 78.2547 85.1219 78.2337 85.1743 78.2023 cv
85.2477 78.1709 85.3106 78.1185 85.342 78.0556 cv
85.3734 77.9927 85.3944 77.867 85.3944 77.6679 cv
85.5306 77.6679 li
85.5306 79.4388 li
85.3944 79.4388 li
85.3944 79.355 li
85.3944 79.1769 85.3525 79.0511 85.2582 78.9882 cv
85.1639 78.9254 84.9857 78.8939 84.7237 78.8939 cv
83.3929 78.8939 li
82.9632 78.8939 82.7013 78.9044 82.6174 78.9254 cv
82.5231 78.9463 82.4602 78.9778 82.4183 79.0092 cv
82.3869 79.0511 82.3659 79.1035 82.3659 79.1769 cv
82.3659 79.2502 82.3869 79.3341 82.4288 79.4388 cv
82.2926 79.4912 li
81.8525 78.4224 li
81.8525 78.2547 li
cp
85.1324 72.7636 mo
85.3106 72.9418 85.4468 73.1095 85.5201 73.2771 cv
85.604 73.4448 85.6459 73.6229 85.6459 73.822 cv
85.6459 74.2098 85.4782 74.5451 85.1534 74.8385 cv
84.8285 75.1319 84.4094 75.2786 83.8959 75.2786 cv
83.3824 75.2786 82.9108 75.111 82.4812 74.7966 cv
82.062 74.4717 81.842 74.0526 81.842 73.5496 cv
81.842 73.2352 81.9468 72.9732 82.1459 72.7636 cv
81.4857 72.7636 li
81.077 72.7636 80.8255 72.7741 80.7312 72.7951 cv
80.6369 72.816 80.574 72.8475 80.5426 72.8894 cv
80.5111 72.9313 80.4902 72.9837 80.4902 73.0466 cv
80.4902 73.1095 80.5111 73.2038 80.553 73.3086 cv
80.4168 73.361 li
79.9767 72.3026 li
79.9767 72.1244 li
84.1159 72.1244 li
84.5351 72.1244 84.7866 72.1139 84.8809 72.093 cv
84.9752 72.072 85.0381 72.0406 85.08 71.9987 cv
85.1115 71.9568 85.1324 71.9044 85.1324 71.852 cv
85.1324 71.7786 85.1115 71.6843 85.0695 71.569 cv
85.2058 71.5271 li
85.6459 72.5855 li
85.6459 72.7636 li
cp
84.86 72.7636 mo
83.0156 72.7636 li
82.8375 72.7846 82.6803 72.8265 82.5336 72.9104 cv
82.3869 72.9837 82.2716 73.0885 82.1983 73.2142 cv
82.1249 73.3505 82.0935 73.4762 82.0935 73.5915 cv
82.0935 73.822 82.1878 74.0316 82.3974 74.2098 cv
82.6698 74.4403 83.068 74.5661 83.5815 74.5661 cv
84.1159 74.5661 84.5142 74.4508 84.7971 74.2202 cv
85.0695 73.9897 85.2163 73.7382 85.2163 73.4553 cv
85.2163 73.2142 85.0905 72.9837 84.86 72.7636 cv
cp
79.9767 70.3849 mo
79.9767 70.2696 80.0186 70.1858 80.092 70.1019 cv
80.1758 70.0286 80.2701 69.9867 80.3749 69.9867 cv
80.4797 69.9867 80.574 70.0286 80.6578 70.1019 cv
80.7312 70.1858 80.7731 70.2696 80.7731 70.3849 cv
80.7731 70.4897 80.7312 70.584 80.6578 70.6678 cv
80.574 70.7412 80.4797 70.7831 80.3749 70.7831 cv
80.2701 70.7831 80.1758 70.7412 80.092 70.6678 cv
80.0186 70.5945 79.9767 70.5002 79.9767 70.3849 cv
cp
81.8525 70.06 mo
84.7237 70.06 li
84.9543 70.06 85.101 70.0391 85.1743 70.0076 cv
85.2477 69.9762 85.3001 69.9343 85.342 69.8609 cv
85.3734 69.798 85.3944 69.6828 85.3944 69.5151 cv
85.5306 69.5151 li
85.5306 71.2547 li
85.3944 71.2547 li
85.3944 71.0765 85.3734 70.9612 85.342 70.8984 cv
85.3106 70.846 85.2477 70.7936 85.1743 70.7621 cv
85.101 70.7202 84.9438 70.7097 84.7237 70.7097 cv
83.351 70.7097 li
82.9632 70.7097 82.7117 70.7202 82.5965 70.7412 cv
82.5126 70.7621 82.4498 70.7936 82.4183 70.825 cv
82.3869 70.8669 82.3659 70.9193 82.3659 70.9927 cv
82.3659 71.066 82.3869 71.1499 82.4288 71.2547 cv
82.2926 71.307 li
81.8525 70.2277 li
cp
82.6069 68.0271 mo
82.104 67.6079 81.8525 67.2097 81.8525 66.8325 cv
81.8525 66.6334 81.9048 66.4657 81.9992 66.3295 cv
82.0935 66.1828 82.2507 66.0675 82.4812 65.9941 cv
82.6384 65.9313 82.8794 65.8998 83.1938 65.8998 cv
84.7237 65.8998 li
84.9543 65.8998 85.101 65.8893 85.1848 65.8474 cv
85.2477 65.816 85.3001 65.7741 85.342 65.7112 cv
85.3734 65.6483 85.3944 65.5331 85.3944 65.3549 cv
85.5306 65.3549 li
85.5306 67.1259 li
85.3944 67.1259 li
85.3944 67.0525 li
85.3944 66.8849 85.363 66.7696 85.321 66.7067 cv
85.2686 66.6334 85.1953 66.5914 85.0905 66.56 cv
85.0486 66.5495 84.9333 66.5495 84.7237 66.5495 cv
83.2567 66.5495 li
82.9318 66.5495 82.7013 66.5914 82.5546 66.6753 cv
82.4078 66.7591 82.3345 66.9058 82.3345 67.1049 cv
82.3345 67.4088 82.5022 67.7232 82.8375 68.0271 cv
84.7237 68.0271 li
84.9648 68.0271 85.1219 68.0166 85.1743 67.9852 cv
85.2477 67.9537 85.3106 67.9013 85.342 67.8385 cv
85.3734 67.7756 85.3944 67.6394 85.3944 67.4507 cv
85.5306 67.4507 li
85.5306 69.2112 li
85.3944 69.2112 li
85.3944 69.1379 li
85.3944 68.9597 85.3525 68.834 85.2582 68.7711 cv
85.1639 68.7082 84.9857 68.6768 84.7237 68.6768 cv
83.3929 68.6768 li
82.9632 68.6768 82.7013 68.6873 82.6174 68.6977 cv
82.5231 68.7187 82.4602 68.7501 82.4183 68.7921 cv
82.3869 68.834 82.3659 68.8864 82.3659 68.9492 cv
82.3659 69.0226 82.3869 69.1169 82.4288 69.2112 cv
82.2926 69.2741 li
81.8525 68.1947 li
81.8525 68.0271 li
cp
84.2312 64.1184 mo
84.1264 64.3279 83.9692 64.5061 83.7806 64.6214 cv
83.592 64.7366 83.3824 64.789 83.1519 64.789 cv
82.7956 64.789 82.4917 64.6633 82.2297 64.3908 cv
81.9782 64.1288 81.8525 63.783 81.8525 63.3639 cv
81.8525 63.0285 81.9363 62.7351 82.104 62.4836 cv
82.104 61.7291 li
82.104 61.6139 82.104 61.551 82.1144 61.53 cv
82.1144 61.5091 82.1249 61.4986 82.1459 61.4881 cv
82.1668 61.4776 82.2087 61.4671 82.2716 61.4671 cv
82.3345 61.4671 82.3869 61.4776 82.4078 61.4881 cv
82.4183 61.4986 82.4288 61.5091 82.4393 61.53 cv
82.4498 61.551 82.4498 61.6139 82.4498 61.7291 cv
82.4498 62.1902 li
82.6384 62.0435 82.8794 61.9701 83.1728 61.9701 cv
83.5082 61.9701 83.7911 62.0959 84.0216 62.3579 cv
84.2626 62.6094 84.3779 62.9552 84.3779 63.3848 cv
84.3779 63.5525 84.357 63.7411 84.3046 63.9193 cv
84.3989 64.0345 84.4932 64.1184 84.5665 64.1603 cv
84.6399 64.1917 84.7028 64.2127 84.7552 64.2127 cv
84.7971 64.2127 84.839 64.1917 84.8809 64.1498 cv
84.9228 64.1079 84.9543 64.0241 84.9752 63.8983 cv
84.9857 63.825 84.9962 63.6468 84.9962 63.3534 cv
85.0172 62.819 85.0276 62.4731 85.0486 62.3055 cv
85.0905 62.0645 85.1743 61.8758 85.321 61.7291 cv
85.4678 61.5824 85.6459 61.5091 85.866 61.5091 cv
86.1594 61.5091 86.4318 61.6558 86.6938 61.9282 cv
87.0711 62.3369 87.2597 62.8609 87.2597 63.5211 cv
87.2597 64.0241 87.1444 64.4432 86.9243 64.789 cv
86.7881 64.9881 86.6519 65.0824 86.5157 65.0824 cv
86.4528 65.0824 86.3899 65.072 86.327 65.0405 cv
86.2327 64.9986 86.0965 64.9043 85.9288 64.7681 cv
85.8974 64.7471 85.7612 64.6109 85.4992 64.3699 cv
85.4258 64.5061 85.3525 64.6004 85.2896 64.6528 cv
85.2267 64.7157 85.1534 64.7366 85.0695 64.7366 cv
84.9752 64.7366 84.8704 64.7052 84.7447 64.6318 cv
84.6294 64.5585 84.4513 64.3803 84.2312 64.1184 cv
cp
82.0411 63.4372 mo
82.0411 63.6258 82.1144 63.7935 82.2716 63.9193 cv
82.4183 64.045 82.6593 64.1184 82.9737 64.1184 cv
83.3824 64.1184 83.7073 64.0241 83.9273 63.8459 cv
84.1055 63.7097 84.1893 63.542 84.1893 63.3324 cv
84.1893 63.1333 84.1159 62.9761 83.9692 62.8399 cv
83.8225 62.7142 83.5815 62.6513 83.2671 62.6513 cv
82.8585 62.6513 82.5336 62.7456 82.2926 62.9237 cv
82.1249 63.06 82.0411 63.2276 82.0411 63.4372 cv
cp
85.5306 64.1498 mo
85.6669 64.2756 85.7926 64.3699 85.9079 64.4327 cv
86.0231 64.4956 86.1279 64.5271 86.2222 64.5271 cv
86.348 64.5271 86.4528 64.4537 86.5471 64.2965 cv
86.7148 64.0345 86.7881 63.6573 86.7881 63.1648 cv
86.7881 62.7037 86.7043 62.3579 86.5471 62.1273 cv
86.3794 61.9073 86.2013 61.8025 86.0127 61.8025 cv
85.8764 61.8025 85.7821 61.8654 85.7297 62.0016 cv
85.6669 62.1378 85.6354 62.3998 85.6249 62.798 cv
85.604 63.3848 85.583 63.8354 85.5306 64.1498 cv
cp
79.9767 57.8414 mo
84.7237 57.8414 li
84.9543 57.8414 85.101 57.8204 85.1743 57.789 cv
85.2477 57.7575 85.3001 57.7051 85.342 57.6423 cv
85.3734 57.5794 85.3944 57.4432 85.3944 57.265 cv
85.5306 57.265 li
85.5306 59.015 li
85.3944 59.015 li
85.3944 58.8578 85.3734 58.7426 85.342 58.6797 cv
85.3106 58.6168 85.2477 58.5749 85.1743 58.5435 cv
85.101 58.5016 84.9438 58.4911 84.7237 58.4911 cv
81.4752 58.4911 li
81.077 58.4911 80.8255 58.5016 80.7312 58.512 cv
80.6369 58.533 80.574 58.5644 80.5426 58.6063 cv
80.5111 58.6483 80.4902 58.7007 80.4902 58.7635 cv
80.4902 58.8264 80.5111 58.9102 80.553 59.015 cv
80.4168 59.0884 li
79.9767 58.0195 li
cp
81.8525 55.0958 mo
81.8525 54.5614 82.0516 54.1213 82.4707 53.7964 cv
82.8165 53.5135 83.2252 53.3773 83.6758 53.3773 cv
84.0007 53.3773 84.3255 53.4506 84.6504 53.6078 cv
84.9752 53.765 85.2267 53.9746 85.3944 54.247 cv
85.5621 54.509 85.6459 54.8129 85.6459 55.1378 cv
85.6459 55.6827 85.4258 56.1123 84.9962 56.4267 cv
84.6399 56.6991 84.2312 56.8249 83.7806 56.8249 cv
83.4558 56.8249 83.1309 56.7515 82.8061 56.5839 cv
82.4812 56.4267 82.2402 56.2066 82.083 55.9446 cv
81.9258 55.6827 81.8525 55.3997 81.8525 55.0958 cv
cp
82.104 55.2216 mo
82.104 55.3578 82.1459 55.494 82.2297 55.6408 cv
82.3135 55.777 82.4498 55.8923 82.6593 55.9761 cv
82.8689 56.0599 83.1309 56.1018 83.4558 56.1018 cv
83.9692 56.1018 84.4198 55.997 84.7971 55.7979 cv
85.1743 55.5884 85.363 55.3159 85.363 54.9701 cv
85.363 54.7186 85.2582 54.509 85.0486 54.3518 cv
84.8495 54.1842 84.4827 54.1003 83.9797 54.1003 cv
83.3405 54.1003 82.848 54.2365 82.4812 54.509 cv
82.2297 54.6976 82.104 54.9387 82.104 55.2216 cv
cp
81.8525 51.1033 mo
81.8525 50.5584 82.0516 50.1183 82.4707 49.7934 cv
82.8165 49.5209 83.2252 49.3742 83.6758 49.3742 cv
84.0007 49.3742 84.3255 49.4581 84.6504 49.6048 cv
84.9752 49.762 85.2267 49.9715 85.3944 50.244 cv
85.5621 50.5165 85.6459 50.8099 85.6459 51.1452 cv
85.6459 51.6796 85.4258 52.1093 84.9962 52.4237 cv
84.6399 52.6961 84.2312 52.8324 83.7806 52.8324 cv
83.4558 52.8324 83.1309 52.7485 82.8061 52.5808 cv
82.4812 52.4237 82.2402 52.2141 82.083 51.9416 cv
81.9258 51.6796 81.8525 51.3967 81.8525 51.1033 cv
cp
82.104 51.2186 mo
82.104 51.3548 82.1459 51.5015 82.2297 51.6377 cv
82.3135 51.774 82.4498 51.8892 82.6593 51.9731 cv
82.8689 52.0569 83.1309 52.0988 83.4558 52.0988 cv
83.9692 52.0988 84.4198 52.0045 84.7971 51.7949 cv
85.1743 51.5853 85.363 51.3129 85.363 50.9775 cv
85.363 50.726 85.2582 50.5165 85.0486 50.3488 cv
84.8495 50.1811 84.4827 50.1078 83.9797 50.1078 cv
83.3405 50.1078 82.848 50.244 82.4812 50.5165 cv
82.2297 50.6946 82.104 50.9356 82.104 51.2186 cv
cp
82.3135 49.1123 mo
81.8629 48.0015 li
81.8629 47.8548 li
82.7013 47.8548 li
82.3869 47.6766 82.1668 47.488 82.0411 47.2994 cv
81.9153 47.1107 81.8525 46.9221 81.8525 46.7125 cv
81.8525 46.3562 81.9887 46.0524 82.2716 45.8113 cv
82.6174 45.5179 83.068 45.3712 83.6129 45.3712 cv
84.2312 45.3712 84.7447 45.5494 85.1429 45.9056 cv
85.4782 46.1991 85.6459 46.5658 85.6459 47.006 cv
85.6459 47.1946 85.6145 47.3622 85.5621 47.5089 cv
85.5201 47.6137 85.4468 47.729 85.3315 47.8548 cv
86.4213 47.8548 li
86.6624 47.8548 86.8196 47.8443 86.8824 47.8129 cv
86.9453 47.7814 86.9977 47.729 87.0396 47.6557 cv
87.0815 47.5823 87.1025 47.4461 87.1025 47.247 cv
87.2492 47.247 li
87.2492 49.1227 li
87.1025 49.1227 li
87.1025 49.0284 li
87.1025 48.8817 87.0711 48.7664 87.0187 48.6617 cv
86.9872 48.6093 86.9453 48.5778 86.8824 48.5464 cv
86.8196 48.5149 86.6519 48.5045 86.3899 48.5045 cv
83.0156 48.5045 li
82.7746 48.5045 82.6279 48.5149 82.565 48.5359 cv
82.5022 48.5569 82.4602 48.5883 82.4288 48.6407 cv
82.3974 48.6826 82.3869 48.7455 82.3869 48.8188 cv
82.3869 48.8817 82.3974 48.9655 82.4393 49.0599 cv
cp
82.9318 47.8548 mo
84.2731 47.8548 li
84.5561 47.8548 84.7447 47.8443 84.839 47.8233 cv
84.9857 47.7814 85.1219 47.6976 85.2372 47.5509 cv
85.3525 47.4146 85.4049 47.2365 85.4049 47.0164 cv
85.4049 46.7545 85.3106 46.5449 85.101 46.3877 cv
84.839 46.1781 84.4618 46.0733 83.9797 46.0733 cv
83.4348 46.0733 83.0156 46.1886 82.7222 46.4296 cv
82.5231 46.5973 82.4183 46.7964 82.4183 47.0269 cv
82.4183 47.1422 82.4498 47.2679 82.5126 47.3937 cv
82.5546 47.488 82.7013 47.6452 82.9318 47.8548 cv
cp
82.5755 41.8712 mo
82.0935 41.5254 81.8525 41.1481 81.8525 40.7499 cv
81.8525 40.3831 82.0096 40.0583 82.324 39.7858 cv
82.6384 39.5134 83.068 39.3772 83.6129 39.3772 cv
84.2417 39.3772 84.7552 39.5867 85.1429 40.0059 cv
85.4782 40.3727 85.6459 40.7709 85.6459 41.2215 cv
85.6459 41.4311 85.604 41.6406 85.5306 41.8607 cv
85.4573 42.0703 85.342 42.2903 85.1953 42.5104 cv
81.4857 42.5104 li
81.077 42.5104 80.8255 42.5209 80.7312 42.5418 cv
80.6369 42.5628 80.574 42.5942 80.5426 42.6362 cv
80.5111 42.6781 80.4902 42.7305 80.4902 42.7933 cv
80.4902 42.8667 80.5111 42.9505 80.553 43.0658 cv
80.4168 43.1182 li
79.9767 42.0493 li
79.9767 41.8712 li
cp
82.827 41.8712 mo
84.9648 41.8712 li
85.0905 41.735 85.1953 41.5987 85.2582 41.4625 cv
85.321 41.3158 85.363 41.1691 85.363 41.0224 cv
85.363 40.7814 85.2267 40.5613 84.9648 40.3622 cv
84.7028 40.1526 84.3255 40.0583 83.833 40.0583 cv
83.3719 40.0583 83.0156 40.1526 82.7746 40.3622 cv
82.5336 40.5613 82.4078 40.7918 82.4078 41.0538 cv
82.4078 41.19 82.4393 41.3367 82.5126 41.473 cv
82.565 41.5778 82.6698 41.7035 82.827 41.8712 cv
f
26.5541 109.944 mo
26.837 110.31 27.0047 110.541 27.0466 110.635 cv
27.1095 110.771 27.1409 110.929 27.1409 111.086 cv
27.1409 111.327 27.0571 111.536 26.8894 111.694 cv
26.7218 111.851 26.5017 111.935 26.2188 111.935 cv
26.0511 111.935 25.8939 111.893 25.7682 111.819 cv
25.59 111.715 25.4224 111.526 25.2652 111.264 cv
25.108 110.992 24.9194 110.562 24.6993 109.944 cv
24.5526 109.944 li
24.1963 109.944 23.9553 109.996 23.8191 110.111 cv
23.6933 110.227 23.62 110.394 23.62 110.604 cv
23.62 110.771 23.6723 110.897 23.7562 111.002 cv
23.8505 111.096 23.9448 111.149 24.0601 111.149 cv
24.2906 111.138 li
24.4059 111.138 24.5002 111.17 24.5631 111.233 cv
24.6259 111.295 24.6679 111.369 24.6679 111.474 cv
24.6679 111.568 24.6259 111.641 24.5631 111.704 cv
24.4897 111.767 24.4059 111.798 24.2801 111.798 cv
24.0601 111.798 23.8505 111.683 23.6619 111.453 cv
23.4837 111.222 23.3894 110.908 23.3894 110.489 cv
23.3894 110.174 23.4418 109.912 23.5466 109.713 cv
23.6304 109.556 23.7562 109.441 23.9238 109.367 cv
24.0391 109.325 24.2697 109.294 24.6155 109.294 cv
25.831 109.294 li
26.1664 109.294 26.376 109.294 26.4493 109.283 cv
26.5331 109.262 26.5855 109.241 26.6065 109.21 cv
26.6379 109.189 26.6484 109.147 26.6484 109.116 cv
26.6484 109.074 26.6379 109.032 26.617 109 cv
26.5855 108.948 26.4912 108.843 26.334 108.686 cv
26.5541 108.686 li
26.9418 108.98 27.1409 109.252 27.1409 109.524 cv
27.1409 109.65 27.099 109.744 27.0047 109.828 cv
26.9209 109.902 26.7637 109.944 26.5541 109.944 cv
cp
26.3026 109.944 mo
24.9403 109.944 li
25.0975 110.331 25.2023 110.593 25.2652 110.709 cv
25.3804 110.908 25.5062 111.054 25.6319 111.149 cv
25.7577 111.233 25.8939 111.274 26.0406 111.274 cv
26.2293 111.274 26.376 111.222 26.5017 111.107 cv
26.6275 111.002 26.6903 110.866 26.6903 110.719 cv
26.6903 110.53 26.5646 110.268 26.3026 109.944 cv
f
24.1125 87.7593 mo
23.6304 87.4135 23.3894 87.0362 23.3894 86.638 cv
23.3894 86.2712 23.5466 85.9464 23.861 85.6739 cv
24.1753 85.4015 24.5945 85.2652 25.1394 85.2652 cv
25.7787 85.2652 26.2921 85.4748 26.6799 85.894 cv
27.0152 86.2608 27.1829 86.659 27.1829 87.1096 cv
27.1829 87.3192 27.1409 87.5287 27.0676 87.7383 cv
26.9942 87.9584 26.879 88.1784 26.7218 88.3985 cv
23.0226 88.3985 li
22.614 88.3985 22.3625 88.409 22.2681 88.4299 cv
22.1738 88.4509 22.111 88.4823 22.0795 88.5243 cv
22.0481 88.5662 22.0271 88.6186 22.0271 88.6814 cv
22.0271 88.7443 22.0481 88.8386 22.09 88.9539 cv
21.9538 89.0063 li
21.5136 87.9269 li
21.5136 87.7593 li
cp
24.3535 87.7593 mo
26.5017 87.7593 li
26.6275 87.623 26.7323 87.4868 26.7951 87.3401 cv
26.858 87.2039 26.8894 87.0572 26.8894 86.9105 cv
26.8894 86.6694 26.7637 86.4494 26.5017 86.2503 cv
26.2397 86.0407 25.8625 85.9359 25.37 85.9359 cv
24.9089 85.9359 24.5526 86.0407 24.3116 86.2503 cv
24.0601 86.4494 23.9448 86.6799 23.9448 86.9419 cv
23.9448 87.0781 23.9762 87.2144 24.0496 87.3611 cv
24.102 87.4554 24.2068 87.5916 24.3535 87.7593 cv
f
25.6319 62.4627 mo
26.1035 62.557 26.4703 62.7456 26.7218 63.0285 cv
26.9837 63.3115 27.1095 63.6258 27.1095 63.9612 cv
27.1095 64.3699 26.9314 64.7262 26.596 65.0196 cv
26.2502 65.3235 25.7891 65.4807 25.2128 65.4807 cv
24.6469 65.4807 24.1963 65.313 23.84 64.9777 cv
23.4942 64.6423 23.3161 64.2441 23.3161 63.7726 cv
23.3161 63.4163 23.4104 63.1333 23.5885 62.9028 cv
23.7771 62.6722 23.9762 62.5675 24.1753 62.5675 cv
24.2697 62.5675 24.3535 62.5989 24.4164 62.6618 cv
24.4792 62.7246 24.5002 62.8085 24.5002 62.9237 cv
24.5002 63.0809 24.4583 63.1962 24.3535 63.2696 cv
24.3011 63.322 24.1963 63.3429 24.0391 63.3639 cv
23.8924 63.3744 23.7771 63.4267 23.6933 63.5211 cv
23.6095 63.6154 23.578 63.7411 23.578 63.8983 cv
23.578 64.1603 23.6723 64.3699 23.861 64.5271 cv
24.1229 64.7366 24.4583 64.8414 24.8774 64.8414 cv
25.3071 64.8414 25.6843 64.7366 26.0092 64.5271 cv
26.334 64.3175 26.5017 64.0345 26.4912 63.6782 cv
26.5017 63.4267 26.4074 63.1962 26.2397 62.9971 cv
26.114 62.8504 25.8939 62.7142 25.5795 62.5779 cv
f
66.2386 114.198 mo
66.5215 114.565 66.6787 114.795 66.7311 114.89 cv
66.7939 115.026 66.8254 115.173 66.8254 115.33 cv
66.8254 115.581 66.7415 115.791 66.5739 115.948 cv
66.4062 116.105 66.1757 116.189 65.9032 116.189 cv
65.7251 116.189 65.5784 116.147 65.4526 116.074 cv
65.2745 115.959 65.1068 115.78 64.9496 115.508 cv
64.7924 115.246 64.6038 114.806 64.3837 114.198 cv
64.237 114.198 li
63.8808 114.198 63.6397 114.25 63.5035 114.366 cv
63.3673 114.481 63.3044 114.638 63.3044 114.858 cv
63.3044 115.026 63.3463 115.152 63.4406 115.246 cv
63.5245 115.351 63.6293 115.393 63.7445 115.393 cv
63.9646 115.393 li
64.0903 115.393 64.1846 115.424 64.2475 115.477 cv
64.3104 115.539 64.3418 115.623 64.3418 115.718 cv
64.3418 115.822 64.3104 115.896 64.2475 115.959 cv
64.1742 116.021 64.0798 116.053 63.9646 116.053 cv
63.7445 116.053 63.5349 115.938 63.3463 115.707 cv
63.1577 115.477 63.0634 115.152 63.0634 114.743 cv
63.0634 114.418 63.1158 114.167 63.231 113.957 cv
63.3044 113.81 63.4301 113.695 63.6083 113.622 cv
63.7131 113.569 63.9436 113.548 64.2894 113.548 cv
65.505 113.548 li
65.8508 113.548 66.0604 113.538 66.1338 113.527 cv
66.2071 113.517 66.2595 113.496 66.2909 113.465 cv
66.3119 113.433 66.3329 113.402 66.3329 113.36 cv
66.3329 113.318 66.3224 113.286 66.3014 113.255 cv
66.27 113.203 66.1757 113.098 66.0185 112.941 cv
66.2386 112.941 li
66.6263 113.224 66.8149 113.506 66.8149 113.768 cv
66.8149 113.905 66.773 113.999 66.6892 114.072 cv
66.5948 114.156 66.4481 114.188 66.2386 114.198 cv
cp
65.9766 114.198 mo
64.6143 114.198 li
64.7715 114.586 64.8867 114.837 64.9496 114.953 cv
65.0649 115.162 65.1802 115.309 65.3059 115.393 cv
65.4317 115.487 65.5679 115.529 65.7146 115.529 cv
65.9032 115.529 66.0604 115.477 66.1862 115.361 cv
66.3119 115.246 66.3748 115.12 66.3748 114.974 cv
66.3748 114.774 66.2386 114.512 65.9766 114.198 cv
f
63.7864 89.7293 mo
63.3044 89.3835 63.0634 89.0063 63.0634 88.6081 cv
63.0634 88.2413 63.2206 87.9269 63.5349 87.6545 cv
63.8493 87.3715 64.279 87.2353 64.8239 87.2353 cv
65.4631 87.2353 65.9766 87.4554 66.3643 87.8745 cv
66.6892 88.2308 66.8568 88.6395 66.8568 89.0796 cv
66.8568 89.2892 66.8254 89.4988 66.7415 89.7189 cv
66.6682 89.9284 66.5529 90.1485 66.4062 90.379 cv
62.6966 90.379 li
62.2984 90.379 62.0469 90.3895 61.9526 90.4 cv
61.8583 90.421 61.7954 90.4524 61.7535 90.4943 cv
61.722 90.5362 61.7116 90.5886 61.7116 90.6515 cv
61.7116 90.7249 61.7325 90.8192 61.7744 90.924 cv
61.6277 90.9764 li
61.1981 89.9075 li
61.1981 89.7293 li
cp
64.0379 89.7293 mo
66.1757 89.7293 li
66.3119 89.6036 66.4062 89.4569 66.4796 89.3207 cv
66.5424 89.1739 66.5739 89.0272 66.5739 88.8805 cv
66.5739 88.65 66.4481 88.4299 66.1862 88.2203 cv
65.9242 88.0212 65.5469 87.9165 65.0439 87.9165 cv
64.5933 87.9165 64.237 88.0212 63.9855 88.2203 cv
63.7445 88.4299 63.6188 88.6605 63.6188 88.9224 cv
63.6188 89.0587 63.6607 89.1949 63.7236 89.3311 cv
63.776 89.4359 63.8807 89.5722 64.0379 89.7293 cv
f
65.3164 14.2796 mo
65.7879 14.3739 66.1547 14.5626 66.4062 14.8455 cv
66.6577 15.1284 66.7835 15.4323 66.7835 15.7782 cv
66.7835 16.1868 66.6158 16.5326 66.27 16.8365 cv
65.9347 17.1404 65.4736 17.2976 64.8972 17.2976 cv
64.3314 17.2976 63.8703 17.13 63.5245 16.7946 cv
63.1682 16.4593 62.99 16.0506 62.99 15.5895 cv
62.99 15.2332 63.0843 14.9503 63.273 14.7198 cv
63.4616 14.4892 63.6502 14.3739 63.8493 14.3739 cv
63.9541 14.3739 64.0275 14.4054 64.0903 14.4787 cv
64.1532 14.5416 64.1846 14.6255 64.1846 14.7407 cv
64.1846 14.8979 64.1322 15.0132 64.0379 15.0865 cv
63.9855 15.1389 63.8807 15.1599 63.7236 15.1808 cv
63.5664 15.1913 63.4511 15.2437 63.3778 15.338 cv
63.2939 15.4219 63.252 15.5581 63.252 15.7153 cv
63.252 15.9773 63.3568 16.1868 63.5454 16.344 cv
63.7969 16.5536 64.1322 16.6584 64.5514 16.6584 cv
64.9811 16.6584 65.3583 16.5536 65.6832 16.344 cv
66.0185 16.1344 66.1757 15.8515 66.1757 15.4952 cv
66.1757 15.2437 66.0918 15.0132 65.9137 14.8036 cv
65.7984 14.6674 65.5784 14.5207 65.264 14.3949 cv
f
63.6397 39.0105 mo
63.1577 38.6647 62.9167 38.2875 62.9167 37.8893 cv
62.9167 37.5225 63.0739 37.1977 63.3882 36.9252 cv
63.7026 36.6527 64.1323 36.5165 64.6772 36.5165 cv
65.3164 36.5165 65.8299 36.7261 66.2176 37.1557 cv
66.5425 37.512 66.7101 37.9207 66.7101 38.3608 cv
66.7101 38.5704 66.6787 38.78 66.6053 39.0001 cv
66.5215 39.2096 66.4167 39.4297 66.2595 39.6603 cv
62.5499 39.6603 li
62.1517 39.6603 61.9002 39.6603 61.8059 39.6812 cv
61.7116 39.7022 61.6487 39.7336 61.6173 39.7755 cv
61.5754 39.8174 61.5649 39.8698 61.5649 39.9327 cv
61.5649 40.0061 61.5858 40.1004 61.6277 40.2052 cv
61.4915 40.2576 li
61.0514 39.1887 li
61.0514 39.0105 li
cp
63.8912 39.0105 mo
66.0395 39.0105 li
66.1652 38.8743 66.2595 38.7381 66.3329 38.6019 cv
66.3957 38.4552 66.4272 38.3084 66.4272 38.1617 cv
66.4272 37.9312 66.3014 37.7007 66.0395 37.5016 cv
65.7775 37.292 65.4002 37.1977 64.8972 37.1977 cv
64.4466 37.1977 64.0903 37.292 63.8493 37.5016 cv
63.5978 37.7007 63.4721 37.9417 63.4721 38.2037 cv
63.4721 38.3399 63.514 38.4761 63.5769 38.6123 cv
63.6293 38.7171 63.7341 38.8534 63.8912 39.0105 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
