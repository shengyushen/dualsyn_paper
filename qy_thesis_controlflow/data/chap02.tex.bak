% !Mode:: "Tex:UTF-8"
\chapter{相关研究}
\label{chap:2}
%\subsection{Complementary Synthesis}
%%Complementary synthesis is an emerging new research topic,
%%there are only two papers that discuss this problem.
%
%The concept of complementary synthesis was first proposed by us\upcite{ShengYuShen:iccad09} in ICCAD 2009.
%Its major shortcomings are that it is incomplete,
%and its run-time overhead of building decoder is too large.
%
%The incomplete problem has been addressed by \upcite{ShengYuShen:fmcad10}, while \upcite{ShengYuShen:tcad} addresses the second shortcoming by simplifying the SAT instance with unsatisfiable core extraction before building decoders.

本章简述了与对偶综合相关的各个研究领域的进展。
其中对偶综合、程序求反、超属性模型检验和协议转换在目的方面与本文的研究内容相同或者相似。
而可满足赋值遍历和量词削减，以及基于Craig插值的逻辑综合算法，
则和本文的算法所使用的使能手段相关。

\section{对偶综合}\label{subsec_compsyn_relat}
Shen et al. \upcite{ShenICCAD09}首次提出了对偶综合的概念。
该算法通过迭代的增加迁移函数的展开长度以检查解码器是否存在，
并通过传统的解遍历算法产生解码器函数。
该算法已经在小节\ref{subsec_sound}中给出了详细描述。
其主要不足在于不停机，且产生解码器的时间开销太大。

Shen et al.\upcite{ShenTCAD11} 和Liu et al.\upcite{LiuICCAD11} 独立的发现了如何通过检测环来得到停机的算法。
该算法已经在小节\ref{subsec_complete}中给出了详细描述。
而Shen et al.\upcite{ShenTCAD12}和Liu et al.\upcite{LiuICCAD11} 独立的发现可以通过Craig插值加速解码器的生成。

Shen et al. \upcite{ShenTCAD12} 自动的发掘能够使得解码器存在的前提条件。
该算法可视为本文算法\ref{algo_infer}的特例。
他们之间的差别在于，
Shen et al. \upcite{ShenTCAD12}的算法得到的是一个必须在每个周期上都必须成立的约束，
而本文算法\ref{algo_infer}则是第一个允许在不同状态步上使用不同谓词的算法。

Tu et al.\upcite{TuDAC13}提出了一个突破性的算法，
通过使用属性指导的可达性分析算法\upcite{BradleyVMCAI11,EenFMCAD11}，
将初始条件考虑到解码器存在性检测中。
该算法是第一个能够考虑初始条件的对偶综合算法。

\section{程序求反}\label{subsec_proinv}
Gulwani et al.\upcite{dim_syn}指出，
程序求反是指针对特定程序$P$，
求解其反程序$P^{-1}$。
因此，
程序求反和我们的算法很类似。

程序求反的早期工作是基于证明的\upcite{prog_inv}，
只能处理非常小的程序和非常简单的语法。

Gl\"{u}ck et al. \upcite{mtd_autoProginv} 提出通过基于LR的分析方法消除非确定性，
从而综合反程序。
然而使用函数式语言使得该算法和我们的应用场景不兼容。

Srivastava et al.\upcite{program_inversion_11} 假设反程序和原始程序在结构上是相似的，
共享相同的谓词集合和控制流结构。
在这方面该算法和我们的白盒模型假设，
尤其是流水线推导非常类似。
该算法通过在原始程序上迭代的推导和剔除非法路径，
以获得合法的反程序。
然而当反程序不存在时，
该算法不能保证停机。
因此该算法不能保证完备性。

\section{超属性(Hyperproperty)模型检验}
在计算机安全相关的研究领域，
Clarkson et al.\upcite{DBLP:journals/jcs/ClarksonS10}提出的超属性(Hyperproperty)代表了与程序可观测性相关的一大类属性。
超属性的通常形式是，
在满足特定要求的输入集合前提下，
在输出上可观察到何种程度的信息。

最常见的超属性是互不干涉属性(noninterference)\upcite{DBLP:journals/jcs/ClarksonS10}，
即当两个路径的输入存在某种差别时，
在输出无法观察到差异。
文献\upcite{DBLP:journals/jcs/ClarksonS10}还给出了互不干涉属性的更为一般化和更特殊化的几个变种。
很明显，
互不干涉属性是对偶综合的反面，
即输入有意地，
在某种程度上无法唯一决定输出。

Clarkson et al.\upcite{DBLP:conf/post/ClarksonFKMRS14}通过扩展传统的线性时态逻辑(LTL)和扩展计算树逻辑(CTL*)，
以描述上述的超属性，
并给出了针对扩展LTL的超属性的模型检验算法。

Finkbeiner et al. \upcite{DBLP:conf/cav/FinkbeinerRS15}进一步提出基于自动机理论的模型检验算法。
该算法能同时处理扩展了超属性的LTL和CTL*。
不过前提是不能带有路径量词的交替。


\section{协议转换}
协议转换是指在不同的通讯协议之间自动产生转换器。
该领域和我们的工作是相关的，因为他们都试图自动产生通讯电路。

Avnit et al.\upcite{converter_date08,converter_todeas09}首先定义了一个通用的通讯协议模型，
并给出了一个算法以检验是否存在某个协议的特定功能无法被翻译为另一个协议。
最后他们给出了一个算法以计算目标协议的缓冲区控制函数的不动点。
在文献\upcite{converter_date09}中，
他们引进了一个更高效的状态空间探索算法以提升整体性能。

\section{可满足赋值遍历和量词削减}\label{subsec_relallsat}

绝大多数可满足赋值遍历算法致力于将一个完整的赋值扩展为一个包含较多赋值的赋值集合，
以便减少调用SAT求解器的次数并压缩存储赋值解的空间开销。
此类工作与我们在第\ref{chap:interative_craig}章描述的基于余因子和迭代Craig插值的算法联系非常紧密。

McMillan et al.\upcite{SATUNBMC}提出了第一个此类算法。
他在SAT求解器求解过程中构造一个蕴含图，
用以记录每个赋值之间的依赖关系。
每个不在该图中的赋值变量都可以从最终结果中剔除。
在Ravi et al.\upcite{MINASS} 和Chauhan et al.\upcite{REPARAM}中，
每个变量如果在其不被约束的情况下不能使$obj\equiv 0$ 被满足的话，
则该变量可以从最终结果中剔除。
在Shen et al.\upcite{MINCEX}，Jin et al.\upcite{PRIMECLAUSE}和 Jin et al.\upcite{EFFCON}中，
冲突分析方法被用于剔除与可满足性无关的变量。
在Grumberg et al.\upcite{MEMEFFALLSAT}中，
变量集合被划分为重要变量和非重要变量集合。
搜索过程中重要变量的优先级高于非重要变量。
因此重要变量子集构成了一个搜索树，
而该树的每一个叶节点是非重要变量的一个搜索子树。
Nopper et al.\upcite{CMPMINCEX} 提出了一个针对非完备模型进行反例压缩的算法
Cofactoring \upcite{EFFSATUSMCCO} 则通过将非重要变量设置为SAT求解器返回的值以缩减搜索空间。

另一类算法通过Craig插值以扩大解集合。
Jiang et al.\upcite{InterpBoolFunction}提出了第一个此类算法。
该算法构造两个相互矛盾的公式，并从他们的不可满足证明中抽取Craig插值。
在Chockler et al.\upcite{interpNoProof}中，
Craig插值的产生过程类似于传统的可满足赋值遍历算法。
不过其扩展算法包含两步，
分别对应于两个参与计算的公式。
该算法是第一个不需要产生不可满足证明的Craig插值算法。

\section{基于Craig插值的逻辑综合算法}
在Lee et al.\upcite{scalableFuncDep,Bidecomp}中，
函数依赖和逻辑分解问题被转换成一个两级布尔函数网络，其中基函数为第一级，
而有待求解的函数为第二级。
然后约束在第一级输出相同的情况下，
第二级输出不同。
这将导致所得到的合取公式不可满足。
然后调用Craig插值算法从不可满足证明中特征化第二级函数。
该算法也应用于我们的早期工作\upcite{ShenTCAD12} 以找到所有可能的解码器。

在Wu et al.\upcite{ecoInterp}中，
Craig插值被用于产生ECO。
该算法将有待求解的ECO函数构造成为满足Craig插值条件的不可满足公式，
并从不可满足证明中抽取ECO函数的布尔实现。

在Jiang et al.\upcite{InterpBoolFunction}中，
Craig插值算法被用于从一个布尔关系中产生布尔函数。
该算法也被应用于本文中以产生解码器。

\section{本章小结}
本章综述了在形式化验证和综合领域的相关研究工作。
