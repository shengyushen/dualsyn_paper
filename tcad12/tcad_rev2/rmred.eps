%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP4.tmp.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: Administrator
%%CreationDate: 2010-5-11, 8:38:24
%%BoundingBox: -141 140 135 275
%%HiResBoundingBox: -140.0640 140.0641 134.7340 274.7981
%%CropBox: -140.0640 140.0641 134.7340 274.7981
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1136 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:CreatorTool="Acrobat PDFMaker 9.0 Visio 版"
   xmp:ModifyDate="2010-05-11T08:37:59+08:00"
   xmp:CreateDate="2010-05-11T08:37:56+08:00"
   xmp:MetadataDate="2010-05-11T08:37:59+08:00"
   pdf:Producer="Acrobat Distiller 9.0.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:5e1ee6ad-09a9-4e0f-b58f-7740a3c13876"
   xmpMM:InstanceID="uuid:a027a3ee-5b66-47ea-b5a3-4990781d8593"
   pdfx:Company="super">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>FtpDown</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -274.798 translate
pgsv
[0 1 -1 0 134.734 0 ]ct
gsave
np
gsave
0 0 mo
0 274.798 li
134.734 274.798 li
134.734 0 li
cp
clp
[1 0 0 1 0 0 ]ct
65.6258 151.861 mo
91.7713 151.861 li
91.7713 125.694 li
65.6258 125.694 li
cp
false sop
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
.719839 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
65.6258 151.861 mo
91.7713 151.861 li
91.7713 125.694 li
65.6258 125.694 li
cp
.75021 .679683 .670222 .90164 cmyk
@
91.7713 151.861 mo
cp
@
74.3555 140.36 mo
74.3555 134.337 li
76.4725 134.991 li
76.4725 135.21 li
76.1669 135.122 75.8832 135.1 75.6432 135.1 cv
75.3594 135.1 75.1412 135.188 74.9884 135.362 cv
74.8793 135.493 74.8357 135.842 74.8357 136.388 cv
74.8357 136.999 li
80.3136 138.57 li
80.9901 138.789 81.4048 138.876 81.5794 138.876 cv
81.7322 138.876 81.8413 138.811 81.9504 138.68 cv
82.0377 138.57 82.0813 138.352 82.0813 138.025 cv
82.0813 137.763 li
82.2996 137.828 li
82.2996 141.277 li
82.0813 141.211 li
82.0813 141.058 li
82.0813 140.775 82.0377 140.535 81.9286 140.36 cv
81.8631 140.251 81.754 140.142 81.5794 140.055 cv
81.4048 139.967 81.0338 139.836 80.4663 139.684 cv
74.8357 138.025 li
74.8357 138.505 li
74.8357 138.963 74.9011 139.334 75.0103 139.596 cv
75.1194 139.88 75.294 140.12 75.5122 140.273 cv
75.7305 140.447 76.0578 140.6 76.4725 140.709 cv
76.4725 140.928 li
f
39.6548 210.067 mo
40.2223 210.067 40.8115 210.22 41.379 210.547 cv
41.9682 210.853 42.4047 211.289 42.7539 211.835 cv
43.0812 212.38 43.2558 212.926 43.2558 213.45 cv
43.2558 213.995 43.0812 214.432 42.7321 214.759 cv
42.4047 215.108 41.9464 215.261 41.4226 215.261 cv
40.8333 215.261 40.2659 215.108 39.6767 214.781 cv
39.1092 214.432 38.6509 213.995 38.3235 213.45 cv
37.9744 212.904 37.8216 212.359 37.8216 211.857 cv
37.8216 211.333 37.9744 210.896 38.3235 210.569 cv
38.6509 210.242 39.1092 210.067 39.6548 210.067 cv
cp
39.2402 211.049 mo
38.8692 211.049 38.6073 211.136 38.4108 211.311 cv
38.2144 211.486 38.1053 211.726 38.1053 212.009 cv
38.1053 212.577 38.52 213.101 39.3493 213.581 cv
40.1786 214.061 40.9861 214.301 41.7936 214.301 cv
42.1646 214.301 42.4483 214.214 42.6666 214.017 cv
42.863 213.843 42.9503 213.603 42.9503 213.319 cv
42.9503 212.773 42.5575 212.249 41.7281 211.769 cv
40.9206 211.289 40.0913 211.049 39.2402 211.049 cv
f
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
ct_T42Dict begin
-0.496 -0.305 1.117 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /TimesNewRomanPS-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32a02c8d29000000cc000000566376
7420ff44a29700000124000007786670676d015abb920000089c000005cd
676c7966646252a6000057180002aabc68656164c514940800000e6c0000
0036686865610c7d077200000ea400000024686d74781197607500000ec8
00000eb06c6f6361056017e200001d7800000eb46d61787008d90c500000
2c2c000000206e616d65b2f5b8f600002c4c0000200570726570791a47c3
00004c5400000ac367646972000000000000000000000000000103370190
00050000059a0533002c0125059a0533004c03a000660212010502020503
05040509030400000a870000000000000000000000004d6f6e6f00010020
fffc058efe460133072101bb400001bfdff700000000058e0000054c001f
054c001c037100180000ffe10000ffe80000ffe8fe4afffc056b0023fe68
ffe2033e00000095000000950000000000000000002500a8008e010b007d
00820045003200a400ca006b0070005100af003c00f001d7004700040025
00770029004000fd00160161004601370029008e0017ffca0025005bffe9
02e600020099008100f2007500d6006300c60006009a01330024003800cc
003dff67001305d8003600860095ffdb0007043400a500d8ffdcfffe0048
00a200d8013c01530380053e0057007a007c008c0117012a0138017c0026
003c007800bd00c0021009b5000c004d004e00540058006700b404010002
0005005000af01d5034300240058008b013501c0ffac002000250026002d
00410136022bffba001e002a0034003b003f00850094009800d7012e013d
033104b900170040006100b9010e0116012201bfff9c001f001f004d005c
0086008c009600aa00cb00cb011f0154022f036005a9fee8000e006f007c
007d008b00d500f1010a0157017802b803adfe3fff6affb3ffc4001f0037
003f0044004a0078007d009700a200a700b600c000c100c600d8011d0150
019701ee04740532fd81fed1fee0ff16fff1000f002d00550068006e007f
00890095009e00c200da00e400f801040108011101c2023002da030e049e
0517ff00ff8700000020002f00410057007800870088008800b900c200c5
012001280133017401d6020e020f026c027e02ab02ec038903b103e304e7
ff43ffa8ffc3ffdcffe9000700230023002600520077007d0081008f0099
00ac00ae00b500b800c800ea00f000f40135016a018b01b101b501f70214
02ad02d504fc05d805f0ff9dfffc000b00240025002c0030003000330040
004700490057006e009a00bd00c900cd00dc00fa00fa011b0139017e0187
018a018e0195019601df01f6028602cf02de039603a903b003c804010432
046a058b05e006510761fe96fe9aff4bff870013002500340038003e004a
0065006b0073007a009c00a200b200b700bf00f000f700fb010401130120
0124013b01520178017c0181018f01a001d90248026a026f02700301031d
032303270388041f04ab04d104da057a058bfe26fe59ff2e00010002000a
003b003b004700580058005f0066006b007a007a008b009900af00bc00c0
00c700cc00e900f200f500fb00fb0102010a010b01150121012701450145
015501570158015e01610168017d01a301ab01da01ee021002180222028f
029402a302d202e703710393039b03b303d303fe04ff050b05320532054b
0559058b05ab05f2065506890742076207a708ccfd2afdc8fddefe0cfe15
fe27fe53fe84febbff58ff76ff77ffa1ffa7ffadffafffc0000000000003
0094001d001f002000200027002e0048004b004c005e005f006b0071007c
008a00900091009100a700af00b300b400c400c600d100d200de00df00df
00e600e800ea00eb00f200f500f500fc010201180123013101330137015c
016201660170017a017a017a018201980199019b01b001bf01c001ca01d3
01d701d801e001e001f601f701f802120213022f023702440247024f0252
026302650270027f0298029b02a602b702ba02c502cf02d602d702e502fe
031c031d03450348035d035e03710379038103a103b703d403d503d803e1
03f803fe0404041f042104230425043a0467048304e00528054b0564056a
059f059f05c2060b066a06af06b306cb06e8070607280748075007a607b2
07ff009500af00920096000000000000000000000000017e01a80129025b
0212020301c302b4019301cd02b204ed020e0159017a0300022d042c00c8
004d00e602890325013e0378011b00f1018d00490203007c000e029d0247
0024000000000052004400330038005405d3041501a70000028601680050
00cf0002004b0024008800ba0025ffd800110091ff6b00b5011700260065
ff9900490080014b01c000f40167027102ea04fc0310017c01e103d90155
01e601ee0434019606cb005c022b0099003d009f00160039002700de0079
0120022e005a00990388009400210019002a046c05e8000001f203b200aa
0296028902b4ffc9020000ec0005005a0447010004e00000052a001f01eb
00ae016800ca02d3028901b5040601a1014f014b011c0308005e00c70024
029d006503750104028002f304d800d90239025a032c01f2043103030050
02e50283005901eb010800ac019602f8012100950180004400e501eb02e5
007400f301ff02fd038f026801c801c70116022b0142033000fe02e10162
0200002400ee05170108023700660006010201e602aa0366019b00d305c2
03dc044d03b6000401be013702fc03200244014d0338ffed002506f8030d
fed5ff43004402ffff92040bfdef0155017100d9ffc4032d0461044afbb5
fbcf02170192036d0558fff2fe7d0583023e006605e9073d007902430025
00cf00fd00af002a01ef021a0026001f0025003a000001170490fbfb0251
001d02f001f50078018f005f00240044005400bf00af006701a800260005
0006003f009800fa02ab00c2004d0375004a00b600c401bf017c006f0013
0263000c006801520002012e0104001f001f009a000000f1046900790080
005000bd056b00ab0080001e05a5404154403f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00
b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a2344
45b01923442d2c2045b00325456164b050515845441b2121592d2cb00143
632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a
2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0
0361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2c
b01243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a
8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2c
b0022546608a46b040618c482d2c01182f2d2c20b0032545b019234445b0
1a23444565234520b00325606a20b009234223688a6a606120b01a8ab000
527921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb11400
8a5279b31940201945208a54582321b03f1b235961442d2cb11011432343
0b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d
2cb10e0f432343650b2d2cb11011432343650b2d2c4b525845441b212159
2d2c0120b003252349b04060b0206320b000525823b002253823b0022565
38008a63381b212121212159012d2c4bb06451584569b00943608a103a1b
212121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b0
06430b2d2c3eb02a2a2d2c352d2c76b802ee23701020b802ee4520b00050
58b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c64
23648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb8
1555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb4
000100000015b00826b00826b00826b008260f10161345683ab001162d2c
b4000100000015b00826b00826b00826b008260f1016134568653ab00116
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb013
4358031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b2121
592d2cb012435c580cb00425b00425060c6423646164b807085158b00425
b00425012046b01060482046b0106048590a21211b2121592d2cb012435c
580cb00425b00425060c6423646164b807085158b00425b00425012046b8
fff060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a
2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab0
12435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab01243
5c5a58381b2121592d2c462346608a8a462320468a608a61b8ff80622320
10238ab903b003b08a70456020b0005058b00161b8ffba8b1bb0468c59b0
106068013a2d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
59b12401885458b2022002436042004b014b5258b2020802436042591bb9
40000080885458b202040243604259b94000008063b80100885458b20208
0243604259b94000010063b80200885458b2021002436042595959592d00
0000000100000002e667f8e3866b5f0f3cf50819080000000000a31fb8bd
00000000b5c9aa29fc05fd8c08f608300002000900010001000000000001
00000721fe450057086bfc05fcfe08f60018000700000000000000000000
000003ac0639011c00000000020000000200000002aa009a035c01260400
00930400005606aa00900639006201b6010d02aa008c02aaff2104000122
056600be0200ffeb02aa0036020000450239ffbb0400007a0400007d0400
002004000044040000400400004904000081040000e80400004e0400003b
02aa007a02aa002405660096056600c805660096040000c6075c006104e3
ff9c04e3ffd10556008a05c7ffc304e3ffd204e3ffce05c7008e05c7ffca
02aaffc0038dffba0556ffc90473ffbe06aaffbd0556ffc705c7007a04e3
ffcf05c7006104e3ffd10400000e0473008f05c700da04e3010006aa00f9
04e3ff77047300b80473fffc031d000d023900da031dff33036000380400
ffef02aa01680400003004000036038d003804000027038d00400239fe9b
0400ffc904000029023900580239fea0038d00140239004f05c700230400
00270400003c0400ff1e0400002d031d002a031dffed023900540400003c
038d002c05560023038dffb8038dff5c031dffc70333008d023300ed0333
ff670454001404e3ff9c04e3ff9e0556008a04e3ffd20556ffc705c7007a
05c700da040000300400003004000030040000300400003004000030038d
003c038d0040038d0040038d0040038d0040023900580239005802390058
02390058040000270400003c0400003c0400003c0400003c0400003c0400
003c0400003c0400003c0400003c040000dd033300d40400007204000031
0400fffc02cd00ad042f006c0400feb70614008b0614008b07d700be02aa
019902aa010c04640019071dff9405c7004805b40035046400350464005e
0464005a0400fff2049cffd203f4004005b4002b06960092046400480231
0000023500b2027b00e40625005b0556002d0400000504000049031d0090
0566009604640054040000020464001e04e5ffc40400005404000025071d
010a04e3ff9c04e3ff9c05c7007a078d002d055600360400ffee071dffed
0473018a0473017502aa01b202aa01910464003503f4002f038dff600473
00b70156feab0400001102aa007402aa002e0400fe7d0400fe7d0400ffe3
0200009102aa00410473001e0800007f04e3ff9c04e3ffd204e3ff9c04e3
ffd204e3ffd202aaffc002aaffc002aaffc002aaffc005c7007a05c7007a
05c7007a05c700da05c700da05c700da0239005802aa00fe02aa00c602aa
00f602aa012602aa01c102aa017d02aaffdb02aa012f02aa004e02aa0152
0473ffc6023900330400000e031dfff00473fffc031dffad023300ed05c7
ffd004000037047300b7038dff6004e3ffcf0400ff1e056600960566017a
026600a30266006f02660084060000a1060000a1060000820400ffce05c7
008e0400ffc902aaffc00400000e031dffed0556008a038d003c0556008a
038d003c04000027040000c502ab01ee04e3ff9c0400003004e3ff9c0400
003005c7ffc304de002705c7ffd004e3ffd2038d004004e3ffd2038d0040
0473ffbe0239004f0473ffbe02e9004e0473ffbe029500490556ffc70400
00270556ffc70400002705c7007a0400003c04e3ffd1031d002604e3ffd1
031d00260400000e031dffed0473008f0239ffdd0473008f02e9005605c7
00da0400003c05c700da0400003c0473fffc031dffc30473fffc031dffc3
048dffb605c7007d0617009d0433003c03b800300327001603f2003602dd
0033046d004a0400ffef0495009a0285001407eb002f0800004f04000099
0800004f040000990800004f040000980400009807d5016a05c700c00566
00c604cd00990566009804d5022204d5010505abffe904ed01c005ab027e
05abffe905ab027e05abffe905ab027e05abffe905abffe905abffe905ab
ffe905abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff
04d500920800000007eb013007eb012007eb013007eb012004d500b204d5
008004d5002a082b0198086b01b807550010060000f40600006f0440003a
0540003704c0003f0415004004000025060000550600ffc30401004b049e
007301c0010d0355012606ab006c0355001e04d5009202d6008302d60083
04d500b202d6007004e3ff9c040000300556008a038d003a0556008a038d
003a04e3ffd2038d004004e3ffd2038d004004e3ffd2038d004005c7008e
0400ffc905c7008e0400ffc905c7008e0400ffc805c7ffca0400002905c7
ffca0400002902aaffc00239005402aaffc00239005802aaffc002390054
02aaffc0023a0034038dffba0239fea00556ffc9038d0014038d00140473
ffbe0239ffa20556ffc7040000270592ffc003db002705c7007a0400003c
05c7007a0400003c04e3ffd1031dfff90400000e031dffed04730093023a
003105c700da0400003c05c700da0400003c05c700da0400003c05c700de
0400003c06aa00f905560023047300b8038dff5e0239fe9d04e3ffa50400
0030071dff940556002d05c700480400000502aa014d06aa00f905560023
06aa00f90556002306aa00f905560023047300b8038dff5e02aa01bd02aa
00b70400003104cd005a060000a10600008206000084060000e802aa004c
02aaffdb02aa019902aa00b404e3ff9c056f005d065600590337004d05c7
007a0548005e05cf00200239005404e3ff9c04e3ffd104b2ffa704e3ffd2
0473fffc05c7ffca02aaffc00556ffc904d5ff8f06aaffbd0556ffc7051d
fff205c7007a05c7ffc504e3ffcf04c1ffb90473008f047300b804e3ff77
05a0011305c9001b02aaffc0047300bc0433003c0327001603f8003a0239
005503ac003503fcff7703270031033d002f03f8003a03ee005a02390055
03d7001f0377ffc00404ff94038d002c036d00250400003c03d7ff6f033f
003f03ac00350385ff4004f8008f05a600480239005503ac00350400003c
03ac00350595003f04e3ffce066000c1048dffb6055a008e0400000e02aa
ffc002aaffc0038dffba076bffbb075effc2066400c60550ffc7056200e1
05c7ffcd04e3ff9c04b8ffc604e3ffd1048dffb60517ff2d04e3ffd20754
ff9003f6fffe05c7ffcc05c7ffcc0550ffc7056bffb906aaffbd05c7ffca
05c7007a05c7ffc504e3ffcf0556008a0473008f056200e1066f009504e3
ff7705c7ffcc058300e70858ffe40858ffe40568007606faffc604b8ffc6
053d001e0842ffbe0542ff9104000030040600490379003f031f0002040c
003d038d00400771ffff031fffce0400003c0400003c03be0025037dffa5
051bffa403f800290400003c040000270400ff1e038d003805c70023038d
ff5c05ae003c038dffb80400003c03d10056060a0040060a00400427003c
056b006603a400660387000f05a4002a03b8ff84038d003c03d500280304
ffaa037d0036031dffed02390058023900550239fea0056fffa605b2002a
0400002903be0025038dff5c040000250385ffc30285005608000041078b
ffa80402003202aa003502aaff4f02aaff6502aaff4502aa003502aaffc2
02aaffc202aaffc302aaffc302aa01cf02aaff4f02aa010202aa005402f7
00ed02aa015c02aa005f02be037c02be003702aa007a03d3ffd5037fffc5
0291ff7e035700bd03ceffd1021c00bf0208002903c4fffa03d3005901ef
00c6038000c10349ffc7037000c703c8ffe403c3ffde020b004a023cff9d
03b1006b0383ffcd0372004f036effd5039000c50397fff0038eff8f0395
00bc04f500c203cbff85043800bf040b00c603de00c60186009b02f1009b
064c0010021c0041038000c10380008f03700016037000160383ffd104f5
00c204f500c204f500c204f500c203d3ffd503d3ffd503d3ffd5037fffc5
0291ff7e035700bd03ceffd1021c00620225000c03d3005901ef005a0380
00c10349ffc7037000c703c3ffde023cff9d03b1006b0372004f036effd5
0397fff0038eff8f038e009d04f500c203cbff85021c00bf037fffc50349
ffc7036effd50448004a0000ffdc0000ff250000ffdc0000fe510400005a
0800000005c7007a0445003c060800da045d003c0000ff1a0000fdf20000
fdb40000ff910000fef60000fee40000ff780000ff8a0000fe880000fefb
0000fea20000fe6e0000fdf4000000350000001f0000fe47041a00780600
00a10600006f0000ff2b0000fe6c0000fe8a0000fdd20000ff1e0000fe38
0000fdcd0000fd190000fce70000fd710000fd3f0000fcf90000fccd0000
fc050000fc050000fc550000fc0f0000ff190000ffa20000fe310000fc55
0000fcef0000fd9c0000fdda0000fca10000fd530000fcef0000fcb30000
fd0d0000fcb30000fdba0000fd940000fd7e0000fd300239005804e3ff9c
0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3
ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c04000030
04e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400
003004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3
ffd2038d004002aaffc00239005802aaffc00239003105c7007a0400003c
05c7007a0400003c05c7007a0400003c05c7007a0400003c05c7007a0400
003c05c7007a0400003c05c7007a0400003c05c7007a0445003c05c7007a
0445003c05c7007a0445003c05c7007a0445003c05c7007a0445003c05c7
00da0400003c05c700da0400003c060800da045d003c060800da045d003c
060800da045d003c060800da045d003c060800da045d003c047300b8038d
ff5c047300b8038dff5c047300b8038dff5c04e3ff9c0400003002aaffc0
0239005805c7007a0400003c05c700da0400003c05c700da0400003c05c7
00da0400003c05c700da0400003c05c700da0400003c000000be000000be
000000be000000be048dffb6031f00020754ff900771ffff0550ffc703be
00250550ffc703be002505c7ffca03f80029047300b804000003047300b8
0400ffdf04e3ff77038dffb8058300e703d100560583ffca04000027058f
007a038d001b05c7007a0400003c00000000000000680000006800000068
0000006800000116000001fe0000040c0000065e000007ec0000099c0000
0a0e00000a8e00000b1600000ce800000d5c00000dd000000e0800000e52
00000eb800000fbe000010ea0000120200001356000014e6000016140000
174c000018220000197600001ab200001b3600001be600001c9a00001cf4
00001db200001eec00002140000023540000259a000026a40000281a0000
2a6c00002c4800002db6000030a20000329e00003406000036a800003832
00003af400003ce800003e0800003fbe00004196000043c0000045c00000
47580000494800004b1a00004da600004fd2000051f40000535600005448
00005494000055b40000561c00005652000056c20000593e00005aba0000
5c3e00005eb60000602a000062540000643c00006632000067d600006950
00006baa00006d340000706e000072a2000073a800007596000077760000
78f400007a3800007ba400007dee00007f64000081640000833e000084fe
000086da000087da0000881600008924000089cc00008a0000008a400000
8a6e00008ab600008aee00008b2000008b5800008b8800008bb800008be8
00008c1a00008c4e00008c8a00008cb800008ce600008d1a00008d4a0000
8d7a00008daa00008dda00008e1600008e4600008e8000008eb000008ee0
00008f1000008f4400008f7a00008fac00008fda0000900c0000903e0000
9170000091f8000093780000951800009686000096f4000097aa00009996
00009ba000009d4c00009ff40000a0520000a0e80000a1ce0000a4ae0000
a66c0000a7c60000a8660000a96e0000aa660000acd20000ae640000af5c
0000b0940000b17a0000b3120000b4260000b58a0000b6020000b78c0000
b9740000bb360000bc280000bcf40000bd3e0000bde40000bf980000c0cc
0000c1560000c23a0000c3140000c3bc0000c3ee0000c41e0000c44e0000
c6a00000c8540000c88a0000c8c20000c99c0000ca720000cadc0000cb4e
0000cbfe0000ccb80000ccfc0000cd360000cd880000cee80000cf4a0000
cfa60000d1a60000d3ae0000d57c0000d5c20000d6360000d70a0000d93a
0000d96a0000d99e0000d9ce0000da020000da3e0000da700000daa00000
dade0000db120000db420000db7c0000dbac0000dbf00000dc3a0000dc70
0000dd640000ddd40000de6e0000deac0000df280000df740000dfe20000
e0880000e1240000e1be0000e22e0000e3fa0000e55a0000e58c0000e5bc
0000e5ee0000e6200000e6840000e8080000e97c0000e9b20000e9e60000
eb7c0000ed060000ed3c0000ee140000ef3a0000f0220000f11e0000f330
0000f5760000f7bc0000f9880000f9b80000f9e60000fa200000fa4e0000
fa7a0000faaa0000fada0000fb140000fb4e0000fd340000fd6e0000fdb4
0000fde40000fe120000fe4e0000fe7c0000feac00010084000100940001
00c0000100ee000101220001016a0001019a000101cc0001034c0001048c
000104c200010504000105360001056a0001059a000105da000106280001
0674000106a4000106de00010710000107480001077e000107b60001095a
00010ad200010b1800010c8000010cb400010cf200010d3e00010d8a0001
0dba00010df400010e2c00010e5e00010f6c0001112a0001132a00011452
0001158e000116e6000117ca000118ce00011a4a00011ab400011adc0001
1c2800011f3a00011fb200012032000120ac00012128000121ce0001227e
00012358000123ae0001245e000124e80001258e000125da0001265e0001
26e20001271800012734000127540001277400012794000127b4000127da
00012800000128260001284c0001287c000128a4000128cc000128f60001
2920000129540001297e000129aa000129e000012a0800012a3400012a68
00012a9200012abc00012af000012b1e00012b5200012b9400012bc40001
2bf800012c3a00012c6e00012ca000012ce200012d1600012d4600012d88
00012dcc00012e1200012e6e00012e8a00012ea600012ec000012eda0001
2ef4000130620001330c0001357c00013596000135b0000135ca000135e6
000136020001361e0001367a000136b40001371c000137f4000138980001
3970000139f000013a7800013ae600013b7c00013bd400013c1400013c72
00013cd400013d1600013d9600013ddc00013dec00013dfc00013fb80001
40f40001411e0001413a000141660001419e000141ea0001422e00014262
00014292000142c8000142f80001432600014370000143a2000143d20001
44060001443c00014474000144a8000144d8000145080001453600014568
0001459a000145ca0001460c000148fa00014af400014b4000014b760001
4bb400014be200014c2800014c5e00014c8200014cb600014cea00014e3a
00014e6a00014e9000015088000150b0000150da000151020001512a0001
52f4000154de000155140001554400015578000155a8000155da00015600
00015634000156620001584400015a0800015a5000015a8000015ab00001
5aee00015b4200015b7200015b9800015bd200015c0200015c3200015c62
00015c9000015d9e00015dee00015e1e00015e4e00015e7e00015eae0001
5ede00015f2800015f5800015f8800015fb800015fe80001601c00016054
00016088000160b60001613c000161740001637a0001648c000166c00001
68b400016a9400016c3c00016ca000016d3800016d4800016e0a00016ff6
00017214000174360001755e000176540001789c00017aae00017c320001
7c4200017c5200017d2400017d3400017d4400017d5400017d6400017d74
00017eae00017ebe00017ece0001810a0001811a00018296000182a60001
8402000184120001842200018432000186660001886e000188a2000188e0
000189100001893e0001896e0001899e000189de00018b4000018c5c0001
8d8e00018f2200019028000190380001921e0001934000019490000194a0
00019632000196420001977200019894000199b400019b2400019d2e0001
9e8c00019ebc00019f1000019f4000019f7600019faa00019fde0001a1fe
0001a22e0001a3360001a3460001a3560001a38a0001a39a0001a5900001
a8560001aa680001aa980001aca80001af1e0001af2e0001b14a0001b15a
0001b16a0001b2ce0001b2de0001b5fe0001b7240001b9f40001bd200001
bede0001c0340001c0440001c0540001c0640001c0740001c0840001c094
0001c0a40001c2160001c4660001c4760001c6cc0001c8960001cab80001
cd020001ce4c0001d0cc0001d2960001d3da0001d6560001d7da0001d7ea
0001d92e0001da440001db360001dc100001dc200001de100001df3a0001
df4a0001e1f20001e37e0001e4fc0001e6ea0001e8500001e8600001e870
0001e8800001e8900001e8a00001e8b00001ead60001eae60001ed640001
eeba0001f0f00001f3780001f4dc0001f6f00001f84c0001f9560001faa0
0001fc780001fca80001fe220001ff80000200a4000200b4000200c40002
00f400020104000202720002045e0002046e0002049e0002065600020864
000209f600020b0c00020b4000020d9a00020f4600020fa80002108e0002
110000021184000211bc0002121e000212ac000212c6000213040002133e
000213cc000214060002141e000214380002145200021470000214a40002
14d80002152e000215e200021634000216ac0002170e0002179c000217ec
00021848000218ce0002194400021988000219dc00021a2400021abc0002
1b2200021ba400021bfe00021c5c00021cc000021d7c00021df600021e76
00021f0e00021fae0002202e0002207800022146000221c0000222540002
22dc0002235800022382000223c800022432000224ae00022558000225de
000226a400022796000228500002295000022a4c00022b7800022ca00002
2d6200022e4800022f2800022fa80002304c000230dc0002319400023212
0002329c0002333e000233b000023432000234a60002356a000236180002
36a400023736000237dc000238880002395600023a0400023a7c00023b76
00023c1c00023c9800023cf800023d0e00023d9e00023e8c00023ea60002
3ee200023f1200023f4200024088000243ce0002455e0002469c00024868
00024a9400024b1600024b6c00024bc400024c5a00024cee00024d460002
4e0800024f0e00024fcc00025098000251480002522e000252ca0002538e
00025442000254820002564a00025828000259d000025a2400025a780002
5acc00025b2000025bc400025c6000025d0c00025db800025e6400025ef8
00025f8c00026020000260320002604400026056000260680002607a0002
60d000026128000261bc000261ce000261e0000261f20002620200026214
00026226000262380002624a0002625c0002626e00026354000264000002
64e60002659200026692000266bc000266ec000267240002675000026798
000267fc00026858000268a2000268f400026962000269b400026a040002
6a4600026a9800026ae600026b2600026b7800026bc800026c1200026c5c
00026c9c00026ce000026d2600026d6e00026dae00026dd400026e0e0002
6e3c00026e7000026ec200026f2a00026f8400026fea0002702a00027086
000270fc000271580002719e000272040002724200027282000272ba0002
72fc000273380002735e00027390000273c80002740e0002746e000274ca
000275280002756a000275c20002764000027690000276dc000277200002
776c000277a8000277e20002781a0002784a00027882000278c8000278f8
00027932000279580002798c000279c6000279ec00027a2200027a5c0002
7a9c00027ad400027b0c00027b5e00027b9800027bcc00027c1000027c48
00027c8200027ca800027ce400027d0a00027d5200027d9800027dda0002
7e3200027e7800027eca00027f0400027f4c00027f8600027fd800028016
0002807a000280ac0002815e000281900002822600028258000282f40002
8326000283da000284d4000286060002876000028886000289a200028ab0
00028d4800028f5e00029130000292ea000294ea00029702000298c00002
9a2000029a3000029b5400029cbc00029e1a00029fae0002a13e0002a300
0002a4ac0002a5e20002a7000002a8060002a8dc0002a9e60002aabc0001
000003ac00f2003c0068000500020010002f0055000004830ac300030002
0000005f047a000000030000000000fe00000000000300000001001e00fe
0000000300000002000c02080000000300000003007001d6000000030000
0004002c01e8000000030000000500180216000000030000000600300246
000000030000000700d800fe000000030000000800260302000000030000
00090086092a000000030000000a055609b0000000030000000b00720f06
000000030000000c00660f78000000030000000d06b40276000000030000
000e005c0fde0001000000000000007f103a0001000000000001000f10b9
00010000000000020006113e000100000000000300381125000100000000
00040016112e0001000000000005000c114500010000000000060018115d
0001000000000007006c10b90001000000000008001311bb000100000000
0009004314cf000100000000000a02ab1512000100000000000b003917bd
000100000000000c003317f6000100000000000d035a1175000100000000
000e002e18290003000104030002000e18770003000104030004002e1857
0003000104050002000e18a50003000104050004002e1885000300010406
0002000c18d30003000104060004002c18b30003000104070002000c18ff
0003000104070004002c18df0003000104080002000c1933000300010408
0004002c1913000300010409000000fe00000003000104090001001e00fe
0003000104090002000c02080003000104090003007001d6000300010409
0004002c01e8000300010409000500180216000300010409000600300246
000300010409000700d800fe000300010409000800260302000300010409
00090086092a000300010409000a055609b0000300010409000b00720f06
000300010409000c00660f78000300010409000d06b40276000300010409
000e005c0fde00030001040a0002000e195f00030001040a0004002e193f
00030001040b0002001418ff00030001040b0004003418df00030001040c
00020010198d00030001040c00040030196d00030001040e0002000819bd
00030001040e00040028199d0003000104100002000e19e5000300010410
0004002e19c50003000104130002000e1a130003000104130004002e19f3
0003000104140002000c18ff0003000104140004002c18df000300010415
0002000e1a410003000104150004002e1a210003000104160002000e1a6f
0003000104160004002e1a4f0003000104190002000c1a9d000300010419
0004002c1a7d00030001041b0002000e1ac900030001041b0004002e1aa9
00030001041d0002000c18ff00030001041d0004002c18df00030001041f
0002000c1af700030001041f0004002c1ad70003000104240002000e1b23
0003000104240004002e1b0300030001042a0002000e1b5100030001042a
0004002e1b3100030001042d0002000c1b7f00030001042d0004002c1b5f
00030001080a0002000e195f00030001080a0004002e193f000300010816
0002000e1a6f0003000108160004002e1a4f000300010c0a0002000e195f
000300010c0a0004002e193f000300010c0c00020010198d000300010c0c
00040030196d00540079007000650066006100630065002000a900200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e00200070006c0063002e00200044
006100740061002000a900200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
00200070006c0063002f005400790070006500200053006f006c00750074
0069006f006e007300200049006e0063002e00200031003900390030002d
0031003900390032002e00200041006c006c002000520069006700680074
007300200052006500730065007200760065006400540069006d00650073
0020004e0065007700200052006f006d0061006e00ae0020005400720061
00640065006d00610072006b0020006f006600200054006800650020004d
006f006e006f007400790070006500200043006f00720070006f00720061
00740069006f006e00200070006c00630020007200650067006900730074
006500720065006400200069006e00200074006800650020005500530020
0050006100740020002600200054004d0020004f00660066002e00200061
006e006400200065006c0073006500770068006500720065002e004d006f
006e006f0074007900700065003a00540069006d006500730020004e0065
007700200052006f006d0061006e0020004900740061006c00690063003a
00560065007200730069006f006e00200032002e0039003000200028004d
006900630072006f0073006f00660074002900540069006d00650073004e
006500770052006f006d0061006e00500053002d004900740061006c0069
0063004d0054004e004f00540049004600490043004100540049004f004e
0020004f00460020004c004900430045004e005300450020004100470052
00450045004d0045004e0054000d000a000d000a00540068006900730020
007400790070006500660061006300650020006900730020007400680065
002000700072006f007000650072007400790020006f00660020004d006f
006e006f00740079007000650020005400790070006f0067007200610070
0068007900200061006e0064002000690074007300200075007300650020
0062007900200079006f007500200069007300200063006f007600650072
0065006400200075006e0064006500720020007400680065002000740065
0072006d00730020006f0066002000610020006c006900630065006e0073
0065002000610067007200650065006d0065006e0074002e00200059006f
0075002000680061007600650020006f0062007400610069006e00650064
002000740068006900730020007400790070006500660061006300650020
0073006f0066007400770061007200650020006500690074006800650072
0020006400690072006500630074006c0079002000660072006f006d0020
004d006f006e006f00740079007000650020006f007200200074006f0067
006500740068006500720020007700690074006800200073006f00660074
007700610072006500200064006900730074007200690062007500740065
00640020006200790020006f006e00650020006f00660020004d006f006e
006f0074007900700065002700730020006c006900630065006e00730065
00650073002e000d000a000d000a005400680069007300200073006f0066
0074007700610072006500200069007300200061002000760061006c0075
00610062006c00650020006100730073006500740020006f00660020004d
006f006e006f0074007900700065002e00200055006e006c006500730073
00200079006f00750020006800610076006500200065006e007400650072
0065006400200069006e0074006f00200061002000730070006500630069
0066006900630020006c006900630065006e007300650020006100670072
00650065006d0065006e00740020006700720061006e00740069006e0067
00200079006f00750020006100640064006900740069006f006e0061006c
0020007200690067006800740073002c00200079006f0075007200200075
007300650020006f00660020007400680069007300200073006f00660074
00770061007200650020006900730020006c0069006d0069007400650064
00200074006f00200079006f0075007200200077006f0072006b00730074
006100740069006f006e00200066006f007200200079006f007500720020
006f0077006e0020007000750062006c0069007300680069006e00670020
007500730065002e00200059006f00750020006d006100790020006e006f
007400200063006f007000790020006f0072002000640069007300740072
006900620075007400650020007400680069007300200073006f00660074
0077006100720065002e000d000a000d000a0049006600200079006f0075
0020006800610076006500200061006e0079002000710075006500730074
0069006f006e00200063006f006e006300650072006e0069006e00670020
0079006f00750072002000720069006700680074007300200079006f0075
002000730068006f0075006c006400200072006500760069006500770020
0074006800650020006c006900630065006e007300650020006100670072
00650065006d0065006e007400200079006f007500200072006500630065
006900760065006400200077006900740068002000740068006500200073
006f0066007400770061007200650020006f007200200063006f006e0074
0061006300740020004d006f006e006f007400790070006500200066006f
00720020006100200063006f007000790020006f00660020007400680065
0020006c006900630065006e00730065002000610067007200650065006d
0065006e0074002e000d000a000d000a004d006f006e006f007400790070
0065002000630061006e00200062006500200063006f006e007400610063
007400650064002000610074003a000d000a000d000a0055005300410020
002d0020002800380034003700290020003700310038002d003000340030
0030000900090055004b0020002d00200030003100310034003400200030
00310037003300370020003700360035003900350039000d000a00680074
00740070003a002f002f007700770077002e006d006f006e006f00740079
00700065002e0063006f006d004d006f006e006f00740079007000650020
0054007900700065002000440072006100770069006e00670020004f0066
00660069006300650020002d0020005300740061006e006c006500790020
004d006f007200690073006f006e002c00200056006900630074006f0072
0020004c0061007200640065006e00740020003100390033003200540068
00690073002000720065006d00610072006b00610062006c006500200074
007900700065006600610063006500200066006900720073007400200061
007000700065006100720065006400200069006e00200031003900330032
00200069006e0020005400680065002000540069006d006500730020006f
00660020004c006f006e0064006f006e0020006e00650077007300700061
007000650072002c00200066006f00720020007700680069006300680020
006900740020007700610073002000640065007300690067006e00650064
002e00200020004900740020006800610073002000730075006200730065
007100750065006e0074006c00790020006200650063006f006d00650020
006f006e00650020006f0066002000740068006500200077006f0072006c
006400730020006d006f0073007400200073007500630063006500730073
00660075006c002000740079007000650020006300720065006100740069
006f006e0073002e002000200054006800650020006f0072006900670069
006e0061006c002000640072006100770069006e00670073002000770065
007200650020006d00610064006500200075006e00640065007200200053
00740061006e006c006500790020004d006f007200690073006f006e0027
007300200064006900720065006300740069006f006e0020006200790020
0056006900630074006f00720020004c0061007200640065006e00740020
006100740020005400680065002000540069006d00650073002e00200020
004900740020007400680065006e002000770065006e0074002000740068
0072006f00750067006800200061006e00200065007800740065006e0073
006900760065002000690074006500720061007400690076006500200070
0072006f006300650073007300200069006e0076006f006c00760069006e
00670020006600750072007400680065007200200077006f0072006b0020
0069006e0020004d006f006e006f00740079007000650027007300200054
007900700065002000440072006100770069006e00670020004f00660066
006900630065002e00200020004200610073006500640020006f006e0020
006500780070006500720069006d0065006e007400730020004d006f0072
00690073006f006e002000680061006400200063006f006e006400750063
0074006500640020007500730069006e0067002000500065007200700065
00740075006100200061006e006400200050006c0061006e00740069006e
002c00200069007400200068006100730020006d0061006e00790020006f
006c00640020007300740079006c00650020006300680061007200610063
007400650072006900730074006900630073002000620075007400200077
006100730020006100640061007000740065006400200074006f00200067
00690076006500200065007800630065006c006c0065006e00740020006c
00650067006900620069006c00690074007900200063006f00750070006c
006500640020007700690074006800200067006f006f0064002000650063
006f006e006f006d0079002e002000200057006900640065006c00790020
007500730065006400200069006e00200062006f006f006b007300200061
006e00640020006d006100670061007a0069006e00650073002c00200066
006f00720020007200650070006f007200740073002c0020006f00660066
00690063006500200064006f00630075006d0065006e0074007300200061
006e006400200061006c0073006f00200066006f00720020006400690073
0070006c0061007900200061006e00640020006100640076006500720074
006900730069006e0067002e0068007400740070003a002f002f00770077
0077002e006d006f006e006f0074007900700065002e0063006f006d002f
00680074006d006c002f006d0074006e0061006d0065002f006d0073005f
00740069006d00650073006e006500770072006f006d0061006e002e0068
0074006d006c0068007400740070003a002f002f007700770077002e006d
006f006e006f0074007900700065002e0063006f006d002f00680074006d
006c002f006d0074006e0061006d0065002f006d0073005f00770065006c
0063006f006d0065002e00680074006d006c0068007400740070003a002f
002f007700770077002e006d006f006e006f0074007900700065002e0063
006f006d002f00680074006d006c002f0074007900700065002f006c0069
00630065006e00730065002e00680074006d006c547970656661636520a9
20546865204d6f6e6f7479706520436f72706f726174696f6e20706c632e
204461746120a920546865204d6f6e6f7479706520436f72706f72617469
6f6e20706c632f5479706520536f6c7574696f6e7320496e632e20313939
302d313939322e20416c6c2052696768747320526573657276656454696d
6573204e657720526f6d616ea82054726164656d61726b206f6620546865
204d6f6e6f7479706520436f72706f726174696f6e20706c632072656769
73746572656420696e2074686520555320506174202620544d204f66662e
20616e6420656c736577686572652e4d6f6e6f747970653a54696d657320
4e657720526f6d616e204974616c69633a56657273696f6e20322e393020
284d6963726f736f66742954696d65734e6577526f6d616e50532d497461
6c69634d544e4f54494649434154494f4e204f46204c4943454e53452041
475245454d454e540d0a0d0a546869732074797065666163652069732074
68652070726f7065727479206f66204d6f6e6f74797065205479706f6772
6170687920616e64206974732075736520627920796f7520697320636f76
6572656420756e64657220746865207465726d73206f662061206c696365
6e73652061677265656d656e742e20596f752068617665206f627461696e
6564207468697320747970656661636520736f6674776172652065697468
6572206469726563746c792066726f6d204d6f6e6f74797065206f722074
6f676574686572207769746820736f667477617265206469737472696275
746564206279206f6e65206f66204d6f6e6f747970652773206c6963656e
736565732e0d0a0d0a5468697320736f6674776172652069732061207661
6c7561626c65206173736574206f66204d6f6e6f747970652e20556e6c65
737320796f75206861766520656e746572656420696e746f206120737065
6369666963206c6963656e73652061677265656d656e74206772616e7469
6e6720796f75206164646974696f6e616c207269676874732c20796f7572
20757365206f66207468697320736f667477617265206973206c696d6974
656420746f20796f757220776f726b73746174696f6e20666f7220796f75
72206f776e207075626c697368696e67207573652e20596f75206d617920
6e6f7420636f7079206f722064697374726962757465207468697320736f
6674776172652e0d0a0d0a496620796f75206861766520616e7920717565
7374696f6e20636f6e6365726e696e6720796f7572207269676874732079
6f752073686f756c642072657669657720746865206c6963656e73652061
677265656d656e7420796f75207265636569766564207769746820746865
20736f667477617265206f7220636f6e74616374204d6f6e6f7479706520
666f72206120636f7079206f6620746865206c6963656e73652061677265
656d656e742e0d0a0d0a4d6f6e6f747970652063616e20626520636f6e74
61637465642061743a0d0a0d0a555341202d202838343729203731382d30
3430300909554b202d203031313434203031373337203736353935390d0a
687474703a2f2f7777772e6d6f6e6f747970652e636f6d4d6f6e6f747970
6520547970652044726177696e67204f6666696365202d205374616e6c65
79204d6f7269736f6e2c20566963746f72204c617264656e742031393332
546869732072656d61726b61626c65207479706566616365206669727374
20617070656172656420696e203139333220696e205468652054696d6573
206f66204c6f6e646f6e206e65777370617065722c20666f722077686963
68206974207761732064657369676e65642e202049742068617320737562
73657175656e746c79206265636f6d65206f6e65206f662074686520776f
726c6473206d6f7374207375636365737366756c20747970652063726561
74696f6e732e2020546865206f726967696e616c2064726177696e677320
77657265206d61646520756e646572205374616e6c6579204d6f7269736f
6e277320646972656374696f6e20627920566963746f72204c617264656e
74206174205468652054696d65732e20204974207468656e2077656e7420
7468726f75676820616e20657874656e7369766520697465726174697665
2070726f6365737320696e766f6c76696e67206675727468657220776f72
6b20696e204d6f6e6f74797065277320547970652044726177696e67204f
66666963652e20204261736564206f6e206578706572696d656e7473204d
6f7269736f6e2068616420636f6e647563746564207573696e6720506572
706574756120616e6420506c616e74696e2c20697420686173206d616e79
206f6c64207374796c652063686172616374657269737469637320627574
20776173206164617074656420746f206769766520657863656c6c656e74
206c65676962696c69747920636f75706c6564207769746820676f6f6420
65636f6e6f6d792e2020576964656c79207573656420696e20626f6f6b73
20616e64206d6167617a696e65732c20666f72207265706f7274732c206f
666669636520646f63756d656e747320616e6420616c736f20666f722064
6973706c617920616e64206164766572746973696e672e687474703a2f2f
7777772e6d6f6e6f747970652e636f6d2f68746d6c2f6d746e616d652f6d
735f74696d65736e6577726f6d616e2e68746d6c687474703a2f2f777777
2e6d6f6e6f747970652e636f6d2f68746d6c2f6d746e616d652f6d735f77
656c636f6d652e68746d6c687474703a2f2f7777772e6d6f6e6f74797065
2e636f6d2f68746d6c2f747970652f6c6963656e73652e68746d6c005400
69006d006500730020004e0065007700200052006f006d0061006e002000
6300750072007300690076006100540069006d006500730020004e006500
7700200052006f006d0061006e0020006b00750072007a00ed0076006100
540069006d006500730020004e0065007700200052006f006d0061006e00
20006b0075007200730069007600540069006d006500730020004e006500
7700200052006f006d0061006e0020004b00750072007300690076006f00
690074007500540069006d006500730020004e0065007700200052006f00
6d0061006e002003a003bb03ac03b303b903b100540069006d0065007300
20004e0065007700200052006f006d0061006e0020004300750072007300
690076006100540069006d006500730020004e0065007700200052006f00
6d0061006e0020004900740061006c006900710075006500540069006d00
6500730020004e0065007700200052006f006d0061006e00200044015100
6c007400540069006d006500730020004e0065007700200052006f006d00
61006e00200043006f0072007300690076006f00540069006d0065007300
20004e0065007700200052006f006d0061006e0020004300750072007300
690065006600540069006d006500730020004e0065007700200052006f00
6d0061006e0020006b00750072007300790077006100540069006d006500
730020004e0065007700200052006f006d0061006e00200049007400e100
6c00690063006f00540069006d006500730020004e006500770020005200
6f006d0061006e0020041a0443044004410438043200540069006d006500
730020004e0065007700200052006f006d0061006e0020004b0075007200
7a00ed0076006100540069006d006500730020004e006500770020005200
6f006d0061006e0020013000740061006c0069006b00540069006d006500
730020004e0065007700200052006f006d0061006e00200050006f016100
650076006e006f00540069006d006500730020004e006500770020005200
6f006d0061006e0020006e00670068006900ea006e006700540069006d00
6500730020004e0065007700200052006f006d0061006e00200045007400
7a0061006e0061000000ba0054ffc003bbb345453240b803bbb32b2e3240
b803bbb2282932b9ffc003bbb31a263280411303bb009f03bb00af03bb00
cf03bb0004000003bb001f03bb000203bb02af0027001fffc003b9b2161b
32b9ffc003b8b2424232b9ffc003b8b2363832b9ffc003b8b32a2d32df41
0a03b800ef03b8000203b803b90028001fffc003b9b3282e32f0410b03b9
0001000003b7000103b700030800001f03b60381b23a1f0f411703b30010
03b2002003b2005003b2007003b200e003b2000600cf03b300df03b300ef
03b300ff03b30004001203a8b2e2891fbe039f016b019a001f0398009308
01400c1f7f047f05027f027f03025fbb02b00001ffc00117b2196632b8ff
c0b3651a6632b9ff800173b2196632bd038401170800001fffc002afb231
3340b802afb22e3340b802afb328293240b802afb326273240b802afb321
253240b802afb31c203240b802afb2233340b802afb21933a0bc02af00b0
02af00e002afb5034003212932b8fff2b33a263d32bc038203820382003a
0800b51f40255c331eb80381b25c6432b8ffeeb3252e3314b80381b32b2e
3269be03810001008a03810001000e0381b32b2f3210b80381b3515b320c
b80381b34e513222b80381b3474d320eb80381b246330ab8038140092647
3212254358320cb80381b2323310b80381b22a3312b80381b3373d3212bb
0381003d0033fff44015253d331825355b32102526343206252a330c252e
33b8fffe4024252d330c3a2f33329925aa25ba25c92504052536330c2532
3832193a293a383a03182517b80381b42825382504bc0381038103810025
080040101f0f1f2b2e32691f781f020b1f303332b8fff1b31f263d32bc03
8003800380001f080040151f375f07af07025f06af060222ac2b2e3209ac
2f33b8ffdc400aac1f223222232b52320eb8037fb229330eb8037fb22233
14b8037fb21e2032b8ffe7b71e2b33321e2b2f32b9ffc0037fb64c4f3232
262c33410affee037f00390033fff8037f002b0033ffea037fb23a3320b8
037fb33f46321eb8037fb32f3a3212b8037fb22e331eb8037fb32a2d320e
b8037fb2263304b8037fb3494a3404b8037fb2463304b8037fb2213318b8
037f400c1d3322263032322226333832b8fff8400a262b2f3209261b2132
8abe037f0001037f037f037f00260800402e1f371f062f063f06039f02af
02bf02cf02049f03af03bf03cf03046f037f038f03031f032f033f034f03
5f03050f413502ed0001005f02ed009f02ed00df02ed0003002f02ed003f
02ed006f02ed000300af02af0001004f02af009f02af0002002f02af003f
02af0002003f02b00001004f02af005f02af0002002f02af003f02af0002
007003b2000103b203b202ed02ed02b002b002af02af401a370100300140
0102010100090102000800171700000012110840410b027b02230034000d
013d0034000d01370034000d011b401a340d8f340d84340d68340d59340d
54340d48340d2c340d28340d411002350020000d021b0020000d01fc0020
000d01c30020000d01500020000d012c401a200df0200dbe200d94200d79
200d6a200d61200d5f200d44200d410d013e0138000d003d0138000d0030
0138000d001d0138000d01fdb40f4d0f0009bf01fd004d000d03b1037f00
15001f0215b226341fb80214b2263f1fb80208b21ebb1f41190206001e08
01001f0205001f02ab001f0204001f02ab001f0203001f0401001f020100
31019a001f01fb00230156001f01aeb2262a1fb801adb2262a1fb801abb2
26341f411501a8002602ab001f01a5001e0125001f01a400ab02ab001f01
a2003102ab001f01a1003102ab001f019db2236c1fb8019cb2236c1f4109
019b00230401001f019a0033019a001f0176b2262e1fb8016cb231721f41
11016b0023019a001f016800240401001f014500260801001f013f002304
01001f0123b21e9e1fbc0121001e0201001f0100b426791ffd1fb80125b2
1ffa33b80801b21ff924b802abb21fe826b80101b21fe51fb8019ab21fe4
31b80101400b1fe331e41fe231891fd226b80201b61fd026cd1fcd25b804
01b21fb731b8019ab21fae26b80801b21fac1eb80401400b1f9e315e1f97
269e1f9333b80801b21f8a24b8019ab21f831fb802ab40131f82236c1f75
23e41f7026cd1f6423721f5e25b80401b21f5d23b802abb21f55e6b80401
b21f5324b80201b21f4f33b802abb21f4e26b8040140131f4731671f4626
ab1f4331cd1f3e235e1f3a1fb80401b61f3924e41f3723b80801b21f2e23
b80401b21f2a1eb80125400b1f2923ab1f2731ab1f5537bc01c60007018a
0007012b402e077f077107690766074b074007380736072d072207210714
08120810080e080c080a080808060804080208000814b8ffe0402b000001
001406100000010006040000010004100000010010020000010002000000
01000002010802004a00b013034b024b5342b0372b4bb807ff52b0382b4b
b009505b58b101018e59014bb0c063004b6220b0f65323b8010a515ab005
234201b0124b004b544218b0382bb00288b801005458b801ffb101018e85
1bb0124358b900010140858d1bb900010159858d59590016763f183f123e
113946443e113946443e113946443e113946443e11394660443e11394660
442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b181d
b0964b5358b0aa1d59b0324b5358b0ff1d594bb04753205c58b9027d027b
4544b9027c027b45445958b90146027d455258b9027d01464459594bb047
53205c58b9001e027c4544b90026027c45445958b9017f001e455258b900
1e017f4459594bb05e53205c58b9001f027d4544b90025027d45445958b9
01a8001f455258b9001f01a84459594bb8010153205c58b1ab1f4544b11f
1f45445958b9047000ab455258b900ab04704459594bb8012553205c58b1
e61f4544b11f1f45445958b9051000e6455258b900e605104459594bb017
53205c58b124244544b1312445445958b12224455258b124224459594bb0
5153205c58b124244544b1232445445958b17d24455258b1247d4459594b
b06e53205c58b124244544b1332445445958b1aa24455258b124aa445959
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b45695342014b5058b10800425943
5c58b1080042591610703eb0124358b911b53d801bba011c03d9000b2b59
b00a2342b00b2342003f3f182b103c012f5d060cb0062342b0072342b012
4358b93b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b9
2d412d411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b
211bba01a80400000b2b59b0102342b0112342002b4bb02e5358b8016b45
b02a60b8016b234459001845694445694418456944456944737373737575
7573737475757575752b4bb026534bb03d515a58b1262645b0196044592b
45186944742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b004bb02a534bb03f515a58b1070745b04060445973732b2b45186944
2b2b752b2b4518694475752b2b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b74752b2b2b2b2b451869442b002b732b2b2b2b2b2b2b2b2b012b2b2b
007373732b2b2b01435c58b8ffdeb31e1c3318b8037fb52b3318262b33b9
fff00381b112332b2b2b2b590173742b002b73752b2b732b2b2b2b2b7375
2b2b2b2b2b0000>
[15881 15773 15825 15945 16225 16185 13909 15369 16289 16301 17089 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2460 10 <0001010d03230217056b000e0037400a0b0e1b0e2000030e0900b80184b6
06031017171a09b801b0b500190fbcfb182b4e10f44dfd4e456544e6003f
4ded0111393130015d011336373636333216151407060703010d1f0d0d13
452b242a0a0d3d8a032301287e2c3f37281f171c2681fed9>TimesNewRomanPS-ItalicMT AddT42Char 
1 3304 14 <00010025008d045b04c3000b0043402606d7075d0ad70b0b00082909d700
05d7045d01d70008d7060b290500d77f020102190c9ff6182b4e10f45d4d
f43cfd3ce4002ff4fde410f4ed103c10f4fde43130251121352111331121
1521110216fe0f01f15201f3fe0d8d01f35201f1fe0f52fe0d00>TimesNewRomanPS-ItalicMT AddT42Char 
1 3536 16 <00010036017a026501ff0003001cb300830201b80311b6050219046d8e18
2b4e10e44d10e4002ffd313001072137026529fdfa2901ff8585>TimesNewRomanPS-ItalicMT AddT42Char 
2 7734 71 <00020027ffe80454058e002f003b01c2409e071e011422190f3f0b401935
0a4019350b40363c340a40363c340b183435340b403233340a403235341b
0a1a0b690a690bdf0ade0b063f154f155f155533040b4019350a4019350b
40223a343635491e493b552e873596019b149a15a600b601b80ab51db434
b3350e540001260101f335010c18223a340a40223a340b40223a343d4025
353d402324343d401c3514141523242626136c0a010a0b2ffe26b801f340
26282e302f4d2314333930261b3a36231403130000280003002f031f1326
141313263324200739b8ffdab21e3939b8032e400b18180e0b133c282613
1000b80303b326af130bb8ffc0400a36350b40329e340b8a0ab8ffc0b736
350a40439e340ab80143400a03e42f95001310130213b8ff80b2533513ba
029500360381400e1b8053351b4025351b401d24341bb8ffc0b228351bb8
ffc040112e3434ef1b011b193c1317133c0a32a7182b2b103c2b10f65d2b
2b2b2b2be9f42b71e4fdf62b2bed2b2b10f4ed2b103c2b10c0003f3c10ed
2b3fed870e2e2b087d10c42b183f011112393912391112390011123939f5
ed2bfc01f510c95d870e103c3c087dc43130012b2b2b2b2b2b715d5d5d00
2b2b2b7201722b2b2b2b2b2b2b2b005d0101061514163332373637170606
232226353437370607062322263534123736333216171336373635342726
232207350334262322001514163332000454fea81c11090d122250224893
40222c1e279177524b4c71be9c7b67364e26620b070c0f152117351b4a39
7efeef422e68013a058efb64601e0a120d186015647c302c39607ce0563b
87749501526a552c33015c2516281a150e110725fd73404efe60be4b4f01
c200>TimesNewRomanPS-ItalicMT AddT42Char 
2 11682 79 <0001004fffe80261058e001d0129404a09000112001f011f401a35540054
1cef1ff917040a200b300b400b500b040b1d45155a281c301d4d00000003
001d031f1215141212150f0b121e28151210200b300b400b500b040b6c0a
ba01bb001d0124400c032512001201c012d0120212b8013b400a1e091217
121e0a774c182b2b103c2b2b10f65d71435c58b90012ffc0b3170e3f12b8
ffc0400932193f124028143f12b8ffc0b325163f12b8ffc0401323153f12
4021143f1240170e3f1240101b3f12b8ffc0b30f193f12b8ffc040090e17
3f12400d163f12b8ffc0b51839124016392b2b2b2b2b2b2b2b2b2b2b2b2b
5901ede4f4ec5d2b103c2b10c0003f870e2e2b087d10c400183ff5ed2bfc
01f500105dc93130015d2b0171435c58400b0b40170e3f0a40170e3f01b8
ffdeb123392b2b2b59015d01010615141633323736371706070623222635
34370136353426232207350261feaa19130e131634391e5f503b35263320
010f212628172f058efb5a59140f141129561f8635263422247003aa7311
181f0725>TimesNewRomanPS-ItalicMT AddT42Char 
2 12902 81 <00010027ffe803ad03890036018f400901180c392d180c390ab8ffde409c
13143e14221339082f16001b021b2f0451075209521e512079017b2d891e
a627a428ba02ba260b5c015c28bf01035a095a1e5a2003690669096a1e79
09791e7b2606562a51356c260352000114221935132219350101022a2b2b
00131436452d5a283530364d0001232c01002d9f2301233104040007070c
0c1f1b20141b1b20002b00362b1f2c2d142c2c2d2c2b0a180b1b3728201b
2d2c10148a13b80143b30c072520b80124b20c251bb8ffc0b25c351bb802
95b235c92dbc0124002b0203002cffc0b217392cb8ffc0b25c352cb8ffc0
b23a352cb8ffc0b32a34342cb8ffc0b32324342cb8ffc0b21c352cb8ffc0
4013191a34ef2c012c19371b172c171b370a3286182b2b103c2b2b4e10f4
5d2b2b2b2b2b2b2b4dede4e4f42bedf4ed10f6ed2b103c103c2b10c0003f
3f3c87052e2b087d10c4870e2e182b7d10c400183f3c10ed720111123900
11123910f5ed2bfc01f510c987100e7dc4083c3130012b2b5d5d5d4bb032
534bb036515a58b120223859015d005d015d712b2b2b2b01031236333216
151407030615141633323736371706070623222635343713363534262322
07060607060707231336353426232207072701c485bbc75c32411d7a1510
090c11353f1f5d533a2e252c2274161a131c274aa0592f1f3296b620231a
0c1e26060389fe390117b042353c64fe5b49100e130d2a56138539272d26
307501924b2a1419182dcfa15565a5027271171621040624>TimesNewRomanPS-ItalicMT AddT42Char 
1 0 0 <0002010000000500050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121010004
00fc2003c0fc400500fb002004c0>TimesNewRomanPS-ItalicMT AddT42Char 
TimesNewRomanPS-ItalicMT /CharStrings get begin
/quotesingle 10 def
/plus 14 def
/hyphen 16 def
/d 71 def
/l 79 def
/n 81 def
end
TimesNewRomanPS-ItalicMT /Encoding get
dup 39 /quotesingle put
dup 43 /plus put
dup 45 /hyphen put
dup 100 /d put
dup 108 /l put
dup 110 /n put
pop
end
%ADOEndSubsetFont
/RFTVCF+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/RFTVCF+TimesNewRomanPS-ItalicMT*1 
[39{/.notdef}rp /quotesingle 3{/.notdef}rp /plus /.notdef /hyphen 54{/.notdef}rp /d 
7{/.notdef}rp /l /.notdef /n 145{/.notdef}rp]
RFTVCF+TimesNewRomanPS-ItalicMT nf
RFTVCF+TimesNewRomanPS-ItalicMT*1 [0 -7.7913 -7.7913 0 0 0 ]msf
44.8272 209.63 mo
(n+d-l')
[-3.89487 -5.25838 -3.89487 -2.59366 -2.16521 0 ]ysh
65.6258 91.4735 mo
91.7713 91.4735 li
91.7713 65.328 li
65.6258 65.328 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
65.6258 91.4735 mo
91.7713 91.4735 li
91.7713 65.328 li
65.6258 65.328 li
cp
.75021 .679683 .670222 .90164 cmyk
@
91.7713 91.4735 mo
cp
@
74.3555 79.9939 mo
74.3555 73.9486 li
76.4725 74.6033 li
76.4725 74.8216 li
76.1669 74.7561 75.8832 74.7125 75.6432 74.7125 cv
75.3594 74.7125 75.1412 74.7998 74.9884 74.9743 cv
74.8793 75.1053 74.8357 75.4545 74.8357 76.0001 cv
74.8357 76.633 li
80.3136 78.2044 li
80.9901 78.4008 81.4048 78.5099 81.5794 78.5099 cv
81.7322 78.5099 81.8413 78.4444 81.9504 78.3135 cv
82.0377 78.1825 82.0813 77.9643 82.0813 77.6588 cv
82.0813 77.375 li
82.2996 77.4623 li
82.2996 80.9106 li
82.0813 80.8451 li
82.0813 80.6923 li
82.0813 80.3868 82.0377 80.1467 81.9286 79.9939 cv
81.8631 79.8848 81.754 79.7757 81.5794 79.6884 cv
81.4048 79.5793 81.0338 79.4702 80.4663 79.2956 cv
74.8357 77.6588 li
74.8357 78.1171 li
74.8357 78.5754 74.9011 78.9464 75.0103 79.2301 cv
75.1194 79.5138 75.294 79.7321 75.5122 79.9066 cv
75.7305 80.0813 76.0578 80.2122 76.4725 80.3213 cv
76.4725 80.5396 li
f
106.328 263.056 mo
106.328 262.904 106.394 262.751 106.503 262.642 cv
106.612 262.533 106.743 262.467 106.917 262.467 cv
107.07 262.467 107.223 262.533 107.332 262.642 cv
107.441 262.751 107.507 262.904 107.507 263.056 cv
107.507 263.209 107.441 263.362 107.332 263.471 cv
107.223 263.58 107.07 263.646 106.917 263.646 cv
106.743 263.646 106.612 263.58 106.503 263.471 cv
106.394 263.362 106.328 263.231 106.328 263.056 cv
cp
108.663 262.991 mo
112.766 264.148 li
113.028 264.213 113.203 264.257 113.268 264.257 cv
113.312 264.257 113.377 264.235 113.421 264.213 cv
113.443 264.17 113.465 264.126 113.465 264.082 cv
113.465 264.017 113.443 263.951 113.377 263.864 cv
113.203 263.646 112.941 263.406 112.635 263.187 cv
112.766 262.991 li
113.159 263.253 113.508 263.558 113.792 263.929 cv
113.989 264.191 114.098 264.431 114.098 264.671 cv
114.098 264.846 114.054 264.977 113.945 265.064 cv
113.858 265.173 113.748 265.217 113.596 265.217 cv
113.443 265.217 113.203 265.173 112.875 265.086 cv
110.257 264.322 li
109.82 264.191 109.558 264.126 109.449 264.126 cv
109.362 264.126 109.274 264.17 109.231 264.213 cv
109.165 264.279 109.144 264.366 109.144 264.475 cv
109.144 264.562 109.165 264.737 109.209 264.999 cv
108.991 264.999 li
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TimesNewRomanPS-ItalicMT gcheck setglobal} if
2 13728 83 <0002ff1efe4a03c80389002300320153404b55018d0c9d0cad0cbc0d0539
154b00460e4615482a5506650e750e791aac28b908bc29b92ac91a0e4322
5000560e0330003422400003010d2431320e0e00161a173016150e143015
23451bb801a7400e282230234d0024012f2601001b2fb8038d4022040400
0728000e00230e1f1a1b141a1a1b26240a0b16150e0f1a011a33281b1a10
2cba03810007ffc0b22e3507b8ffc0b2293507b8ffc0b2273507b8ffc040
15203507401f354f0701400750077007a007c0070507ba033b0000032bb4
1b2323b81ab8ffc0b732351a401e123f1ab8ffc040121c351a401b1d34ef
1a011b19331a171a330ab8033ab156182b2b103c2b10f45d2b2b2b2b7ae8
182f10edfd5d712b2b2b2b2be92b103c2b10c071003f3c3fed870e2e2b08
7d10c42b183f003c10ed01111239001112393910f5ed2bfc01f50010ed01
10c00010ed0110c0870e103c3c3c3c7dc43130015d5d5d005d0107363633
321615140023222627030615141616330721373636371336353426232207
35131633323e033534262322060701c5456dab59597efe9aee324d304916
17344d09fe290a5d4124fd171f201d346e3e69346c67524149316cd33103
89e680668d71dcfe39161cfefe4c17161f11252504387f036c53141b1e07
27fd134a3a7295ca635055f8a600>TimesNewRomanPS-ItalicMT AddT42Char 
TimesNewRomanPS-ItalicMT /CharStrings get begin
/p 83 def
end
TimesNewRomanPS-ItalicMT /Encoding get
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/RFTVCF+TimesNewRomanPS-ItalicMT*1 
[39{/.notdef}rp /quotesingle 3{/.notdef}rp /plus /.notdef /hyphen 54{/.notdef}rp /d 
7{/.notdef}rp /l /.notdef /n /.notdef /p 143{/.notdef}rp]
RFTVCF+TimesNewRomanPS-ItalicMT nf
RFTVCF+TimesNewRomanPS-ItalicMT*1 [0 -7.7913 -7.7913 0 0 0 ]msf
115.669 262.424 mo
(n-p)
[-3.90265 -2.60146 0 ]ysh
65.2548 274.078 mo
91.4003 274.078 li
91.4003 247.91 li
65.2548 247.91 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
65.2548 274.078 mo
91.4003 274.078 li
91.4003 247.91 li
65.2548 247.91 li
cp
.75021 .679683 .670222 .90164 cmyk
@
91.4003 274.078 mo
cp
@
73.9845 262.576 mo
73.9845 256.553 li
76.1015 257.186 li
76.1015 257.426 li
75.7959 257.339 75.5122 257.295 75.2721 257.295 cv
74.9884 257.295 74.7702 257.382 74.6174 257.557 cv
74.5083 257.71 74.4646 258.037 74.4646 258.582 cv
74.4646 259.215 li
79.9426 260.787 li
80.6191 260.983 81.0338 261.092 81.2084 261.092 cv
81.3611 261.092 81.4703 261.027 81.5794 260.896 cv
81.6667 260.765 81.7103 260.547 81.7103 260.241 cv
81.7103 259.979 li
81.9286 260.045 li
81.9286 263.493 li
81.7103 263.427 li
81.7103 263.275 li
81.7103 262.969 81.6667 262.729 81.5576 262.576 cv
81.4921 262.467 81.383 262.358 81.2084 262.271 cv
81.0338 262.184 80.6628 262.053 80.0953 261.878 cv
74.4646 260.241 li
74.4646 260.721 li
74.4646 261.18 74.5301 261.529 74.6392 261.813 cv
74.7484 262.096 74.923 262.314 75.1412 262.489 cv
75.3813 262.664 75.6868 262.816 76.1015 262.926 cv
76.1015 263.122 li
f
106.612 139.858 mo
106.612 139.684 106.656 139.553 106.786 139.443 cv
106.896 139.313 107.027 139.269 107.201 139.269 cv
107.354 139.269 107.485 139.334 107.594 139.443 cv
107.725 139.553 107.769 139.684 107.769 139.858 cv
107.769 140.011 107.725 140.142 107.594 140.273 cv
107.485 140.382 107.354 140.447 107.201 140.447 cv
107.027 140.447 106.896 140.382 106.786 140.273 cv
106.656 140.164 106.612 140.011 106.612 139.858 cv
cp
108.925 139.771 mo
113.028 140.928 li
113.312 141.015 113.487 141.058 113.53 141.058 cv
113.596 141.058 113.639 141.037 113.683 140.993 cv
113.727 140.949 113.748 140.906 113.748 140.862 cv
113.748 140.797 113.705 140.731 113.661 140.644 cv
113.487 140.426 113.225 140.207 112.897 139.989 cv
113.028 139.771 li
113.443 140.033 113.792 140.36 114.054 140.709 cv
114.272 140.971 114.381 141.233 114.381 141.473 cv
114.381 141.626 114.316 141.757 114.229 141.866 cv
114.141 141.975 114.01 142.019 113.879 142.019 cv
113.727 142.019 113.487 141.975 113.159 141.866 cv
110.518 141.102 li
110.104 140.993 109.82 140.928 109.711 140.928 cv
109.624 140.928 109.558 140.949 109.515 141.015 cv
109.449 141.08 109.427 141.168 109.427 141.255 cv
109.427 141.342 109.449 141.517 109.493 141.8 cv
109.253 141.8 li
f
1 /0 /CSD get_res sepcs
1 sep
RFTVCF+TimesNewRomanPS-ItalicMT*1 [0 -7.7913 -7.7913 0 0 0 ]msf
115.931 139.203 mo
(n)sh
65.6258 212.839 mo
91.7713 212.839 li
91.7713 186.693 li
65.6258 186.693 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
65.6258 212.839 mo
91.7713 212.839 li
91.7713 186.693 li
65.6258 186.693 li
cp
.75021 .679683 .670222 .90164 cmyk
@
91.7713 212.839 mo
cp
@
74.3555 201.359 mo
74.3555 195.314 li
76.4725 195.968 li
76.4725 196.187 li
76.1669 196.121 75.8832 196.078 75.6432 196.078 cv
75.3594 196.078 75.1412 196.165 74.9884 196.34 cv
74.8793 196.47 74.8357 196.82 74.8357 197.365 cv
74.8357 197.998 li
80.3136 199.57 li
80.9901 199.766 81.4048 199.875 81.5794 199.875 cv
81.7322 199.875 81.8413 199.81 81.9504 199.679 cv
82.0377 199.548 82.0813 199.329 82.0813 199.024 cv
82.0813 198.74 li
82.2996 198.827 li
82.2996 202.276 li
82.0813 202.21 li
82.0813 202.057 li
82.0813 201.752 82.0377 201.512 81.9286 201.359 cv
81.8631 201.25 81.754 201.141 81.5794 201.054 cv
81.4048 200.966 81.0338 200.835 80.4663 200.661 cv
74.8357 199.024 li
74.8357 199.482 li
74.8357 199.941 74.9011 200.312 75.0103 200.595 cv
75.1194 200.879 75.294 201.097 75.5122 201.272 cv
75.7305 201.446 76.0578 201.577 76.4725 201.686 cv
76.4725 201.905 li
f
.7202 201.119 mo
14.906 201.119 li
@
.7202 19.7588 mo
14.906 19.7588 li
@
7.81311 198.522 mo
7.81311 22.334 li
@
11.0431 197.867 mo
7.81312 201.119 li
4.58312 197.867 li
11.0431 197.867 li
ef
4.58311 22.9888 mo
7.81312 19.7588 li
11.0431 22.9888 li
4.58311 22.9888 li
ef
.611082 113.756 mo
15.0151 113.756 li
15.0151 107.864 li
.611082 107.864 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
3.07724 109.828 mo
10.061 111.814 li
10.4102 111.923 10.6066 111.967 10.6939 111.967 cv
10.7594 111.967 10.8031 111.945 10.8467 111.923 cv
10.8685 111.879 10.8904 111.836 10.8904 111.77 cv
10.8904 111.705 10.8685 111.617 10.8031 111.53 cv
10.6285 111.334 10.3884 111.115 10.061 110.897 cv
10.2356 110.723 li
10.7594 111.094 11.1304 111.443 11.3268 111.748 cv
11.4796 111.988 11.5451 112.207 11.5451 112.403 cv
11.5451 112.556 11.5014 112.687 11.3923 112.774 cv
11.305 112.883 11.1741 112.927 11.0431 112.927 cv
10.9122 112.927 10.6285 112.861 10.192 112.73 cv
4.69224 111.159 li
4.23393 111.028 3.97204 110.963 3.90656 110.963 cv
3.81927 110.963 3.75379 110.985 3.68832 111.072 cv
3.62285 111.137 3.60102 111.268 3.60102 111.421 cv
3.60102 111.508 3.60102 111.639 3.64467 111.814 cv
3.42643 111.814 li
.75021 .679683 .670222 .90164 cmyk
f
6.70007 108.475 mo
4.97595 108.3 li
4.47399 108.256 4.14663 108.191 3.97203 108.147 cv
3.73196 108.06 3.55737 107.973 3.44825 107.842 cv
3.33912 107.689 3.29548 107.536 3.29548 107.383 cv
3.29548 107.231 3.33912 107.122 3.4046 107.034 cv
3.4919 106.969 3.57919 106.925 3.71014 106.925 cv
3.79744 106.925 3.88473 106.947 3.99385 106.969 cv
4.14663 107.034 4.47399 107.165 4.97595 107.405 cv
6.70007 108.213 li
f
119.816 139.16 mo
133.98 139.16 li
@
119.816 19.7588 mo
133.98 19.7588 li
@
126.909 136.563 mo
126.909 22.334 li
@
130.139 135.93 mo
126.909 139.16 li
123.657 135.93 li
130.139 135.93 li
ef
123.657 22.9888 mo
126.909 19.7588 li
130.139 22.9888 li
123.657 22.9888 li
ef
119.707 82.8311 mo
134.089 82.8311 li
134.089 76.8294 li
119.707 76.8294 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
122.173 75.9564 mo
129.069 77.9861 li
129.462 78.0952 129.702 78.1389 129.811 78.1389 cv
129.855 78.1389 129.898 78.1171 129.92 78.0952 cv
129.964 78.0516 129.986 78.0298 129.986 77.9861 cv
129.986 77.9425 129.964 77.877 129.898 77.8115 cv
129.811 77.6806 129.571 77.4405 129.2 77.135 cv
129.331 76.9385 li
129.724 77.2223 130.029 77.506 130.269 77.7897 cv
130.51 78.0734 130.641 78.3571 130.641 78.5972 cv
130.641 78.7281 130.597 78.8372 130.488 78.9246 cv
130.4 79.0119 130.269 79.0555 130.095 79.0555 cv
129.877 79.0555 129.571 78.99 129.2 78.8809 cv
128.48 78.6408 li
129.353 79.2083 129.964 79.7321 130.291 80.1904 cv
130.531 80.5177 130.641 80.8233 130.641 81.107 cv
130.641 81.4125 130.51 81.6744 130.248 81.8927 cv
129.986 82.1109 129.615 82.22 129.178 82.22 cv
128.589 82.22 127.956 82.0454 127.301 81.6744 cv
126.647 81.3034 126.101 80.8015 125.686 80.1904 cv
125.359 79.7102 125.206 79.2737 125.206 78.8809 cv
125.206 78.6627 125.25 78.4881 125.315 78.3353 cv
125.403 78.1825 125.555 78.0298 125.752 77.877 cv
123.722 77.3096 li
123.569 77.2659 123.46 77.2223 123.373 77.2004 cv
123.22 77.1568 123.089 77.135 122.98 77.135 cv
122.893 77.135 122.827 77.1568 122.784 77.2223 cv
122.718 77.2877 122.675 77.3969 122.675 77.5278 cv
122.675 77.6151 122.696 77.7679 122.718 77.9861 cv
122.5 77.9861 li
cp
126.319 78.1389 mo
126.079 78.1389 125.883 78.2043 125.73 78.3571 cv
125.577 78.4881 125.49 78.6845 125.49 78.9027 cv
125.49 79.3829 125.905 79.9066 126.712 80.4304 cv
127.52 80.976 128.305 81.2379 129.047 81.2379 cv
129.331 81.2379 129.571 81.1725 129.724 81.0415 cv
129.877 80.9106 129.942 80.7578 129.942 80.5832 cv
129.942 80.1685 129.506 79.6666 128.633 79.0555 cv
127.76 78.4444 126.974 78.1389 126.319 78.1389 cv
.75021 .679683 .670222 .90164 cmyk
f
119.816 259.87 mo
133.98 259.87 li
@
126.909 257.295 mo
126.909 141.757 li
@
130.139 256.64 mo
126.909 259.87 li
123.657 256.64 li
130.139 256.64 li
ef
123.657 142.39 mo
126.909 139.16 li
130.139 142.39 li
123.657 142.39 li
ef
119.707 202.887 mo
134.089 202.887 li
134.089 196.907 li
119.707 196.907 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
125.206 199.875 mo
126.538 200.268 li
126.036 199.853 125.686 199.46 125.49 199.133 cv
125.294 198.806 125.206 198.456 125.206 198.107 cv
125.206 197.758 125.337 197.474 125.599 197.212 cv
125.883 196.972 126.254 196.841 126.69 196.841 cv
127.541 196.841 128.414 197.191 129.309 197.889 cv
130.204 198.587 130.64 199.417 130.64 200.333 cv
130.64 200.53 130.619 200.704 130.575 200.857 cv
130.531 201.01 130.444 201.185 130.335 201.359 cv
131.863 201.796 li
132.146 201.883 132.343 201.927 132.43 201.927 cv
132.517 201.927 132.605 201.905 132.648 201.861 cv
132.714 201.817 132.757 201.73 132.801 201.643 cv
132.823 201.534 132.845 201.337 132.845 201.032 cv
133.063 201.075 li
133.063 203.847 li
132.845 203.782 li
132.823 203.432 132.757 203.171 132.648 203.061 cv
132.539 202.93 132.255 202.8 131.754 202.647 cv
126.625 201.163 li
126.297 201.075 126.101 201.032 126.014 201.032 cv
125.905 201.032 125.839 201.054 125.774 201.119 cv
125.708 201.185 125.686 201.272 125.686 201.403 cv
125.686 201.512 125.686 201.665 125.73 201.883 cv
125.49 201.883 li
cp
129.877 201.228 mo
130.182 200.988 130.313 200.661 130.313 200.246 cv
130.313 200.05 130.269 199.853 130.139 199.635 cv
130.029 199.417 129.855 199.22 129.637 199.024 cv
129.418 198.806 129.156 198.631 128.873 198.478 cv
128.589 198.304 128.24 198.173 127.847 198.042 cv
127.454 197.911 127.061 197.845 126.668 197.845 cv
126.363 197.845 126.123 197.933 125.948 198.064 cv
125.795 198.216 125.708 198.369 125.708 198.566 cv
125.708 198.98 125.948 199.395 126.428 199.81 cv
126.909 200.224 127.476 200.53 128.131 200.726 cv
.75021 .679683 .670222 .90164 cmyk
f
2.15915 lw
[2.15915 4.31867 ] 0 dsh
41.1825 35.014 mo
41.1607 35.014 li
41.1607 60.483 li
@
.719839 lw
[] 0 dsh
65.9532 199.853 mo
51.7673 199.853 li
@
52.4221 203.105 mo
49.1702 199.853 li
52.4221 196.623 li
52.4221 203.105 li
ef
65.9532 79.121 mo
51.7673 79.121 li
@
52.4221 82.351 mo
49.1702 79.121 li
52.4221 75.891 li
52.4221 82.351 li
ef
108.183 260.59 mo
93.9974 260.59 li
@
94.6522 263.842 mo
91.4003 260.59 li
94.6522 257.36 li
94.6522 263.842 li
ef
108.554 138.44 mo
94.3685 138.44 li
@
95.0232 141.67 mo
91.7713 138.44 li
95.0232 135.21 li
95.0232 141.67 li
ef
1.19961 lw
[3.59883 3.59883 ] 0 dsh
77.7165 247.125 mo
77.8474 247.125 li
77.8474 215.829 li
@
74.1373 216.571 mo
77.8474 212.839 li
81.5794 216.571 li
74.1373 216.571 li
ef
2.15915 lw
[2.15915 4.31867 ] 0 dsh
41.8154 99.0902 mo
41.8154 181.499 li
41.8591 181.499 li
@
1.19961 lw
[3.59883 3.59883 ] 0 dsh
77.7165 186.693 mo
77.8474 186.693 li
77.8474 155.397 li
@
74.1373 156.139 mo
77.8474 152.407 li
81.5794 156.139 li
74.1373 156.139 li
ef
78.0002 125.279 mo
78.1311 125.279 li
78.1311 93.9615 li
@
74.421 94.7254 mo
78.1311 90.9934 li
81.8631 94.7254 li
74.421 94.7254 li
ef
65.5385 30.9765 mo
91.6841 30.9765 li
91.6841 4.83093 li
65.5385 4.83093 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
.719839 lw
[] 0 dsh
65.5385 30.9765 mo
91.6841 30.9765 li
91.6841 4.83093 li
65.5385 4.83093 li
cp
.75021 .679683 .670222 .90164 cmyk
@
91.6841 30.9765 mo
cp
@
74.2682 19.4969 mo
74.2682 13.4515 li
76.3852 14.1063 li
76.3852 14.3245 li
76.0797 14.259 75.7959 14.2154 75.5559 14.2154 cv
75.2721 14.2154 75.0539 14.3027 74.9011 14.4773 cv
74.792 14.6082 74.7484 14.9574 74.7484 15.503 cv
74.7484 16.1359 li
80.2263 17.7073 li
80.9028 17.9037 81.3175 17.991 81.4921 17.991 cv
81.6449 17.991 81.754 17.9474 81.8631 17.8164 cv
81.9504 17.6855 81.994 17.4672 81.994 17.1398 cv
81.994 16.878 li
82.2123 16.9434 li
82.2123 20.4135 li
81.994 20.348 li
81.994 20.1952 li
81.994 19.8897 81.9504 19.6496 81.8413 19.4969 cv
81.7758 19.3659 81.6667 19.2786 81.4921 19.1695 cv
81.3175 19.0822 80.9465 18.9512 80.379 18.7985 cv
74.7484 17.1398 li
74.7484 17.62 li
74.7484 18.0783 74.8138 18.4493 74.923 18.733 cv
75.0321 19.0167 75.2067 19.235 75.4249 19.4096 cv
75.6432 19.5842 75.9705 19.7151 76.3852 19.8242 cv
76.3852 20.0425 li
f
39.7639 25.1275 mo
40.3532 25.1275 40.9425 25.2803 41.5099 25.5859 cv
42.0773 25.9132 42.5356 26.3279 42.8848 26.8953 cv
43.2122 27.4409 43.3868 27.9865 43.3868 28.5103 cv
43.3868 29.0341 43.2122 29.4706 42.863 29.8198 cv
42.5356 30.1472 42.0773 30.3217 41.5317 30.3217 cv
40.9643 30.3217 40.3969 30.1472 39.8076 29.8198 cv
39.2402 29.4924 38.7818 29.0559 38.4327 28.5103 cv
38.1053 27.9429 37.9307 27.4191 37.9307 26.8953 cv
37.9307 26.3934 38.1053 25.9569 38.4545 25.6295 cv
38.7818 25.3022 39.2183 25.1275 39.7639 25.1275 cv
cp
39.3711 26.1096 mo
39.0001 26.1096 38.7164 26.1969 38.5418 26.3715 cv
38.3454 26.5461 38.2362 26.7644 38.2362 27.0481 cv
38.2362 27.6374 38.6509 28.1611 39.4802 28.6413 cv
40.2877 29.1214 41.1171 29.3615 41.9246 29.3615 cv
42.2956 29.3615 42.5793 29.2742 42.7757 29.0778 cv
42.9939 28.9032 43.0812 28.6631 43.0812 28.3794 cv
43.0812 27.812 42.6666 27.31 41.8591 26.8298 cv
41.0516 26.3497 40.2004 26.1096 39.3711 26.1096 cv
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TimesNewRomanPS-ItalicMT gcheck setglobal} if
1 4030 20 <0001007d000003570568001b00ca401a071a015602670276027403bd0d05
080008101701170f04080f09b80138b308070106410b01380007001a01a3
0010020e002800190138001a01fd401300100f0103000828100f0fe60100
1401010019ba01f4001a030d40091b1b000508070c0001bb03280010001a
020bb31f0f010fb80327400b10011c2800100117011c0aba022801e30018
2b2b103c2b2b3c2b10c0012bf65de43cf53c003f3c3f3c10f4ed870e2e2b
7d10c42b11121739180010f5ed2bfc01f50010ed0110c00010ed0110c031
30015d5d0071010106151416170721373637363736371336373635342623
220727250357febe1c335e0afdfd0e521a2a152122e815020326211a370d
01510568fb9f632c2527072525020b121e2e770325490b141323280c245e
>TimesNewRomanPS-ItalicMT AddT42Char 
TimesNewRomanPS-ItalicMT /CharStrings get begin
/one 20 def
end
TimesNewRomanPS-ItalicMT /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/RFTVCF+TimesNewRomanPS-ItalicMT*1 
[39{/.notdef}rp /quotesingle 3{/.notdef}rp /plus /.notdef /hyphen 3{/.notdef}rp /one 
50{/.notdef}rp /d 7{/.notdef}rp /l /.notdef /n /.notdef /p 
143{/.notdef}rp]
RFTVCF+TimesNewRomanPS-ItalicMT nf
RFTVCF+TimesNewRomanPS-ItalicMT*1 [0 -7.7913 -7.7913 0 0 0 ]msf
44.9363 24.6911 mo
(n+d-1)
[-3.8972 -5.26073 -3.89719 -2.59601 0 ]ysh
65.8659 18.6239 mo
51.68 18.6239 li
.75021 .679683 .670222 .90164 cmyk
@
52.3348 21.8539 mo
49.083 18.6239 li
52.3348 15.3721 li
52.3348 21.8539 li
ef
1.19961 lw
[3.59883 3.59883 ] 0 dsh
77.9129 64.7824 mo
78.0438 64.7824 li
78.0438 33.4644 li
@
74.3337 34.2065 mo
78.0438 30.4963 li
81.7758 34.2065 li
74.3337 34.2065 li
ef
39.6112 81.107 mo
40.1786 81.107 40.7679 81.2816 41.3353 81.5871 cv
41.9246 81.8927 42.361 82.3291 42.7102 82.8748 cv
43.0376 83.4422 43.2122 83.966 43.2122 84.4898 cv
43.2122 85.0354 43.0376 85.4718 42.6884 85.7992 cv
42.361 86.1484 41.9246 86.323 41.3789 86.323 cv
40.7897 86.323 40.2223 86.1484 39.633 85.821 cv
39.0656 85.4937 38.6073 85.0572 38.2799 84.4898 cv
37.9307 83.9442 37.7779 83.3985 37.7779 82.8966 cv
37.7779 82.3728 37.9307 81.9581 38.2799 81.6089 cv
38.6073 81.2816 39.0656 81.107 39.6112 81.107 cv
cp
39.1965 82.0891 mo
38.8255 82.0891 38.5636 82.1764 38.3672 82.351 cv
38.1708 82.5256 38.0835 82.7656 38.0835 83.0493 cv
38.0835 83.6168 38.4763 84.1406 39.3056 84.6207 cv
40.135 85.1008 40.9425 85.3627 41.75 85.3627 cv
42.121 85.3627 42.4047 85.2536 42.6229 85.079 cv
42.8194 84.8826 42.9067 84.6425 42.9067 84.3588 cv
42.9067 83.8132 42.5138 83.2894 41.6845 82.8093 cv
40.877 82.3291 40.0477 82.0891 39.1965 82.0891 cv
f
1 /0 /CSD get_res sepcs
1 sep
RFTVCF+TimesNewRomanPS-ItalicMT*1 [0 -7.7913 -7.7913 0 0 0 ]msf
44.7835 80.6705 mo
(n+d-l)
[-3.8972 -5.26071 -3.89722 -2.59599 0 ]ysh
.719839 lw
[] 0 dsh
14.906 79.2519 mo
29.07 79.2519 li
.75021 .679683 .670222 .90164 cmyk
@
14.906 19.7588 mo
29.07 19.7588 li
@
21.9771 76.6766 mo
21.9771 22.334 li
@
25.2289 76.0219 mo
21.9771 79.2519 li
18.7471 76.0219 li
25.2289 76.0219 li
ef
18.7471 22.9888 mo
21.9771 19.7588 li
25.2289 22.9888 li
18.7471 22.9888 li
ef
14.7751 51.535 mo
29.1791 51.535 li
29.1791 48.1959 li
14.7751 48.1959 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
17.2631 47.5848 mo
24.225 49.5926 li
24.5742 49.7018 24.7925 49.7454 24.8579 49.7454 cv
24.9234 49.7454 24.9671 49.7236 25.0107 49.6799 cv
25.0543 49.6581 25.0762 49.5926 25.0762 49.549 cv
25.0762 49.4835 25.0325 49.3962 24.9671 49.3089 cv
24.8143 49.1125 24.5524 48.8943 24.225 48.676 cv
24.3996 48.5014 li
24.9234 48.8724 25.2944 49.1998 25.4908 49.5272 cv
25.6436 49.7454 25.7309 49.9637 25.7309 50.1819 cv
25.7309 50.3128 25.6654 50.4438 25.5781 50.5529 cv
25.469 50.6402 25.3599 50.7057 25.2289 50.7057 cv
25.0762 50.7057 24.7925 50.6402 24.356 50.5093 cv
18.8562 48.9161 li
18.4198 48.7851 18.1579 48.7197 18.0924 48.7197 cv
17.9833 48.7197 17.9178 48.7633 17.8523 48.8288 cv
17.7868 48.9161 17.765 49.0252 17.765 49.178 cv
17.765 49.2653 17.7868 49.418 17.8087 49.5926 cv
17.5904 49.5926 li
.75021 .679683 .670222 .90164 cmyk
f
14.8405 201.119 mo
29.0045 201.119 li
@
21.9116 198.522 mo
21.9116 82.1327 li
@
25.1635 197.867 mo
21.9116 201.119 li
18.6816 197.867 li
25.1635 197.867 li
ef
18.6816 82.7874 mo
21.9116 79.5356 li
25.1635 82.7874 li
18.6816 82.7874 li
ef
14.7314 181.848 mo
29.1137 181.848 li
29.1137 99.5486 li
14.7314 99.5486 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
20.5367 180.844 mo
20.2093 178.836 li
23.0683 179.666 li
21.8898 178.989 21.0823 178.378 20.624 177.811 cv
20.3403 177.505 20.2093 177.243 20.2093 177.047 cv
20.2093 176.916 20.253 176.807 20.3403 176.741 cv
20.4058 176.654 20.5149 176.632 20.6677 176.632 cv
20.9296 176.632 21.1696 176.698 21.4097 176.829 cv
21.5843 176.916 21.6716 177.047 21.6716 177.221 cv
21.6716 177.309 21.6279 177.396 21.5843 177.461 cv
21.5188 177.527 21.4315 177.571 21.3006 177.571 cv
21.2351 177.592 21.1914 177.592 21.1696 177.636 cv
21.126 177.658 21.1041 177.702 21.1041 177.745 cv
21.1041 177.811 21.126 177.876 21.1696 177.92 cv
21.2133 178.029 21.366 178.182 21.6061 178.4 cv
21.9989 178.705 22.5009 179.076 23.112 179.447 cv
23.3521 179.6 23.6576 179.753 23.985 179.862 cv
24.4214 180.037 24.6833 180.124 24.7706 180.146 cv
25.5127 180.342 li
25.5127 181.237 li
21.8898 180.146 li
21.4533 180.015 21.1478 179.971 20.9732 179.971 cv
20.9077 179.971 20.8423 179.993 20.7986 180.059 cv
20.7331 180.124 20.7113 180.233 20.7113 180.364 cv
20.7113 180.451 20.7331 180.582 20.755 180.801 cv
cp
23.3084 175.388 mo
23.5048 175.41 23.6576 175.432 23.7885 175.432 cv
24.1377 175.432 24.4433 175.301 24.6833 175.061 cv
24.9234 174.799 25.0543 174.515 25.0543 174.166 cv
25.0543 173.882 24.9889 173.599 24.8798 173.337 cv
24.7706 173.097 24.5087 172.704 24.1159 172.18 cv
24.2905 172.071 li
25.2071 172.987 25.6654 173.882 25.6654 174.712 cv
25.6654 175.279 25.469 175.715 25.1198 175.999 cv
24.7706 176.283 24.356 176.436 23.9195 176.436 cv
23.3521 176.436 22.7628 176.261 22.1517 175.89 cv
21.5406 175.541 21.0605 175.083 20.7331 174.537 cv
20.3839 173.991 20.2093 173.446 20.2093 172.878 cv
20.2093 172.464 20.2966 172.158 20.4712 171.94 cv
20.6458 171.743 20.8423 171.656 21.0605 171.656 cv
21.3879 171.656 21.6934 171.787 21.9989 172.027 cv
22.3918 172.376 22.6973 172.878 22.9374 173.533 cv
23.0902 173.97 23.2211 174.581 23.3084 175.388 cv
cp
23.0247 175.344 mo
22.9592 174.755 22.8501 174.297 22.6755 173.926 cv
22.4573 173.446 22.2172 173.097 21.9116 172.857 cv
21.6061 172.616 21.3224 172.486 21.0605 172.486 cv
20.8859 172.486 20.755 172.529 20.6677 172.638 cv
20.5585 172.747 20.5149 172.9 20.5149 173.075 cv
20.5149 173.489 20.7113 173.904 21.1478 174.362 cv
21.5625 174.799 22.1954 175.126 23.0247 175.344 cv
cp
17.1976 165 mo
24.0941 167.008 li
24.4651 167.117 24.727 167.182 24.8361 167.182 cv
24.8798 167.182 24.9234 167.16 24.9452 167.117 cv
24.9889 167.095 25.0107 167.051 25.0107 167.029 cv
25.0107 166.964 24.9671 166.92 24.9234 166.833 cv
24.8361 166.702 24.596 166.484 24.225 166.178 cv
24.356 165.982 li
24.727 166.266 25.0543 166.549 25.2944 166.833 cv
25.5345 167.117 25.6654 167.379 25.6654 167.641 cv
25.6654 167.771 25.6218 167.881 25.5127 167.968 cv
25.4254 168.055 25.2944 168.099 25.1198 168.099 cv
24.9016 168.099 24.596 168.033 24.225 167.902 cv
23.5048 167.684 li
24.3778 168.252 24.9671 168.775 25.3162 169.234 cv
25.5345 169.561 25.6654 169.867 25.6654 170.15 cv
25.6654 170.456 25.5345 170.696 25.2726 170.936 cv
24.9889 171.154 24.6397 171.263 24.1814 171.263 cv
23.6139 171.263 22.981 171.067 22.3263 170.696 cv
21.6716 170.325 21.126 169.845 20.7113 169.234 cv
20.3839 168.754 20.2093 168.317 20.2093 167.902 cv
20.2093 167.706 20.253 167.51 20.3403 167.357 cv
20.4276 167.204 20.5804 167.051 20.7768 166.92 cv
18.7253 166.331 li
18.5943 166.287 18.4852 166.266 18.3979 166.222 cv
18.2233 166.178 18.1142 166.156 18.0051 166.156 cv
17.9178 166.156 17.8523 166.2 17.7868 166.244 cv
17.7214 166.331 17.6995 166.44 17.6995 166.571 cv
17.6995 166.658 17.7214 166.811 17.7432 167.008 cv
17.525 167.008 li
cp
21.3442 167.16 mo
21.1041 167.16 20.8859 167.248 20.755 167.379 cv
20.6022 167.531 20.5149 167.706 20.5149 167.946 cv
20.5149 168.426 20.9296 168.95 21.7371 169.474 cv
22.5446 169.998 23.3302 170.281 24.0723 170.281 cv
24.356 170.281 24.5742 170.216 24.727 170.085 cv
24.8798 169.954 24.9671 169.801 24.9671 169.627 cv
24.9671 169.212 24.5306 168.71 23.6576 168.099 cv
22.7628 167.466 21.9989 167.16 21.3442 167.16 cv
cp
20.3621 159.849 mo
23.854 160.853 li
24.3778 161.006 24.7052 161.093 24.8361 161.093 cv
24.9016 161.093 24.9452 161.071 24.9889 161.05 cv
25.0107 161.028 25.0325 160.984 25.0325 160.94 cv
25.0325 160.875 25.0107 160.809 24.9452 160.722 cv
24.8798 160.657 24.6397 160.438 24.225 160.133 cv
24.356 159.937 li
24.8361 160.264 25.2071 160.569 25.4254 160.897 cv
25.5781 161.115 25.6654 161.311 25.6654 161.508 cv
25.6654 161.661 25.6218 161.792 25.5345 161.879 cv
25.4472 161.966 25.3381 162.01 25.1853 162.01 cv
25.0543 162.01 24.8798 161.966 24.6615 161.923 cv
24.3778 161.857 23.7449 161.682 22.7846 161.399 cv
23.8758 162.053 24.6179 162.621 25.0325 163.057 cv
25.4472 163.516 25.6654 163.93 25.6654 164.301 cv
25.6654 164.476 25.6 164.629 25.469 164.76 cv
25.3381 164.891 25.1853 164.956 24.9889 164.956 cv
24.7052 164.956 24.2468 164.869 23.6576 164.694 cv
21.8462 164.192 li
21.4097 164.061 21.126 163.996 21.0387 163.996 cv
20.995 163.996 20.9514 164.018 20.9077 164.039 cv
20.8859 164.083 20.8641 164.105 20.8641 164.149 cv
20.8641 164.236 20.8859 164.323 20.9514 164.389 cv
21.0168 164.476 21.2351 164.672 21.6061 164.956 cv
21.4752 165.131 li
21.0168 164.847 20.6895 164.541 20.4712 164.214 cv
20.2966 163.952 20.2093 163.734 20.2093 163.516 cv
20.2093 163.363 20.253 163.254 20.3621 163.167 cv
20.4494 163.057 20.5585 163.014 20.7113 163.014 cv
20.9296 163.014 21.3006 163.101 21.8462 163.254 cv
23.7231 163.799 li
24.2468 163.952 24.5742 164.039 24.7052 164.039 cv
24.7925 164.039 24.8361 164.018 24.8798 163.952 cv
24.9234 163.909 24.9452 163.843 24.9452 163.756 cv
24.9452 163.647 24.9016 163.472 24.7706 163.254 cv
24.6397 163.057 24.356 162.774 23.8977 162.424 cv
23.4612 162.097 23.0465 161.792 22.6537 161.573 cv
22.2608 161.355 21.6498 161.115 20.7986 160.853 cv
20.3621 160.722 li
cp
20.2093 156.837 mo
22.8719 157.623 li
21.8025 156.881 21.0823 156.335 20.7331 155.943 cv
20.3839 155.55 20.2093 155.179 20.2093 154.83 cv
20.2093 154.633 20.2748 154.459 20.4058 154.328 cv
20.5367 154.219 20.7113 154.153 20.9077 154.153 cv
21.1478 154.153 21.4533 154.197 21.8462 154.328 cv
24.3123 155.026 li
24.596 155.113 24.7706 155.157 24.8361 155.157 cv
24.9016 155.157 24.9452 155.135 24.9671 155.113 cv
25.0107 155.07 25.0325 155.048 25.0325 155.004 cv
25.0325 154.961 25.0107 154.895 24.9452 154.83 cv
24.7925 154.633 24.5524 154.415 24.2032 154.153 cv
24.3123 153.978 li
24.8361 154.349 25.2071 154.677 25.4254 155.004 cv
25.5781 155.244 25.6654 155.441 25.6654 155.615 cv
25.6654 155.768 25.6218 155.877 25.5345 155.964 cv
25.4472 156.052 25.3162 156.095 25.1635 156.095 cv
24.9889 156.095 24.6615 156.03 24.2032 155.899 cv
21.8462 155.222 li
21.5625 155.135 21.3224 155.092 21.1696 155.092 cv
21.0823 155.092 21.0168 155.113 20.9732 155.157 cv
20.9296 155.201 20.9077 155.266 20.9077 155.353 cv
20.9077 155.463 20.9514 155.593 21.0387 155.746 cv
21.2133 156.03 21.5188 156.335 21.9116 156.641 cv
22.3263 156.947 22.8283 157.296 23.4612 157.623 cv
23.7885 157.82 24.1596 157.972 24.5524 158.081 cv
25.5127 158.387 li
25.5127 159.26 li
21.8462 158.191 li
21.4097 158.06 21.1478 158.016 21.0605 158.016 cv
20.9732 158.016 20.8859 158.038 20.8204 158.103 cv
20.755 158.169 20.7331 158.256 20.7331 158.365 cv
20.7331 158.409 20.7331 158.496 20.755 158.605 cv
20.7986 158.823 li
20.5804 158.867 li
cp
17.1976 146.995 mo
24.0941 149.024 li
24.4651 149.133 24.727 149.177 24.8361 149.177 cv
24.8798 149.177 24.9234 149.155 24.9452 149.133 cv
24.9889 149.09 25.0107 149.068 25.0107 149.024 cv
25.0107 148.981 24.9671 148.915 24.9234 148.85 cv
24.8361 148.719 24.596 148.501 24.225 148.173 cv
24.356 147.977 li
24.727 148.26 25.0543 148.544 25.2944 148.828 cv
25.5345 149.112 25.6654 149.395 25.6654 149.635 cv
25.6654 149.766 25.6218 149.875 25.5127 149.963 cv
25.4254 150.05 25.2944 150.094 25.1198 150.094 cv
24.9016 150.094 24.596 150.028 24.225 149.919 cv
23.5048 149.679 li
24.3778 150.246 24.9671 150.77 25.3162 151.229 cv
25.5345 151.556 25.6654 151.861 25.6654 152.145 cv
25.6654 152.451 25.5345 152.713 25.2726 152.931 cv
24.9889 153.149 24.6397 153.258 24.1814 153.258 cv
23.6139 153.258 22.981 153.084 22.3263 152.713 cv
21.6716 152.342 21.126 151.84 20.7113 151.229 cv
20.3839 150.748 20.2093 150.312 20.2093 149.919 cv
20.2093 149.701 20.253 149.526 20.3403 149.374 cv
20.4276 149.221 20.5804 149.068 20.7768 148.915 cv
18.7253 148.348 li
18.5943 148.304 18.4852 148.26 18.3979 148.239 cv
18.2233 148.195 18.1142 148.173 18.0051 148.173 cv
17.9178 148.173 17.8523 148.195 17.7868 148.26 cv
17.7214 148.326 17.6995 148.435 17.6995 148.566 cv
17.6995 148.653 17.7214 148.806 17.7432 149.024 cv
17.525 149.024 li
cp
21.3442 149.177 mo
21.1041 149.177 20.8859 149.243 20.755 149.395 cv
20.6022 149.526 20.5149 149.723 20.5149 149.941 cv
20.5149 150.443 20.9296 150.945 21.7371 151.469 cv
22.5446 152.014 23.3302 152.276 24.0723 152.276 cv
24.356 152.276 24.5742 152.211 24.727 152.08 cv
24.8798 151.949 24.9671 151.796 24.9671 151.621 cv
24.9671 151.207 24.5306 150.705 23.6576 150.094 cv
22.7628 149.483 21.9989 149.177 21.3442 149.177 cv
cp
20.2093 141.866 mo
24.1814 143.001 li
24.727 143.132 li
24.7706 143.154 24.8143 143.154 24.8579 143.154 cv
24.9234 143.154 24.9671 143.132 25.0107 143.088 cv
25.0543 143.066 25.0762 143.023 25.0762 142.979 cv
25.0762 142.935 25.0325 142.87 24.9671 142.783 cv
24.8579 142.63 24.6179 142.412 24.2687 142.171 cv
24.4214 141.975 li
24.8143 142.237 25.1198 142.521 25.3381 142.804 cv
25.5563 143.088 25.6654 143.35 25.6654 143.59 cv
25.6654 143.765 25.6218 143.896 25.5345 143.961 cv
25.4472 144.048 25.3162 144.092 25.1635 144.092 cv
24.9671 144.092 24.727 144.048 24.4214 143.961 cv
23.9631 143.852 li
24.6397 144.354 25.098 144.834 25.3817 145.249 cv
25.5563 145.554 25.6654 145.86 25.6654 146.165 cv
25.6654 146.449 25.5345 146.689 25.2944 146.907 cv
25.0762 147.104 24.7488 147.213 24.3341 147.213 cv
23.7012 147.213 23.0465 147.016 22.37 146.645 cv
21.6716 146.274 21.126 145.816 20.7113 145.227 cv
20.3839 144.79 20.2093 144.354 20.2093 143.961 cv
20.2093 143.721 20.2748 143.525 20.4058 143.372 cv
20.5367 143.197 20.7331 143.088 21.0168 143.001 cv
20.3621 142.804 li
cp
20.5149 143.939 mo
20.5149 144.201 20.6458 144.463 20.8641 144.747 cv
21.2133 145.14 21.6934 145.489 22.3481 145.816 cv
23.0029 146.122 23.5921 146.274 24.1159 146.274 cv
24.3778 146.274 24.596 146.209 24.7488 146.078 cv
24.9016 145.947 24.9889 145.794 24.9889 145.62 cv
24.9889 145.183 24.6615 144.725 24.0286 144.223 cv
23.1993 143.568 22.3481 143.219 21.4533 143.219 cv
21.126 143.219 20.8859 143.285 20.755 143.415 cv
20.6022 143.546 20.5149 143.721 20.5149 143.939 cv
cp
20.2093 138.854 mo
22.8719 139.618 li
21.8025 138.898 21.0823 138.33 20.7331 137.938 cv
20.3839 137.567 20.2093 137.196 20.2093 136.825 cv
20.2093 136.628 20.2748 136.475 20.4058 136.344 cv
20.5367 136.213 20.7113 136.148 20.9077 136.148 cv
21.1478 136.148 21.4533 136.213 21.8462 136.323 cv
24.3123 137.043 li
24.596 137.108 24.7706 137.152 24.8361 137.152 cv
24.9016 137.152 24.9452 137.152 24.9671 137.108 cv
25.0107 137.086 25.0325 137.043 25.0325 137.021 cv
25.0325 136.977 25.0107 136.912 24.9452 136.846 cv
24.7925 136.628 24.5524 136.41 24.2032 136.17 cv
24.3123 135.973 li
24.8361 136.344 25.2071 136.694 25.4254 137.021 cv
25.5781 137.239 25.6654 137.436 25.6654 137.632 cv
25.6654 137.763 25.6218 137.872 25.5345 137.959 cv
25.4472 138.047 25.3162 138.09 25.1635 138.09 cv
24.9889 138.09 24.6615 138.025 24.2032 137.894 cv
21.8462 137.217 li
21.5625 137.13 21.3224 137.086 21.1696 137.086 cv
21.0823 137.086 21.0168 137.108 20.9732 137.174 cv
20.9296 137.217 20.9077 137.283 20.9077 137.348 cv
20.9077 137.457 20.9514 137.588 21.0387 137.741 cv
21.2133 138.025 21.5188 138.33 21.9116 138.658 cv
22.3263 138.963 22.8283 139.291 23.4612 139.64 cv
23.7885 139.814 24.1596 139.967 24.5524 140.098 cv
25.5127 140.382 li
25.5127 141.277 li
21.8462 140.207 li
21.4097 140.076 21.1478 140.011 21.0605 140.011 cv
20.9732 140.011 20.8859 140.055 20.8204 140.12 cv
20.755 140.185 20.7331 140.273 20.7331 140.36 cv
20.7331 140.426 20.7331 140.491 20.755 140.622 cv
20.7986 140.84 li
20.5804 140.884 li
cp
18.7689 132.372 mo
20.3621 132.831 li
20.3621 131.914 li
20.7331 132.023 li
20.7331 132.94 li
24.1814 133.944 li
24.5524 134.053 24.7925 134.096 24.9016 134.096 cv
24.9671 134.096 25.0107 134.096 25.0543 134.053 cv
25.098 134.031 25.098 133.987 25.098 133.944 cv
25.098 133.856 25.0325 133.725 24.9016 133.551 cv
24.8143 133.464 24.5742 133.245 24.1814 132.94 cv
24.3341 132.743 li
24.8579 133.093 25.2289 133.442 25.4254 133.747 cv
25.5781 133.966 25.6654 134.206 25.6654 134.424 cv
25.6654 134.598 25.6 134.729 25.4908 134.839 cv
25.3817 134.948 25.2508 135.013 25.0762 135.013 cv
24.8798 135.013 24.5524 134.948 24.1159 134.817 cv
20.7331 133.835 li
20.7331 134.729 li
20.4931 134.664 li
20.3839 134.227 20.2093 133.878 19.9693 133.595 cv
19.751 133.311 19.3364 132.983 18.7689 132.634 cv
cp
17.1976 125.607 mo
24.1596 127.593 li
24.5087 127.702 24.727 127.746 24.7925 127.746 cv
24.8579 127.746 24.9016 127.724 24.9452 127.68 cv
24.9889 127.658 25.0107 127.615 25.0107 127.549 cv
25.0107 127.484 24.9671 127.396 24.9016 127.309 cv
24.7488 127.113 24.4869 126.894 24.1596 126.676 cv
24.3341 126.502 li
24.8579 126.873 25.2289 127.222 25.4254 127.527 cv
25.5781 127.746 25.6654 127.964 25.6654 128.182 cv
25.6654 128.335 25.6 128.444 25.5127 128.553 cv
25.4035 128.662 25.2944 128.706 25.1635 128.706 cv
25.0107 128.706 24.727 128.64 24.2905 128.509 cv
18.7908 126.916 li
18.3543 126.807 18.0924 126.742 18.0269 126.742 cv
17.9178 126.742 17.8523 126.764 17.7868 126.851 cv
17.7214 126.916 17.6995 127.025 17.6995 127.2 cv
17.6995 127.287 17.7214 127.418 17.7432 127.593 cv
17.525 127.593 li
cp
23.3084 124.406 mo
23.5048 124.428 23.6576 124.45 23.7885 124.45 cv
24.1377 124.45 24.4433 124.319 24.6833 124.079 cv
24.9234 123.817 25.0543 123.534 25.0543 123.184 cv
25.0543 122.901 24.9889 122.617 24.8798 122.377 cv
24.7706 122.115 24.5087 121.722 24.1159 121.22 cv
24.2905 121.089 li
25.2071 122.006 25.6654 122.901 25.6654 123.73 cv
25.6654 124.297 25.469 124.734 25.1198 125.018 cv
24.7706 125.301 24.356 125.454 23.9195 125.454 cv
23.3521 125.454 22.7628 125.279 22.1517 124.908 cv
21.5406 124.559 21.0605 124.101 20.7331 123.555 cv
20.3839 123.032 20.2093 122.464 20.2093 121.897 cv
20.2093 121.482 20.2966 121.176 20.4712 120.98 cv
20.6458 120.762 20.8423 120.675 21.0605 120.675 cv
21.3879 120.675 21.6934 120.805 21.9989 121.067 cv
22.3918 121.395 22.6973 121.897 22.9374 122.551 cv
23.0902 122.988 23.2211 123.599 23.3084 124.406 cv
cp
23.0247 124.363 mo
22.9592 123.774 22.8501 123.315 22.6755 122.944 cv
22.4573 122.464 22.2172 122.115 21.9116 121.875 cv
21.6061 121.635 21.3224 121.504 21.0605 121.504 cv
20.8859 121.504 20.755 121.569 20.6677 121.657 cv
20.5585 121.766 20.5149 121.919 20.5149 122.115 cv
20.5149 122.508 20.7113 122.922 21.1478 123.381 cv
21.5625 123.817 22.1954 124.145 23.0247 124.363 cv
cp
18.7689 117.401 mo
20.3621 117.837 li
20.3621 116.921 li
20.7331 117.03 li
20.7331 117.946 li
24.1814 118.95 li
24.5524 119.06 24.7925 119.103 24.9016 119.103 cv
24.9671 119.103 25.0107 119.103 25.0543 119.06 cv
25.098 119.038 25.098 118.994 25.098 118.95 cv
25.098 118.863 25.0325 118.732 24.9016 118.558 cv
24.8143 118.47 24.5742 118.274 24.1814 117.946 cv
24.3341 117.75 li
24.8579 118.099 25.2289 118.448 25.4254 118.776 cv
25.5781 118.994 25.6654 119.212 25.6654 119.431 cv
25.6654 119.605 25.6 119.736 25.4908 119.845 cv
25.3817 119.954 25.2508 120.02 25.0762 120.02 cv
24.8798 120.02 24.5524 119.954 24.1159 119.823 cv
20.7331 118.841 li
20.7331 119.736 li
20.4931 119.671 li
20.3839 119.234 20.2093 118.885 19.9693 118.601 cv
19.751 118.317 19.3364 117.99 18.7689 117.641 cv
cp
18.7689 114.062 mo
20.3621 114.52 li
20.3621 113.603 li
20.7331 113.691 li
20.7331 114.607 li
24.1814 115.611 li
24.5524 115.72 24.7925 115.786 24.9016 115.786 cv
24.9671 115.786 25.0107 115.764 25.0543 115.742 cv
25.098 115.699 25.098 115.655 25.098 115.611 cv
25.098 115.524 25.0325 115.393 24.9016 115.24 cv
24.8143 115.131 24.5742 114.935 24.1814 114.607 cv
24.3341 114.411 li
24.8579 114.782 25.2289 115.109 25.4254 115.437 cv
25.5781 115.655 25.6654 115.873 25.6654 116.091 cv
25.6654 116.266 25.6 116.419 25.4908 116.528 cv
25.3817 116.637 25.2508 116.681 25.0762 116.681 cv
24.8798 116.681 24.5524 116.615 24.1159 116.484 cv
20.7331 115.524 li
20.7331 116.397 li
20.4931 116.331 li
20.3839 115.917 20.2093 115.546 19.9693 115.262 cv
19.751 114.978 19.3364 114.673 18.7689 114.324 cv
cp
23.3084 112.403 mo
23.5048 112.447 23.6576 112.447 23.7885 112.447 cv
24.1377 112.447 24.4433 112.338 24.6833 112.076 cv
24.9234 111.836 25.0543 111.53 25.0543 111.181 cv
25.0543 110.897 24.9889 110.635 24.8798 110.373 cv
24.7706 110.112 24.5087 109.741 24.1159 109.217 cv
24.2905 109.086 li
25.2071 110.024 25.6654 110.897 25.6654 111.748 cv
25.6654 112.316 25.469 112.752 25.1198 113.036 cv
24.7706 113.32 24.356 113.472 23.9195 113.472 cv
23.3521 113.472 22.7628 113.276 22.1517 112.927 cv
21.5406 112.578 21.0605 112.119 20.7331 111.574 cv
20.3839 111.028 20.2093 110.483 20.2093 109.893 cv
20.2093 109.479 20.2966 109.173 20.4712 108.977 cv
20.6458 108.78 20.8423 108.671 21.0605 108.671 cv
21.3879 108.671 21.6934 108.802 21.9989 109.064 cv
22.3918 109.413 22.6973 109.915 22.9374 110.57 cv
23.0902 111.006 23.2211 111.617 23.3084 112.403 cv
cp
23.0247 112.359 mo
22.9592 111.792 22.8501 111.312 22.6755 110.963 cv
22.4573 110.483 22.2172 110.112 21.9116 109.871 cv
21.6061 109.631 21.3224 109.522 21.0605 109.522 cv
20.8859 109.522 20.755 109.566 20.6677 109.675 cv
20.5585 109.784 20.5149 109.915 20.5149 110.112 cv
20.5149 110.504 20.7113 110.941 21.1478 111.377 cv
21.5625 111.836 22.1954 112.163 23.0247 112.359 cv
cp
20.5367 107.885 mo
20.2093 105.878 li
23.0683 106.707 li
21.8898 106.03 21.0823 105.397 20.624 104.852 cv
20.3403 104.525 20.2093 104.284 20.2093 104.066 cv
20.2093 103.957 20.253 103.848 20.3403 103.761 cv
20.4058 103.695 20.5149 103.652 20.6677 103.652 cv
20.9296 103.652 21.1696 103.717 21.4097 103.87 cv
21.5843 103.957 21.6716 104.088 21.6716 104.263 cv
21.6716 104.35 21.6279 104.437 21.5843 104.503 cv
21.5188 104.568 21.4315 104.59 21.3006 104.612 cv
21.2351 104.612 21.1914 104.634 21.1696 104.677 cv
21.126 104.699 21.1041 104.743 21.1041 104.786 cv
21.1041 104.852 21.126 104.917 21.1696 104.961 cv
21.2133 105.07 21.366 105.223 21.6061 105.419 cv
21.9989 105.747 22.5009 106.096 23.112 106.489 cv
23.3521 106.641 23.6576 106.794 23.985 106.903 cv
24.4214 107.078 24.6833 107.165 24.7706 107.187 cv
25.5127 107.383 li
25.5127 108.278 li
21.8898 107.187 li
21.4533 107.056 21.1478 106.991 20.9732 106.991 cv
20.9077 106.991 20.8423 107.034 20.7986 107.078 cv
20.7331 107.165 20.7113 107.274 20.7113 107.405 cv
20.7113 107.471 20.7331 107.624 20.755 107.842 cv
cp
20.2093 99.5049 mo
22.0208 99.8541 li
22.0208 100.072 li
21.497 100.094 21.1041 100.203 20.8641 100.4 cv
20.6458 100.596 20.5149 100.858 20.5149 101.164 cv
20.5149 101.404 20.5804 101.6 20.7113 101.731 cv
20.8423 101.884 21.0168 101.949 21.1914 101.949 cv
21.3224 101.949 21.4533 101.927 21.5625 101.862 cv
21.6716 101.818 21.8462 101.687 22.0644 101.491 cv
22.61 100.989 23.0247 100.662 23.3084 100.509 cv
23.5921 100.356 23.854 100.291 24.1159 100.291 cv
24.5087 100.291 24.8798 100.465 25.1853 100.793 cv
25.4908 101.12 25.6654 101.556 25.6654 102.08 cv
25.6654 102.364 25.6 102.669 25.469 103.04 cv
25.4035 103.171 25.3817 103.281 25.3817 103.346 cv
25.3817 103.521 25.469 103.652 25.6654 103.739 cv
25.6654 103.957 li
23.7667 103.608 li
23.7667 103.39 li
24.356 103.368 24.7706 103.237 25.0107 103.019 cv
25.2726 102.8 25.3817 102.495 25.3817 102.102 cv
25.3817 101.796 25.3162 101.578 25.1416 101.404 cv
24.9671 101.229 24.7706 101.142 24.5306 101.142 cv
24.3778 101.142 24.225 101.164 24.0941 101.229 cv
23.854 101.338 23.5266 101.578 23.112 101.927 cv
22.7191 102.277 22.3918 102.495 22.1954 102.582 cv
21.9771 102.691 21.7807 102.735 21.5625 102.735 cv
21.1914 102.735 20.8641 102.604 20.6022 102.32 cv
20.3403 102.058 20.2093 101.687 20.2093 101.273 cv
20.2093 101.142 20.2312 101.033 20.253 100.923 cv
20.253 100.88 20.2966 100.749 20.3839 100.531 cv
20.4494 100.334 20.4931 100.203 20.4931 100.138 cv
20.4931 99.9632 20.4058 99.8323 20.2093 99.7232 cv
.75021 .679683 .670222 .90164 cmyk
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/RFTVCF+TimesNewRomanPS-ItalicMT*1 uf
/RFTVCF+TimesNewRomanPS-ItalicMT uf
/TimesNewRomanPS-ItalicMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
